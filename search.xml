<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>段永平投资问答录</title>
      <link href="/2023/10/26/duan-yong-ping-tou-zi-wen-da-lu/"/>
      <url>/2023/10/26/duan-yong-ping-tou-zi-wen-da-lu/</url>
      
        <content type="html"><![CDATA[<h1 id="雪球特别版：段永平投资问答录（商业逻辑篇）"><a href="#雪球特别版：段永平投资问答录（商业逻辑篇）" class="headerlink" title="雪球特别版：段永平投资问答录（商业逻辑篇）"></a>雪球特别版：段永平投资问答录（商业逻辑篇）</h1><h2 id="书籍地址"><a href="#书籍地址" class="headerlink" title="书籍地址"></a>书籍地址</h2><p><a href="https://xqdoc.imedao.com/176830f1d76db3fe95563ced.pdf">雪球特别版——段永平投资问答录(投资逻辑篇)</a></p><h2 id="一句话概括"><a href="#一句话概括" class="headerlink" title="一句话概括"></a>一句话概括</h2><p>记录了OPPO&amp;vivo&amp;步步高创始人段永平在雪球上和网友的投资问答，体现了段永平本人的开公司、投资的理念。本书从伟大企业的定义到商业模式，到产品差异化和创新，最后到不为清单的方式展开了段总的思路和理念，即买股票就是买公司，一个伟大的企业需要在长长的坡道上积厚厚的雪。</p><h2 id="读书体会"><a href="#读书体会" class="headerlink" title="读书体会"></a>读书体会</h2><ol><li>买股票就是买公司，既然买公司，就要将眼光看的长远写，要看一个企业十年甚至更长时间的发展，不然每天都得心惊胆战。</li><li>过于强调性价比可能是商品本身没有那么完美，性价比是没有极限的，这样的产品缺少差异性。</li><li>本分其实是诚信的延生</li><li>后发而先至，不必追求过快的发展</li></ol><h2 id="tag"><a href="#tag" class="headerlink" title="tag"></a>tag</h2><p>投资</p>]]></content>
      
      
      <categories>
          
          <category> 杂书 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 财经 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Leetcode:42. 接雨水</title>
      <link href="/2020/06/29/leetcode-42-jie-yu-shui/"/>
      <url>/2020/06/29/leetcode-42-jie-yu-shui/</url>
      
        <content type="html"><![CDATA[<h1 id="Leetcode-42-接雨水"><a href="#Leetcode-42-接雨水" class="headerlink" title="Leetcode:42. 接雨水"></a><a href="https://leetcode-cn.com/problems/trapping-rain-water/">Leetcode:42. 接雨水</a></h1><h2 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h2><pre><code>给定 n 个非负整数表示每个宽度为 1 的柱子的高度图，计算按此排列的柱子，下雨之后能接多少雨水。上面是由数组 [0,1,0,2,1,0,1,3,2,1,2,1] 表示的高度图，在这种情况下，可以接 6 个单位的雨水（蓝色部分表示雨水）。 感谢 Marcos 贡献此图。</code></pre><h3 id="示例"><a href="#示例" class="headerlink" title="示例:"></a>示例:</h3><pre><code>输入: [0,1,0,2,1,0,1,3,2,1,2,1]输出: 6</code></pre><h2 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h2><h3 id="思路1-暴力解决"><a href="#思路1-暴力解决" class="headerlink" title="思路1:暴力解决"></a>思路1:暴力解决</h3><p>对每个位置找最大左右边界的最小值</p><h3 id="思路2-DP"><a href="#思路2-DP" class="headerlink" title="思路2:DP"></a>思路2:DP</h3><p>记录每个位置的最大左边界和右边界，然后利用dp[i] &#x3D; max(dp[i], dp[i - 1])进行状态更新，使用记录的左右边界的最小值减去当前高度获取结果</p><h3 id="思路3-双指针法"><a href="#思路3-双指针法" class="headerlink" title="思路3: 双指针法"></a>思路3: 双指针法</h3><p>实际上两个状态转移都只用到了一个原状态，故可以只记录左右最大值即可，在这个过程中，若左边最大值小于右边最小值，这取左边最大值减去当前值即获得当且可接雨水量</p><h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><h3 id="思路1代码"><a href="#思路1代码" class="headerlink" title="思路1代码"></a>思路1代码</h3><pre class=" language-Java"><code class="language-Java">class Solution &#123;    public int trap(int[] height) &#123;        if (height == null || height.length < 3)&#123;            return 0;        &#125;        int result = 0;        int height_size = height.length;        for(int i = 1; i < height_size - 1; i++)&#123;            int left_height = height[i];            int right_heigh = height[i];            for(int j = 0; j < height_size; j++)&#123;                if(j < i && height[j] > left_height)&#123;                    left_height = height[j];                &#125;                if (j > i && height[j] > right_heigh)&#123;                    right_heigh = height[j];                &#125;            &#125;            result += Math.min(left_height, right_heigh) - height[i];        &#125;        return result;    &#125;&#125;</code></pre><h3 id="思路2代码"><a href="#思路2代码" class="headerlink" title="思路2代码"></a>思路2代码</h3><pre class=" language-Java"><code class="language-Java">class Solution &#123;    public int trap(int[] height) &#123;        if (height == null || height.length == 0)&#123;            return 0;        &#125;        int height_size = height.length;        int[] leftMaxs = new int[height_size];        int[] rightMaxs = new int[height_size];        leftMaxs[0] = height[0];        rightMaxs[height_size - 1] = height[height_size - 1];        for(int i = 1; i < height_size; i++)&#123;            leftMaxs[i] = Math.max(height[i], leftMaxs[i - 1]);            rightMaxs[height_size - i - 1] = Math.max(height[height_size - i - 1], rightMaxs[height_size - i]);        &#125;        int result = 0;        for(int i = 1; i < height_size - 1; i++)&#123;            result += Math.min(leftMaxs[i], rightMaxs[i]) - height[i];        &#125;        return result;    &#125;&#125;</code></pre><h3 id="思路三代码"><a href="#思路三代码" class="headerlink" title="思路三代码"></a>思路三代码</h3><pre class=" language-Java"><code class="language-Java">class Solution &#123;    public int trap(int[] height) &#123;        if (height == null || height.length < 3)&#123;            return 0;        &#125;        int result = 0;        int left = 0;        int right = height.length - 1;        int maxRight = 0;        int maxLeft = 0;        while (left < right)&#123;            if (height[left] < height[right])&#123;                if(maxLeft < height[left])&#123;                    maxLeft = height[left];                &#125;else&#123;                    result += maxLeft - height[left];                &#125;                left++;            &#125;else&#123;                if(maxRight < height[right])&#123;                    maxRight = height[right];                &#125;else&#123;                    result += maxRight - height[right];                &#125;                right --;            &#125;        &#125;        return result;    &#125;&#125;</code></pre><h2 id="复杂度分析"><a href="#复杂度分析" class="headerlink" title="复杂度分析"></a>复杂度分析</h2><h3 id="思路1时间复杂度"><a href="#思路1时间复杂度" class="headerlink" title="思路1时间复杂度"></a>思路1时间复杂度</h3><p>$O(n^2)$</p><h3 id="思路1空间复杂度"><a href="#思路1空间复杂度" class="headerlink" title="思路1空间复杂度"></a>思路1空间复杂度</h3><p>$O(1)$</p><h3 id="思路2时间复杂度"><a href="#思路2时间复杂度" class="headerlink" title="思路2时间复杂度"></a>思路2时间复杂度</h3><p>$O(n)$</p><h3 id="思路2空间复杂度"><a href="#思路2空间复杂度" class="headerlink" title="思路2空间复杂度"></a>思路2空间复杂度</h3><p>$O(n)$</p><h3 id="思路3时间复杂度"><a href="#思路3时间复杂度" class="headerlink" title="思路3时间复杂度"></a>思路3时间复杂度</h3><p>$O(n)$</p><h3 id="思路3空间复杂度"><a href="#思路3空间复杂度" class="headerlink" title="思路3空间复杂度"></a>思路3空间复杂度</h3><p>$O(1)$</p>]]></content>
      
      
      <categories>
          
          <category> Leetcode </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Leetcode </tag>
            
            <tag> Hard </tag>
            
            <tag> DP </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Leetcode:40. 组合总和 II</title>
      <link href="/2020/06/07/leetcode-40-zu-he-zong-he-ii/"/>
      <url>/2020/06/07/leetcode-40-zu-he-zong-he-ii/</url>
      
        <content type="html"><![CDATA[<h1 id="Leetcode-40-组合总和-II"><a href="#Leetcode-40-组合总和-II" class="headerlink" title="Leetcode: 40. 组合总和 II"></a><a href="https://leetcode-cn.com/problems/combination-sum-ii/">Leetcode: 40. 组合总和 II</a></h1><h2 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h2><pre><code>给定一个数组 candidates 和一个目标数 target ，找出 candidates 中所有可以使数字和为 target 的组合。candidates 中的每个数字在每个组合中只能使用一次。</code></pre><h3 id="说明："><a href="#说明：" class="headerlink" title="说明："></a>说明：</h3><pre><code>所有数字（包括目标数）都是正整数。解集不能包含重复的组合。 </code></pre><h3 id="示例-1"><a href="#示例-1" class="headerlink" title="示例 1:"></a>示例 1:</h3><p>输入: candidates &#x3D; [10,1,2,7,6,1,5], target &#x3D; 8,<br>    所求解集为:<br>    [<br>    [1, 7],<br>    [1, 2, 5],<br>    [2, 6],<br>    [1, 1, 6]<br>    ]</p><h3 id="示例-2"><a href="#示例-2" class="headerlink" title="示例 2:"></a>示例 2:</h3><pre><code>输入: candidates = [2,5,2,1,2], target = 5,所求解集为:[  [1,2,2],  [5]]</code></pre><h2 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h2><h3 id="思路1-DFS-剪枝"><a href="#思路1-DFS-剪枝" class="headerlink" title="思路1: DFS+剪枝"></a>思路1: DFS+剪枝</h3><p>与lc39类似，但是每个数只能出现一次，所以节点数量为当前位置+1到最后位置，同时，要避免同一层相同元素，避免出现重复结果（因为会选到），所以可以通过剪枝去除</p><h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><h3 id="代码1"><a href="#代码1" class="headerlink" title="代码1"></a>代码1</h3><pre class=" language-Java"><code class="language-Java">class Solution &#123;    List<List<Integer>> results;    public List<List<Integer>> combinationSum2(int[] candidates, int target) &#123;        results = new ArrayList<>();        if (candidates == null || candidates.length == 0)&#123;            return results;        &#125;        Arrays.sort(candidates);        List<Integer> result = new ArrayList<Integer>();        dfs(candidates, target, 0, result);        return results;    &#125;    private void dfs(int[] candidates, int target, int idx, List<Integer> result)&#123;        if (target == 0)&#123;            this.results.add(new ArrayList<>(result));        &#125;                for(int i = idx; i < candidates.length; i++)&#123;            if (target < 0)&#123;                break;            &#125;            if (i > idx && candidates[i] == candidates[i - 1])&#123;                continue;            &#125;            result.add(candidates[i]);            dfs(candidates, target - candidates[i], i + 1, result);            result.remove(result.size() - 1);        &#125;    &#125;&#125;</code></pre><h2 id="复杂度分析"><a href="#复杂度分析" class="headerlink" title="复杂度分析"></a>复杂度分析</h2><h3 id="思路1时间复杂度"><a href="#思路1时间复杂度" class="headerlink" title="思路1时间复杂度"></a>思路1时间复杂度</h3><p>$O(n!)$</p><h3 id="思路1空间复杂度"><a href="#思路1空间复杂度" class="headerlink" title="思路1空间复杂度"></a>思路1空间复杂度</h3><p>$O(n!)$</p>]]></content>
      
      
      <categories>
          
          <category> Leetcode </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Leetcode </tag>
            
            <tag> Medium </tag>
            
            <tag> 回溯 </tag>
            
            <tag> 剪枝 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Leetcode:39. 组合总和</title>
      <link href="/2020/06/07/leetcode-39-zu-he-zong-he/"/>
      <url>/2020/06/07/leetcode-39-zu-he-zong-he/</url>
      
        <content type="html"><![CDATA[<h1 id="Leetcode-Leetcode-39-组合总和"><a href="#Leetcode-Leetcode-39-组合总和" class="headerlink" title="[Leetcode](Leetcode: 39. 组合总和)"></a>[Leetcode](Leetcode: 39. 组合总和)</h1><h2 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h2><pre><code>给定一个无重复元素的数组 candidates 和一个目标数 target ，找出 candidates 中所有可以使数字和为 target 的组合。candidates 中的数字可以无限制重复被选取。</code></pre><h3 id="说明："><a href="#说明：" class="headerlink" title="说明："></a>说明：</h3><pre><code>所有数字（包括 target）都是正整数。解集不能包含重复的组合。 </code></pre><h3 id="示例-1"><a href="#示例-1" class="headerlink" title="示例 1:"></a>示例 1:</h3><pre><code>输入: candidates = [2,3,6,7], target = 7,所求解集为:[[7],[2,2,3]]</code></pre><h3 id="示例-2"><a href="#示例-2" class="headerlink" title="示例 2:"></a>示例 2:</h3><pre><code>输入: candidates = [2,3,5], target = 8,所求解集为:[  [2,2,2,2],  [2,3,3],  [3,5]]</code></pre><h2 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h2><h3 id="思路1-回溯"><a href="#思路1-回溯" class="headerlink" title="思路1 回溯"></a>思路1 回溯</h3><p>将题目看成回溯，每次可以从排序后的候选中选择一个数字，如最后满足条件则加入结果中。同时也可以看作是DFS过程，每个节点有从当前值到最后值的叶子<br>节点，然后DFS实现，其实也可以BFS</p><h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><h3 id="代码1"><a href="#代码1" class="headerlink" title="代码1"></a>代码1</h3><pre class=" language-Java"><code class="language-Java">class Solution &#123;    List<List<Integer>> results;    public List<List<Integer>> combinationSum(int[] candidates, int target) &#123;        results = new ArrayList<>();        if(candidates == null || candidates.length == 0)&#123;            return results;        &#125;        Arrays.sort(candidates);        List<Integer> result = new ArrayList<>();        trackback(candidates, 0, target, result);        return results;    &#125;    private void trackback(int[] candidates, int idx, int target, List<Integer> result)&#123;        if (target == 0)&#123;            this.results.add(new ArrayList<>(result));        &#125;        for(int i = idx; i < candidates.length; i++)&#123;            if (candidates[i] > target)&#123;                break;            &#125;            result.add(candidates[i]);            trackback(candidates, i, target - candidates[i], result);            result.remove(result.size() - 1);        &#125;    &#125;&#125;</code></pre><h2 id="复杂度分析"><a href="#复杂度分析" class="headerlink" title="复杂度分析"></a>复杂度分析</h2><h3 id="思路1时间复杂度"><a href="#思路1时间复杂度" class="headerlink" title="思路1时间复杂度"></a>思路1时间复杂度</h3><p>$n!$</p><h3 id="思路1空间复杂度"><a href="#思路1空间复杂度" class="headerlink" title="思路1空间复杂度"></a>思路1空间复杂度</h3><p>$n!$</p>]]></content>
      
      
      <categories>
          
          <category> Leetcode </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Leetcode </tag>
            
            <tag> Medium </tag>
            
            <tag> 回溯 </tag>
            
            <tag> DFS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Leetcode:37. 解数独</title>
      <link href="/2020/06/06/leetcode-37-jie-shu-du/"/>
      <url>/2020/06/06/leetcode-37-jie-shu-du/</url>
      
        <content type="html"><![CDATA[<h1 id="Leetcode-37-解数独"><a href="#Leetcode-37-解数独" class="headerlink" title="Leetcode: 37.解数独"></a><a href="https://leetcode-cn.com/problems/sudoku-solver/">Leetcode: 37.解数独</a></h1><h2 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h2><pre><code>编写一个程序，通过已填充的空格来解决数独问题。一个数独的解法需遵循如下规则：数字 1-9 在每一行只能出现一次。数字 1-9 在每一列只能出现一次。数字 1-9 在每一个以粗实线分隔的 3x3 宫内只能出现一次。空白格用 &#39;.&#39; 表示。一个数独。答案被标成红色。</code></pre><h3 id="Note"><a href="#Note" class="headerlink" title="Note:"></a>Note:</h3><pre><code>给定的数独序列只包含数字 1-9 和字符 &#39;.&#39; 。你可以假设给定的数独只有唯一解。给定数独永远是 9x9 形式的。</code></pre><h2 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h2><h3 id="思路1"><a href="#思路1" class="headerlink" title="思路1"></a>思路1</h3><p>使用回溯法，利用受行、列、3*3矩阵约束，进行回溯</p><h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><h3 id="代码1"><a href="#代码1" class="headerlink" title="代码1"></a>代码1</h3><pre class=" language-Java"><code class="language-Java">class Solution &#123;    char[][] board;    int[][] rowCount = new int[9][9];    int[][] columnCount = new int[9][9];    int[][] matrixCount = new int[9][9];    boolean canSolve = false;    private boolean canSet(int row, int column, int num)&#123;        int matrixIndex = (row / 3) * 3 + column / 3;        return rowCount[row][num - 1] == 0 && columnCount[column][num - 1] == 0 && matrixCount[matrixIndex][num - 1] == 0;    &#125;    private void setNum(int row, int column, int num)&#123;        int matrixIndex = (row / 3) * 3 + column / 3;        rowCount[row][num - 1] += 1;        columnCount[column][num - 1] += 1;        matrixCount[matrixIndex][num - 1] += 1;        board[row][column] = (char)('0' + num);    &#125;    private void removeNum(int row, int column, int num)&#123;        int matrixIndex = (row / 3) * 3 + column / 3;        rowCount[row][num - 1] -= 1;        columnCount[column][num - 1] -= 1;        matrixCount[matrixIndex][num - 1] -= 1;        board[row][column] = '.';    &#125;    private void setNext(int row, int column)&#123;        if (row == 8 && column == 8)&#123;            this.canSolve = true;        &#125;        if (column != 8)&#123;            backTrack(row, column + 1);        &#125;else&#123;            backTrack(row + 1, 0);        &#125;    &#125;    private void backTrack(int row, int column)&#123;        if (row > 8 || column > 8)&#123;            return;        &#125;        if (this.board[row][column] == '.')&#123;            for(int i = 1; i < 10; i++)&#123;                if (canSet(row, column, i))&#123;                    setNum(row, column, i);                    setNext(row, column);                    if (!this.canSolve)&#123;                        removeNum(row, column, i);                    &#125;                &#125;            &#125;        &#125;else&#123;            setNext(row, column);        &#125;    &#125;    public void solveSudoku(char[][] board) &#123;        this.board = board;        for(int i = 0; i < 9; i++)&#123;            for(int j=0; j < 9; j++)&#123;                if (this.board[i][j] != '.')&#123;                    int num = (int)(this.board[i][j] - '0');                    setNum(i, j, num);                &#125;            &#125;        &#125;        backTrack(0, 0);    &#125;&#125;</code></pre><h2 id="复杂度分析"><a href="#复杂度分析" class="headerlink" title="复杂度分析"></a>复杂度分析</h2><h3 id="思路1时间复杂度"><a href="#思路1时间复杂度" class="headerlink" title="思路1时间复杂度"></a>思路1时间复杂度</h3><p>$(n!)^9$</p><h3 id="思路1空间复杂度"><a href="#思路1空间复杂度" class="headerlink" title="思路1空间复杂度"></a>思路1空间复杂度</h3><p>$n^2$</p>]]></content>
      
      
      <categories>
          
          <category> Leetcode </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Leetcode </tag>
            
            <tag> Hard </tag>
            
            <tag> 回溯 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Leetcode:146. LRU缓存机制</title>
      <link href="/2020/05/14/leetcode-146-lru-huan-cun-ji-zhi/"/>
      <url>/2020/05/14/leetcode-146-lru-huan-cun-ji-zhi/</url>
      
        <content type="html"><![CDATA[<h1 id="Leetcode-146-LRU缓存机制"><a href="#Leetcode-146-LRU缓存机制" class="headerlink" title="Leetcode:146. LRU缓存机制"></a><a href="https://leetcode-cn.com/problems/lru-cache/">Leetcode:146. LRU缓存机制</a></h1><h2 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h2><p>运用你所掌握的数据结构，设计和实现一个  LRU (最近最少使用) 缓存机制。它应该支持以下操作： 获取数据 get 和 写入数据 put 。</p><p>获取数据 get(key) - 如果密钥 (key) 存在于缓存中，则获取密钥的值（总是正数），否则返回 -1。<br>写入数据 put(key, value) - 如果密钥已经存在，则变更其数据值；如果密钥不存在，则插入该组「密钥&#x2F;数据值」。当缓存容量达到上限时，它应该在写入新数据之前删除最久未使用的数据值，从而为新的数据值留出空间。</p><p> </p><p>进阶:</p><p>你是否可以在 O(1) 时间复杂度内完成这两种操作？</p><p> </p><p>示例:</p><p>LRUCache cache &#x3D; new LRUCache( 2 &#x2F;* 缓存容量 *&#x2F; );</p><p>cache.put(1, 1);<br>cache.put(2, 2);<br>cache.get(1);       &#x2F;&#x2F; 返回  1<br>cache.put(3, 3);    &#x2F;&#x2F; 该操作会使得密钥 2 作废<br>cache.get(2);       &#x2F;&#x2F; 返回 -1 (未找到)<br>cache.put(4, 4);    &#x2F;&#x2F; 该操作会使得密钥 1 作废<br>cache.get(1);       &#x2F;&#x2F; 返回 -1 (未找到)<br>cache.get(3);       &#x2F;&#x2F; 返回  3<br>cache.get(4);       &#x2F;&#x2F; 返回  4</p><h2 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h2><h3 id="思路1-HashMap-双向链表"><a href="#思路1-HashMap-双向链表" class="headerlink" title="思路1 HashMap + 双向链表"></a>思路1 HashMap + 双向链表</h3><p>因为要满足存取都是O(1)复杂度，且有容量限制（所以重点在于如何删除以及置于最前），所以可以使用一个HashMap和双向链表实现</p><h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><h3 id="代码1"><a href="#代码1" class="headerlink" title="代码1"></a>代码1</h3><pre class=" language-Java"><code class="language-Java">import java.util.Hashtable;class LRUCache &#123;    class DNode&#123;        int key;        int value;        DNode pre;        DNode next;    &#125;        private void addNode(DNode node)&#123;        node.pre = head;        node.next = head.next;        head.next.pre = node;        head.next = node;    &#125;        private void removeNode(DNode node)&#123;        DNode pre = node.pre;        DNode next = node.next;                pre.next = next;        next.pre = pre;    &#125;        private void toHead(DNode node)&#123;        removeNode(node);        addNode(node);    &#125;        private DNode removeTail()&#123;        DNode pre = tail.pre;        removeNode(pre);        return pre;    &#125;        private DNode head, tail;    private HashMap<Integer, DNode> cache =          new HashMap<Integer, DNode>();    int maxSize;    int size;        public LRUCache(int capacity) &#123;        this.maxSize = capacity;        this.size = 0;        this.head = new DNode();        this.tail = new DNode();        this.head.next = tail;        this.tail.pre = head;    &#125;        public int get(int key) &#123;        DNode node = cache.get(key);        if (node == null)&#123;            return -1;        &#125;else&#123;            toHead(node);            return node.value;        &#125;    &#125;        public void put(int key, int value) &#123;        DNode pre = cache.get(key);        if (pre == null)&#123;            pre = new DNode();            pre.key = key;            pre.value = value;            this.size += 1;            if (this.size > this.maxSize)&#123;                DNode removeNode = removeTail();                cache.remove(removeNode.key);                this.size = this.maxSize;            &#125;            addNode(pre);            cache.put(key, pre);        &#125;else&#123;            pre.value = value;            toHead(pre);        &#125;    &#125;&#125;</code></pre><h2 id="复杂度分析"><a href="#复杂度分析" class="headerlink" title="复杂度分析"></a>复杂度分析</h2><h3 id="思路1时间复杂度"><a href="#思路1时间复杂度" class="headerlink" title="思路1时间复杂度"></a>思路1时间复杂度</h3><p>$O(1)$</p><h3 id="思路1空间复杂度"><a href="#思路1空间复杂度" class="headerlink" title="思路1空间复杂度"></a>思路1空间复杂度</h3><p>$O(1)$</p>]]></content>
      
      
      <categories>
          
          <category> Leetcode </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Leetcode </tag>
            
            <tag> Medium </tag>
            
            <tag> 系统设计 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Leetcode:134. 加油站</title>
      <link href="/2020/05/13/leetcode-134-jia-you-zhan/"/>
      <url>/2020/05/13/leetcode-134-jia-you-zhan/</url>
      
        <content type="html"><![CDATA[<h1 id="Leetcode-134-加油站"><a href="#Leetcode-134-加油站" class="headerlink" title="[Leetcode: 134. 加油站]"></a>[Leetcode: 134. 加油站]</h1><h2 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h2><pre><code>在一条环路上有 N 个加油站，其中第 i 个加油站有汽油 gas[i] 升。你有一辆油箱容量无限的的汽车，从第 i 个加油站开往第 i+1 个加油站需要消耗汽油 cost[i] 升。你从其中的一个加油站出发，开始时油箱为空。如果你可以绕环路行驶一周，则返回出发时加油站的编号，否则返回 -1。</code></pre><h3 id="说明"><a href="#说明" class="headerlink" title="说明:"></a>说明:</h3><pre><code>如果题目有解，该答案即为唯一答案。输入数组均为非空数组，且长度相同。输入数组中的元素均为非负数。</code></pre><h3 id="示例-1"><a href="#示例-1" class="headerlink" title="示例 1:"></a>示例 1:</h3><pre><code>输入: gas  = [1,2,3,4,5]cost = [3,4,5,1,2]输出: 3解释:从 3 号加油站(索引为 3 处)出发，可获得 4 升汽油。此时油箱有 = 0 + 4 = 4 升汽油开往 4 号加油站，此时油箱有 4 - 1 + 5 = 8 升汽油开往 0 号加油站，此时油箱有 8 - 2 + 1 = 7 升汽油开往 1 号加油站，此时油箱有 7 - 3 + 2 = 6 升汽油开往 2 号加油站，此时油箱有 6 - 4 + 3 = 5 升汽油开往 3 号加油站，你需要消耗 5 升汽油，正好足够你返回到 3 号加油站。因此，3 可为起始索引。</code></pre><h3 id="示例-2"><a href="#示例-2" class="headerlink" title="示例 2:"></a>示例 2:</h3><pre><code>输入: gas  = [2,3,4]cost = [3,4,3]输出: -1解释:你不能从 0 号或 1 号加油站出发，因为没有足够的汽油可以让你行驶到下一个加油站。我们从 2 号加油站出发，可以获得 4 升汽油。 此时油箱有 = 0 + 4 = 4 升汽油开往 0 号加油站，此时油箱有 4 - 3 + 2 = 3 升汽油开往 1 号加油站，此时油箱有 3 - 3 + 3 = 3 升汽油你无法返回 2 号加油站，因为返程需要消耗 4 升汽油，但是你的油箱只有 3 升汽油。因此，无论怎样，你都不可能绕环路行驶一周。</code></pre><h2 id="思路"><a href="#思路" class="headerlink" title="[思路]"></a>[思路]</h2><h3 id="思路1-暴力判断每个位置是否可以作为起点"><a href="#思路1-暴力判断每个位置是否可以作为起点" class="headerlink" title="思路1 暴力判断每个位置是否可以作为起点"></a>思路1 暴力判断每个位置是否可以作为起点</h3><p>直接判断每个位置是否可以作为起点</p><h3 id="思路2-利用当前油量和总油量记录状态"><a href="#思路2-利用当前油量和总油量记录状态" class="headerlink" title="思路2 利用当前油量和总油量记录状态"></a>思路2 利用当前油量和总油量记录状态</h3><p>使用cur_gas和gas_sum记录当前油量和总油量，当当前油量小于零时则该位置不可作为起点，且之前节点也不行，依次类推，详情见代码</p><h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><h3 id="代码1"><a href="#代码1" class="headerlink" title="代码1"></a>代码1</h3><pre class=" language-Java"><code class="language-Java">class Solution &#123;    public int canCompleteCircuit(int[] gas, int[] cost) &#123;        if (gas == null || gas.length == 0 || cost == null || cost.length == 0 || gas.length != cost.length)&#123;            return -1;        &#125;        int length = gas.length;        Set<Integer> notZeroSet = new HashSet<>();        for(int i = 0; i < gas.length; i++)&#123;            gas[i] = gas[i] - cost[i];            if (gas[i] >= 0)&#123;                notZeroSet.add(i);            &#125;        &#125;        for(int num: notZeroSet)&#123;            if (canLoop(num, gas, length))&#123;                return num;            &#125;        &#125;        return -1;    &#125;        private boolean canLoop(int num, int[] lefts, int length)&#123;        int left = lefts[num];        for(int i = 1; i < length; i++)&#123;            left = left + lefts[(i + num) % length];            if (left < 0)&#123;                return false;            &#125;        &#125;        return true;    &#125;&#125;</code></pre><h3 id="代码2"><a href="#代码2" class="headerlink" title="代码2"></a>代码2</h3><pre class=" language-Java"><code class="language-Java">class Solution &#123;    public int canCompleteCircuit(int[] gas, int[] cost) &#123;        if (gas == null || gas.length == 0 || cost == null || cost.length == 0 || gas.length != cost.length)&#123;            return -1;        &#125;                        int cur_gas = 0;        int gas_sum = 0;        int result = 0;        for(int i = 0; i < gas.length; i ++)&#123;            cur_gas += gas[i] - cost[i];            gas_sum += gas[i] - cost[i];            if (cur_gas < 0)&#123;                result = i + 1;                cur_gas = 0;            &#125;        &#125;        return gas_sum >= 0 ? result : -1;    &#125;&#125;</code></pre><h3 id="复杂度分析"><a href="#复杂度分析" class="headerlink" title="复杂度分析"></a>复杂度分析</h3><h3 id="思路1时间复杂度"><a href="#思路1时间复杂度" class="headerlink" title="思路1时间复杂度"></a>思路1时间复杂度</h3><p>$O(n^2)$</p><h3 id="思路1空间复杂度"><a href="#思路1空间复杂度" class="headerlink" title="思路1空间复杂度"></a>思路1空间复杂度</h3><p>$O(1)$</p><h3 id="思路2时间复杂度"><a href="#思路2时间复杂度" class="headerlink" title="思路2时间复杂度"></a>思路2时间复杂度</h3>]]></content>
      
      
      <categories>
          
          <category> Leetcode </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Leetcode </tag>
            
            <tag> Medium </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Leetcode:371. 两整数之和</title>
      <link href="/2020/05/08/leetcode-371-liang-zheng-shu-zhi-he/"/>
      <url>/2020/05/08/leetcode-371-liang-zheng-shu-zhi-he/</url>
      
        <content type="html"><![CDATA[<h1 id="Leetcode-371-两整数之和"><a href="#Leetcode-371-两整数之和" class="headerlink" title="[Leetcode: 371. 两整数之和]"></a>[Leetcode: 371. 两整数之和]</h1><h2 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h2><pre><code>不使用运算符 + 和 - ​​​​​​​，计算两整数 ​​​​​​​a 、b ​​​​​​​之和。</code></pre><h3 id="示例-1"><a href="#示例-1" class="headerlink" title="示例 1:"></a>示例 1:</h3><pre><code>输入: a = 1, b = 2输出: 3</code></pre><h3 id="示例-2"><a href="#示例-2" class="headerlink" title="示例 2:"></a>示例 2:</h3><pre><code>输入: a = -2, b = 3输出: 1</code></pre><h2 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h2><h3 id="思路1-位操作"><a href="#思路1-位操作" class="headerlink" title="思路1 位操作"></a>思路1 位操作</h3><p>异或操作视作低位相加，与右移操作视作进位</p><h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><h3 id="代码1"><a href="#代码1" class="headerlink" title="代码1"></a>代码1</h3><pre class=" language-Java"><code class="language-Java">class Solution &#123;    public int getSum(int a, int b) &#123;        int addNum = 0;        int superNum = 0;        while (b != 0)&#123;            addNum = a ^ b;            superNum = a & b << 1;            a = addNum;            b = superNum;        &#125;        return a;    &#125;&#125;</code></pre><h2 id="复杂度分析"><a href="#复杂度分析" class="headerlink" title="复杂度分析"></a>复杂度分析</h2><h3 id="思路1时间复杂度"><a href="#思路1时间复杂度" class="headerlink" title="思路1时间复杂度"></a>思路1时间复杂度</h3><p>$O(logn)$</p><h3 id="思路1空间复杂度"><a href="#思路1空间复杂度" class="headerlink" title="思路1空间复杂度"></a>思路1空间复杂度</h3><p>$O(1)$</p>]]></content>
      
      
      <categories>
          
          <category> Leetcode </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Leetcode </tag>
            
            <tag> Easy </tag>
            
            <tag> 位运算 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Leetcode:202. 快乐数</title>
      <link href="/2020/05/07/leetcode-202-kuai-le-shu/"/>
      <url>/2020/05/07/leetcode-202-kuai-le-shu/</url>
      
        <content type="html"><![CDATA[<h1 id="Leetcode-202-快乐数"><a href="#Leetcode-202-快乐数" class="headerlink" title="Leetcode:202. 快乐数"></a><a href="https://leetcode-cn.com/problems/happy-number/">Leetcode:202. 快乐数</a></h1><h2 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h2><pre><code>编写一个算法来判断一个数 n 是不是快乐数。「快乐数」定义为：对于一个正整数，每一次将该数替换为它每个位置上的数字的平方和，然后重复这个过程直到这个数变为 1，也可能是 无限循环 但始终变不到 1。如果 可以变为  1，那么这个数就是快乐数。如果 n 是快乐数就返回 True ；不是，则返回 False 。</code></pre><h3 id="示例："><a href="#示例：" class="headerlink" title="示例："></a>示例：</h3><pre><code>输入：19输出：true解释：12 + 92 = 8282 + 22 = 6862 + 82 = 10012 + 02 + 02 = 1</code></pre><h2 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h2><h3 id="思路1-递推-哈希表记录"><a href="#思路1-递推-哈希表记录" class="headerlink" title="思路1 递推+哈希表记录"></a>思路1 递推+哈希表记录</h3><p>使用一个哈希表依次记录10进制各个位的平方和，最后判断最后输入的值是否为1</p><h3 id="思路2-递推-快慢指针"><a href="#思路2-递推-快慢指针" class="headerlink" title="思路2 递推+快慢指针"></a>思路2 递推+快慢指针</h3><p>递推下一个数是一样的，可以通过快慢指针的方式判断是否是快乐数</p><h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><h3 id="代码1"><a href="#代码1" class="headerlink" title="代码1"></a>代码1</h3><pre class=" language-Java"><code class="language-Java">class Solution &#123;    public boolean isHappy(int n) &#123;        if (n <= 0)&#123;            return false;        &#125;        Set<Integer> intSet = new HashSet<Integer>();        while (n != 1 && !intSet.contains(n))&#123;            intSet.add(n);            n = getHappy(n);        &#125;        return n == 1;    &#125;        private int getHappy(int n)&#123;        int result = 0;        int tempNum = 0;        while (n != 0)&#123;            tempNum = n % 10;            result += tempNum * tempNum;            n /= 10;        &#125;        return result;    &#125;&#125;</code></pre><h3 id="代码2"><a href="#代码2" class="headerlink" title="代码2"></a>代码2</h3><pre class=" language-Java"><code class="language-Java">class Solution &#123;    public boolean isHappy(int n) &#123;        if (n <= 0)&#123;            return false;        &#125;        int fast = getHappy(n);        int slow = n;        while (fast != 1 && slow != fast)&#123;            fast = getHappy(getHappy(fast));            slow = getHappy(slow);        &#125;        return fast == 1;    &#125;        private int getHappy(int n)&#123;        int result = 0;        int tempNum = 0;        while (n != 0)&#123;            tempNum = n % 10;            result += tempNum * tempNum;            n /= 10;        &#125;        return result;    &#125;&#125;</code></pre><h2 id="复杂度分析"><a href="#复杂度分析" class="headerlink" title="复杂度分析"></a>复杂度分析</h2><h3 id="思路1时间复杂度"><a href="#思路1时间复杂度" class="headerlink" title="思路1时间复杂度"></a>思路1时间复杂度</h3><p>$O(logn)$</p><h3 id="思路1空间复杂度"><a href="#思路1空间复杂度" class="headerlink" title="思路1空间复杂度"></a>思路1空间复杂度</h3><p>$O(logn)$</p><h3 id="思路2时间复杂度"><a href="#思路2时间复杂度" class="headerlink" title="思路2时间复杂度"></a>思路2时间复杂度</h3><p>$O(logn)$</p><h3 id="思路2空间复杂度"><a href="#思路2空间复杂度" class="headerlink" title="思路2空间复杂度"></a>思路2空间复杂度</h3><p>$O(1)$</p>]]></content>
      
      
      <categories>
          
          <category> Leetcode </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Leetcode </tag>
            
            <tag> 哈希表 </tag>
            
            <tag> Easy </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Leetcode:326. 3的幂</title>
      <link href="/2020/05/07/leetcode-326-3-de-mi/"/>
      <url>/2020/05/07/leetcode-326-3-de-mi/</url>
      
        <content type="html"><![CDATA[<h1 id="Leetcode-326-3的幂"><a href="#Leetcode-326-3的幂" class="headerlink" title="Leetcode:326. 3的幂"></a><a href="https://leetcode-cn.com/problems/power-of-three/">Leetcode:326. 3的幂</a></h1><h2 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h2><pre><code>给定一个整数，写一个函数来判断它是否是 3 的幂次方。</code></pre><h3 id="示例-1"><a href="#示例-1" class="headerlink" title="示例 1:"></a>示例 1:</h3><pre><code>输入: 27输出: true</code></pre><h3 id="示例-2"><a href="#示例-2" class="headerlink" title="示例 2:"></a>示例 2:</h3><pre><code>输入: 0输出: false</code></pre><h3 id="示例-3"><a href="#示例-3" class="headerlink" title="示例 3:"></a>示例 3:</h3><pre><code>输入: 9输出: true</code></pre><h3 id="示例-4"><a href="#示例-4" class="headerlink" title="示例 4:"></a>示例 4:</h3><pre><code>输入: 45输出: false</code></pre><h3 id="进阶："><a href="#进阶：" class="headerlink" title="进阶："></a>进阶：</h3><pre><code>你能不使用循环或者递归来完成本题吗？</code></pre><h2 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h2><h3 id="思路1-直接循环取模"><a href="#思路1-直接循环取模" class="headerlink" title="思路1 直接循环取模"></a>思路1 直接循环取模</h3><p>如果模3为0,则除以3，最后判断数是否为1</p><h3 id="思路2-转换为3为基底，然后匹配字符串以1开头"><a href="#思路2-转换为3为基底，然后匹配字符串以1开头" class="headerlink" title="思路2 转换为3为基底，然后匹配字符串以1开头"></a>思路2 转换为3为基底，然后匹配字符串以1开头</h3><p>使用Java基底转换函数，然后字符串匹配是否以1为开头</p><h3 id="思路3-使用以3为基底的最大整数对n取余"><a href="#思路3-使用以3为基底的最大整数对n取余" class="headerlink" title="思路3 使用以3为基底的最大整数对n取余"></a>思路3 使用以3为基底的最大整数对n取余</h3><p>若余数为零则n是以3为底</p><h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><h3 id="代码1"><a href="#代码1" class="headerlink" title="代码1"></a>代码1</h3><pre class=" language-Java"><code class="language-Java">class Solution &#123;    public boolean isPowerOfThree(int n) &#123;        if (n < 1)&#123;            return false;        &#125;        while (n % 3 == 0 && n != 0)&#123;            n /= 3;        &#125;        return n == 1;    &#125;&#125;</code></pre><h3 id="代码2"><a href="#代码2" class="headerlink" title="代码2"></a>代码2</h3><pre class=" language-Java"><code class="language-Java">class Solution &#123;    public boolean isPowerOfThree(int n) &#123;        if (n < 1)&#123;            return false;        &#125;        return Integer.toString(n, 3).matches("^10*$");    &#125;&#125;</code></pre><h3 id="代码3"><a href="#代码3" class="headerlink" title="代码3"></a>代码3</h3><pre class=" language-Java"><code class="language-Java">class Solution &#123;    public boolean isPowerOfThree(int n) &#123;        if (n < 1)&#123;            return false;        &#125;        return n > 0 && 1162261467 % n == 0;    &#125;&#125;</code></pre><h2 id="复杂度分析"><a href="#复杂度分析" class="headerlink" title="复杂度分析"></a>复杂度分析</h2><h3 id="思路1时间复杂度"><a href="#思路1时间复杂度" class="headerlink" title="思路1时间复杂度"></a>思路1时间复杂度</h3><p>$O(logn)$</p><h3 id="思路1空间复杂度"><a href="#思路1空间复杂度" class="headerlink" title="思路1空间复杂度"></a>思路1空间复杂度</h3><p>$O(1)$</p><h3 id="思路2时间复杂度"><a href="#思路2时间复杂度" class="headerlink" title="思路2时间复杂度"></a>思路2时间复杂度</h3><p>$O(logn)$</p><h3 id="思路2空间复杂度"><a href="#思路2空间复杂度" class="headerlink" title="思路2空间复杂度"></a>思路2空间复杂度</h3><p>$O(1)$</p><h3 id="思路3时间复杂度"><a href="#思路3时间复杂度" class="headerlink" title="思路3时间复杂度"></a>思路3时间复杂度</h3><p>$O(1)$</p><h3 id="思路3空间复杂度"><a href="#思路3空间复杂度" class="headerlink" title="思路3空间复杂度"></a>思路3空间复杂度</h3><p>$O(1)$</p>]]></content>
      
      
      <categories>
          
          <category> Leetcode </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Leetcode </tag>
            
            <tag> Easy </tag>
            
            <tag> 数计算 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Leetcode:268. 缺失数字</title>
      <link href="/2020/05/06/leetcode-268-que-shi-shu-zi/"/>
      <url>/2020/05/06/leetcode-268-que-shi-shu-zi/</url>
      
        <content type="html"><![CDATA[<h1 id="Leetcode-268-缺失数字"><a href="#Leetcode-268-缺失数字" class="headerlink" title="Leetcode:268. 缺失数字"></a><a href="https://leetcode-cn.com/problems/missing-number/">Leetcode:268. 缺失数字</a></h1><h2 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h2><pre><code>给定一个包含 0, 1, 2, ..., n 中 n 个数的序列，找出 0 .. n 中没有出现在序列中的那个数。</code></pre><h3 id="示例-1"><a href="#示例-1" class="headerlink" title="示例 1:"></a>示例 1:</h3><pre><code>输入: [3,0,1]输出: 2</code></pre><h3 id="示例-2"><a href="#示例-2" class="headerlink" title="示例 2:"></a>示例 2:</h3><pre><code>输入: [9,6,4,2,3,5,7,0,1]输出: 8</code></pre><h3 id="说明"><a href="#说明" class="headerlink" title="说明:"></a>说明:</h3><p>你的算法应具有线性时间复杂度。你能否仅使用额外常数空间来实现?</p><h2 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h2><h3 id="思路1：求和依次相减"><a href="#思路1：求和依次相减" class="headerlink" title="思路1：求和依次相减"></a>思路1：求和依次相减</h3><p>从0到n的和是固定的，依次减去数组中的每个数即可</p><h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><h3 id="代码1"><a href="#代码1" class="headerlink" title="代码1"></a>代码1</h3><pre class=" language-Java"><code class="language-Java">class Solution &#123;    public int missingNumber(int[] nums) &#123;        if (nums == null || nums.length == 0)&#123;            return 0;        &#125;        int n = nums.length;        int result = n * (n + 1) / 2;        for(int num: nums)&#123;            result -= num;        &#125;        return result;    &#125;&#125;</code></pre><h2 id="复杂度分析"><a href="#复杂度分析" class="headerlink" title="复杂度分析"></a>复杂度分析</h2><h3 id="思路1时间复杂度"><a href="#思路1时间复杂度" class="headerlink" title="思路1时间复杂度"></a>思路1时间复杂度</h3><p>$O(n)$</p><h3 id="思路1空间复杂度"><a href="#思路1空间复杂度" class="headerlink" title="思路1空间复杂度"></a>思路1空间复杂度</h3><p>$O(1)$</p>]]></content>
      
      
      <categories>
          
          <category> Leetcode </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Leetcode </tag>
            
            <tag> Easy </tag>
            
            <tag> 数计算 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Leetcode:190. 颠倒二进制位</title>
      <link href="/2020/05/05/leetcode-190-dian-dao-er-jin-zhi-wei/"/>
      <url>/2020/05/05/leetcode-190-dian-dao-er-jin-zhi-wei/</url>
      
        <content type="html"><![CDATA[<h1 id="Leetcode-190-颠倒二进制位"><a href="#Leetcode-190-颠倒二进制位" class="headerlink" title="Leetcode:190. 颠倒二进制位"></a><a href="https://leetcode-cn.com/problems/reverse-bits/">Leetcode:190. 颠倒二进制位</a></h1><h2 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h2><pre><code>颠倒给定的 32 位无符号整数的二进制位。</code></pre><h3 id="示例-1："><a href="#示例-1：" class="headerlink" title="示例 1："></a>示例 1：</h3><pre><code>输入: 00000010100101000001111010011100输出: 00111001011110000010100101000000解释: 输入的二进制串 00000010100101000001111010011100 表示无符号整数 43261596，  因此返回 964176192，其二进制表示形式为 00111001011110000010100101000000。</code></pre><h3 id="示例-2："><a href="#示例-2：" class="headerlink" title="示例 2："></a>示例 2：</h3><pre><code>输入：11111111111111111111111111111101输出：10111111111111111111111111111111解释：输入的二进制串 11111111111111111111111111111101 表示无符号整数 4294967293，      因此返回 3221225471 其二进制表示形式为 10101111110010110010011101101001。</code></pre><h3 id="提示："><a href="#提示：" class="headerlink" title="提示："></a>提示：</h3><pre><code>请注意，在某些语言（如 Java）中，没有无符号整数类型。在这种情况下，输入和输出都将被指定为有符号整数类型，并且不应影响您的实现，因为无论整数是有符号的还是无符号的，其内部的二进制表示形式都是相同的。在 Java 中，编译器使用二进制补码记法来表示有符号整数。因此，在上面的 示例 2 中，输入表示有符号整数 -3，输出表示有符号整数 -1073741825。</code></pre><h3 id="进阶"><a href="#进阶" class="headerlink" title="进阶:"></a>进阶:</h3><pre><code>如果多次调用这个函数，你将如何优化你的算法？</code></pre><h2 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h2><h3 id="思路1"><a href="#思路1" class="headerlink" title="思路1"></a>思路1</h3><p>取特定位与移位迭代进行</p><h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><h3 id="代码1"><a href="#代码1" class="headerlink" title="代码1"></a>代码1</h3><pre class=" language-Java"><code class="language-Java">public class Solution &#123;    // you need treat n as an unsigned value    public int reverseBits(int n) &#123;        int result = 0;        int moveNum = 31;        while (n != 0)&#123;            result += (n & 1) << moveNum;            n = n >>> 1;            moveNum--;        &#125;        return result;    &#125;&#125;</code></pre><h2 id="复杂度分析"><a href="#复杂度分析" class="headerlink" title="复杂度分析"></a>复杂度分析</h2><h3 id="思路1时间复杂度"><a href="#思路1时间复杂度" class="headerlink" title="思路1时间复杂度"></a>思路1时间复杂度</h3><p>$O(1)$</p><h3 id="思路1空间复杂度"><a href="#思路1空间复杂度" class="headerlink" title="思路1空间复杂度"></a>思路1空间复杂度</h3><p>$O(1)$</p>]]></content>
      
      
      <categories>
          
          <category> Leetcode </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Leetcode </tag>
            
            <tag> Easy </tag>
            
            <tag> 数运算 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Leetcode:204. 计数质数</title>
      <link href="/2020/05/04/leetcode-204-ji-shu-zhi-shu/"/>
      <url>/2020/05/04/leetcode-204-ji-shu-zhi-shu/</url>
      
        <content type="html"><![CDATA[<h1 id="Leetcode-204-计数质数"><a href="#Leetcode-204-计数质数" class="headerlink" title="Leetcode:204. 计数质数"></a><a href="https://leetcode-cn.com/problems/count-primes/">Leetcode:204. 计数质数</a></h1><h2 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h2><pre><code>统计所有小于非负整数 n 的质数的数量。</code></pre><h3 id="示例"><a href="#示例" class="headerlink" title="示例:"></a>示例:</h3><pre><code>输入: 10输出: 4解释: 小于 10 的质数一共有 4 个, 它们是 2, 3, 5, 7 。</code></pre><h2 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h2><h3 id="思路1"><a href="#思路1" class="headerlink" title="思路1"></a>思路1</h3><p>统计从2开始到n的所有数进行非质数标记的方法计数</p><h3 id="思路2"><a href="#思路2" class="headerlink" title="思路2"></a>思路2</h3><p>在思路1的基础上优化迭代，使用$i<em>i$作为边界，因为质数筛法时大于$\sqrt{n}$会被筛选到，同时j设置为$i</em>i$,减少筛选次数</p><h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><h3 id="代码1"><a href="#代码1" class="headerlink" title="代码1"></a>代码1</h3><pre class=" language-Java"><code class="language-Java">class Solution &#123;    public int countPrimes(int n) &#123;        if (n == 0 || n == 1)&#123;            return 0;        &#125;        int result = n;        int[] dps = new int[n];        for(int i = 2; i < n; i++)&#123;            for(int j = 2; j*i < n; j++)&#123;                if (dps[i * j] == 1)&#123;                    continue;                &#125;                dps[i * j] = 1;                result -= 1;            &#125;        &#125;        return result - 2;    &#125;&#125;</code></pre><h3 id="代码2"><a href="#代码2" class="headerlink" title="代码2"></a>代码2</h3><pre class=" language-Java"><code class="language-Java">class Solution &#123;    public int countPrimes(int n) &#123;        if (n == 0 || n == 1)&#123;            return 0;        &#125;        int result = n;        int[] dps = new int[n];        for(int i = 2; i * i < n; i++)&#123;            for(int j = i * i; j < n; j += i)&#123;                if (dps[j] == 1)&#123;                    continue;                &#125;                dps[j] = 1;                result -= 1;            &#125;        &#125;        return result - 2;    &#125;&#125;</code></pre><h2 id="复杂度分析"><a href="#复杂度分析" class="headerlink" title="复杂度分析"></a>复杂度分析</h2><h3 id="思路1时间复杂度"><a href="#思路1时间复杂度" class="headerlink" title="思路1时间复杂度"></a>思路1时间复杂度</h3><p>$O(nloglogn)$?</p><h3 id="思路1空间复杂度"><a href="#思路1空间复杂度" class="headerlink" title="思路1空间复杂度"></a>思路1空间复杂度</h3><p>$O(n)$</p><h3 id="思路2时间复杂度"><a href="#思路2时间复杂度" class="headerlink" title="思路2时间复杂度"></a>思路2时间复杂度</h3><p>$O(nloglogn)$</p><h3 id="思路2空间复杂度"><a href="#思路2空间复杂度" class="headerlink" title="思路2空间复杂度"></a>思路2空间复杂度</h3><p>$O(n)$</p>]]></content>
      
      
      <categories>
          
          <category> Leetcode </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Leetcode </tag>
            
            <tag> Easy </tag>
            
            <tag> 数计算 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Leetcode:166. 分数到小数</title>
      <link href="/2020/05/04/leetcode-166-fen-shu-dao-xiao-shu/"/>
      <url>/2020/05/04/leetcode-166-fen-shu-dao-xiao-shu/</url>
      
        <content type="html"><![CDATA[<h1 id="Leetcode-166-分数到小数"><a href="#Leetcode-166-分数到小数" class="headerlink" title="Leetcode:166. 分数到小数"></a><a href="https://leetcode-cn.com/problems/fraction-to-recurring-decimal/">Leetcode:166. 分数到小数</a></h1><h2 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h2><pre><code>给定两个整数，分别表示分数的分子 numerator 和分母 denominator，以字符串形式返回小数。如果小数部分为循环小数，则将循环的部分括在括号内。</code></pre><h3 id="示例-1"><a href="#示例-1" class="headerlink" title="示例 1:"></a>示例 1:</h3><pre><code>输入: numerator = 1, denominator = 2输出: &quot;0.5&quot;</code></pre><h3 id="示例-2"><a href="#示例-2" class="headerlink" title="示例 2:"></a>示例 2:</h3><pre><code>输入: numerator = 2, denominator = 1输出: &quot;2&quot;</code></pre><h3 id="示例-3"><a href="#示例-3" class="headerlink" title="示例 3:"></a>示例 3:</h3><pre><code>输入: numerator = 2, denominator = 3输出: &quot;0.(6)&quot;</code></pre><h2 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h2><h3 id="思路1-长除法"><a href="#思路1-长除法" class="headerlink" title="思路1 长除法"></a>思路1 长除法</h3><p>当余数相等时会重复，需要注意的点是边界问题，正负极值，所以可以改为long类型</p><h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><h3 id="代码1"><a href="#代码1" class="headerlink" title="代码1"></a>代码1</h3><pre class=" language-Java"><code class="language-Java">class Solution &#123;    public String fractionToDecimal(int numerator, int denominator) &#123;        if (numerator == 0)&#123;            return "0";        &#125;        if (denominator == 0)&#123;            return "";        &#125;        StringBuilder sb = new StringBuilder();        long devideNum = Math.abs(Long.valueOf(numerator));        long devidedNum = Math.abs(Long.valueOf(denominator));        int negetiveNum = 0;        if (numerator < 0)&#123;            negetiveNum += 1;        &#125;        if (denominator < 0)&#123;            negetiveNum += 1;        &#125;        long remain = devideNum % devidedNum;        if (negetiveNum == 1)&#123;            sb.append("-");        &#125;        sb.append(String.valueOf(devideNum / devidedNum));        if (remain == 0)&#123;            return sb.toString();        &#125;        sb.append(".");        Map<Long, Integer> remainMap = new HashMap<>();        while (remain != 0)&#123;            if (remainMap.containsKey(remain))&#123;                sb.insert(remainMap.get(remain), "(");                sb.append(")");                break;            &#125;            remainMap.put(remain, sb.length());            remain *= 10;            sb.append(String.valueOf(remain / devidedNum));            remain = remain % devidedNum;        &#125;        return sb.toString();    &#125;&#125;</code></pre><h2 id="复杂度分析"><a href="#复杂度分析" class="headerlink" title="复杂度分析"></a>复杂度分析</h2><h3 id="思路1时间复杂度"><a href="#思路1时间复杂度" class="headerlink" title="思路1时间复杂度"></a>思路1时间复杂度</h3><p>非线性时间？（但整数有界）</p><h3 id="思路2空间复杂度"><a href="#思路2空间复杂度" class="headerlink" title="思路2空间复杂度"></a>思路2空间复杂度</h3><p>非线性时间？</p>]]></content>
      
      
      <categories>
          
          <category> Leetcode </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Leetcode </tag>
            
            <tag> Medium </tag>
            
            <tag> 数计算 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Leetcode:172. 阶乘后的零</title>
      <link href="/2020/05/03/leetcode-172-jie-cheng-hou-de-ling/"/>
      <url>/2020/05/03/leetcode-172-jie-cheng-hou-de-ling/</url>
      
        <content type="html"><![CDATA[<h1 id="Leetcode-172-阶乘后的零"><a href="#Leetcode-172-阶乘后的零" class="headerlink" title="Leetcode:172. 阶乘后的零"></a><a href="https://leetcode-cn.com/problems/factorial-trailing-zeroes/">Leetcode:172. 阶乘后的零</a></h1><h2 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h2><pre><code>给定一个整数 n，返回 n! 结果尾数中零的数量。</code></pre><h3 id="示例-1"><a href="#示例-1" class="headerlink" title="示例 1:"></a>示例 1:</h3><pre><code>输入: 3输出: 0解释: 3! = 6, 尾数中没有零。</code></pre><h3 id="示例-2"><a href="#示例-2" class="headerlink" title="示例 2:"></a>示例 2:</h3><pre><code>输入: 5输出: 1解释: 5! = 120, 尾数中有 1 个零.说明: 你算法的时间复杂度应为 O(log n) 。</code></pre><h2 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h2><h3 id="思路1：利用基本数学规则"><a href="#思路1：利用基本数学规则" class="headerlink" title="思路1：利用基本数学规则"></a>思路1：利用基本数学规则</h3><p>每含一个5为约数的数可以提供一个0，含25为约数可以提供两个0，以此类推</p><h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><h3 id="代码1"><a href="#代码1" class="headerlink" title="代码1"></a>代码1</h3><pre class=" language-Java"><code class="language-Java">class Solution &#123;    public int trailingZeroes(int n) &#123;        if (n < 0)&#123;            return -1;        &#125;        int result = 0;        while (n / 5 != 0)&#123;            result += n / 5;            n = n / 5;        &#125;        return result;    &#125;&#125;</code></pre><h2 id="复杂度分析"><a href="#复杂度分析" class="headerlink" title="复杂度分析"></a>复杂度分析</h2><h3 id="思路1时间复杂度"><a href="#思路1时间复杂度" class="headerlink" title="思路1时间复杂度"></a>思路1时间复杂度</h3><p>$O(log(n))$</p><h3 id="思路1空间复杂度"><a href="#思路1空间复杂度" class="headerlink" title="思路1空间复杂度"></a>思路1空间复杂度</h3><p>$O(1)$</p>]]></content>
      
      
      <categories>
          
          <category> Leetcode </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Leetcode </tag>
            
            <tag> Easy </tag>
            
            <tag> 数运算 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Leetcode:149. 直线上最多的点数</title>
      <link href="/2020/05/03/leetcode-149-zhi-xian-shang-zui-duo-de-dian-shu/"/>
      <url>/2020/05/03/leetcode-149-zhi-xian-shang-zui-duo-de-dian-shu/</url>
      
        <content type="html"><![CDATA[<h1 id="Leetcode-149-直线上最多的点数"><a href="#Leetcode-149-直线上最多的点数" class="headerlink" title="Leetcode: 149. 直线上最多的点数"></a><a href="https://leetcode-cn.com/problems/max-points-on-a-line/">Leetcode: 149. 直线上最多的点数</a></h1><h2 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h2><pre><code>给定一个二维平面，平面上有 n 个点，求最多有多少个点在同一条直线上。</code></pre><h3 id="示例-1"><a href="#示例-1" class="headerlink" title="示例 1:"></a>示例 1:</h3><pre><code>输入: [[1,1],[2,2],[3,3]]输出: 3解释:^||        o|     o|  o  +-------------&gt;0  1  2  3  4</code></pre><h3 id="示例-2"><a href="#示例-2" class="headerlink" title="示例 2:"></a>示例 2:</h3><pre><code>输入: [[1,1],[3,2],[5,3],[4,1],[2,3],[1,4]]输出: 4解释:^||  o|     o        o|        o|  o        o+-------------------&gt;0  1  2  3  4  5  6</code></pre><h2 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h2><h3 id="思路1-点斜法记录直线-hashMap"><a href="#思路1-点斜法记录直线-hashMap" class="headerlink" title="思路1: 点斜法记录直线+hashMap"></a>思路1: 点斜法记录直线+hashMap</h3><p>使用点斜法记录i与i+1开始的斜率值，保存最大值，并记录重复值，最后比较结果</p><h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><h3 id="代码1"><a href="#代码1" class="headerlink" title="代码1"></a>代码1</h3><pre class=" language-Java"><code class="language-Java">class Solution &#123;    public int maxPoints(int[][] points) &#123;        if (points.length < 3)&#123;            return points.length;        &#125;        int duplicatedNum = 0;        int num = points.length;        int result = 0;        for(int i = 0;i < num - 1; i++)&#123;            if (points[i][0] != points[i + 1][0] || points[i][1] != points[i+1][1])&#123;                break;            &#125;            duplicatedNum += 1;        &#125;        if (duplicatedNum - 1 == num)&#123;            return num;        &#125;                for(int i = 0; i < num - 1; i++)&#123;            duplicatedNum = 0;            Map<String, Integer> tempMap = new HashMap<>();            int tempMax = 0;            for(int j = i + 1; j < num; j++)&#123;                int x = points[i][0] - points[j][0];                int y = points[i][1] - points[j][1];                int tempGcb = gcb(x, y);                if (x == 0 && y == 0)&#123;                    duplicatedNum += 1;                    continue;                &#125;                x = x / tempGcb;                y = y / tempGcb;                String tempKey = x + "#" + y;                if (!tempMap.containsKey(tempKey))&#123;                    tempMap.put(tempKey, 0);                &#125;                tempMap.put(tempKey, tempMap.get(tempKey) + 1);                if (tempMap.get(tempKey) > tempMax)&#123;                    tempMax = tempMap.get(tempKey);                &#125;                            &#125;            if (tempMax + duplicatedNum + 1 > result)&#123;                result = tempMax + duplicatedNum + 1;            &#125;        &#125;        return result;            &#125;        private int gcb(int a, int b)&#123;        while(b != 0)&#123;            int temp = a % b;            a = b;            b = temp;        &#125;        return a;    &#125;&#125;</code></pre><h2 id="复杂度分析"><a href="#复杂度分析" class="headerlink" title="复杂度分析"></a>复杂度分析</h2><h3 id="思路1时间复杂度"><a href="#思路1时间复杂度" class="headerlink" title="思路1时间复杂度"></a>思路1时间复杂度</h3><p>$O(n^2)$</p><h3 id="思路1空间复杂度"><a href="#思路1空间复杂度" class="headerlink" title="思路1空间复杂度"></a>思路1空间复杂度</h3><p>$O(n^2)$</p>]]></content>
      
      
      <categories>
          
          <category> Leetcode </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Leetcode </tag>
            
            <tag> Hard </tag>
            
            <tag> 数据存储 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Leetcode:191. 位1的个数</title>
      <link href="/2020/05/01/leetcode-191-wei-1-de-ge-shu/"/>
      <url>/2020/05/01/leetcode-191-wei-1-de-ge-shu/</url>
      
        <content type="html"><![CDATA[<h1 id="Leetcode-191-位1的个数"><a href="#Leetcode-191-位1的个数" class="headerlink" title="Leetcode:191. 位1的个数"></a><a href="https://leetcode-cn.com/problems/number-of-1-bits/">Leetcode:191. 位1的个数</a></h1><h2 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h2><p>编写一个函数，输入是一个无符号整数，返回其二进制表达式中数字位数为 ‘1’ 的个数（也被称为汉明重量）。</p><h3 id="示例-1："><a href="#示例-1：" class="headerlink" title="示例 1："></a>示例 1：</h3><pre><code>输入：00000000000000000000000000001011输出：3解释：输入的二进制串 00000000000000000000000000001011 中，共有三位为 &#39;1&#39;。</code></pre><h3 id="示例-2："><a href="#示例-2：" class="headerlink" title="示例 2："></a>示例 2：</h3><pre><code>输入：00000000000000000000000010000000输出：1解释：输入的二进制串 00000000000000000000000010000000 中，共有一位为 &#39;1&#39;。</code></pre><h3 id="示例-3："><a href="#示例-3：" class="headerlink" title="示例 3："></a>示例 3：</h3><pre><code>输入：11111111111111111111111111111101输出：31解释：输入的二进制串 11111111111111111111111111111101 中，共有 31 位为 &#39;1&#39;。 </code></pre><h3 id="提示："><a href="#提示：" class="headerlink" title="提示："></a>提示：</h3><pre><code>请注意，在某些语言（如 Java）中，没有无符号整数类型。在这种情况下，输入和输出都将被指定为有符号整数类型，并且不应影响您的实现，因为无论整数是有符号的还是无符号的，其内部的二进制表示形式都是相同的。在 Java 中，编译器使用二进制补码记法来表示有符号整数。因此，在上面的 示例 3 中，输入表示有符号整数 -3。</code></pre><h3 id="进阶"><a href="#进阶" class="headerlink" title="进阶:"></a>进阶:</h3><pre><code>如果多次调用这个函数，你将如何优化你的算法？</code></pre><h2 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h2><h3 id="思路1-直接与n-1位与"><a href="#思路1-直接与n-1位与" class="headerlink" title="思路1 直接与n-1位与"></a>思路1 直接与n-1位与</h3><p>直接与n-1 位与，每次减少一个1</p><h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><h3 id="代码1"><a href="#代码1" class="headerlink" title="代码1"></a>代码1</h3><pre class=" language-Java"><code class="language-Java">public class Solution &#123;    // you need to treat n as an unsigned value    public int hammingWeight(int n) &#123;        int result = 0;        while(n != 0)&#123;            result += 1;            n = n & (n - 1);        &#125;        return result;    &#125;&#125;</code></pre><h2 id="复杂度分析"><a href="#复杂度分析" class="headerlink" title="复杂度分析"></a>复杂度分析</h2><h3 id="思路1时间复杂度"><a href="#思路1时间复杂度" class="headerlink" title="思路1时间复杂度"></a>思路1时间复杂度</h3><p>$O(1)$</p><h3 id="思路1空间复杂度"><a href="#思路1空间复杂度" class="headerlink" title="思路1空间复杂度"></a>思路1空间复杂度</h3><p>$O(1)$</p>]]></content>
      
      
      <categories>
          
          <category> Leetcode </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Leetcode </tag>
            
            <tag> Easy </tag>
            
            <tag> 位运算 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Leetcode:136. 只出现一次的数字</title>
      <link href="/2020/04/30/leetcode-136-zhi-chu-xian-yi-ci-de-shu-zi/"/>
      <url>/2020/04/30/leetcode-136-zhi-chu-xian-yi-ci-de-shu-zi/</url>
      
        <content type="html"><![CDATA[<h1 id="Leetcode-136-只出现一次的数字"><a href="#Leetcode-136-只出现一次的数字" class="headerlink" title="Leetcode:136. 只出现一次的数字"></a><a href="https://leetcode-cn.com/problems/single-number/">Leetcode:136. 只出现一次的数字</a></h1><h2 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h2><pre><code>给定一个非空整数数组，除了某个元素只出现一次以外，其余每个元素均出现两次。找出那个只出现了一次的元素。</code></pre><h3 id="说明："><a href="#说明：" class="headerlink" title="说明："></a>说明：</h3><p>你的算法应该具有线性时间复杂度。 你可以不使用额外空间来实现吗？</p><h3 id="示例-1"><a href="#示例-1" class="headerlink" title="示例 1:"></a>示例 1:</h3><pre><code>输入: [2,2,1]输出: 1</code></pre><h3 id="示例-2"><a href="#示例-2" class="headerlink" title="示例 2:"></a>示例 2:</h3><pre><code>输入: [4,1,2,1,2]输出: 4</code></pre><h2 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h2><h3 id="思路1"><a href="#思路1" class="headerlink" title="思路1"></a>思路1</h3><p>直接对所有数字异或，相同的两个数字会直接运算为零</p><h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><h3 id="代码1"><a href="#代码1" class="headerlink" title="代码1"></a>代码1</h3><pre class=" language-Java"><code class="language-Java">class Solution &#123;    public int singleNumber(int[] nums) &#123;        if (nums == null || nums.length == 0)&#123;            return 0;        &#125;        int result = 0;        for(int num:nums)&#123;            result = result ^ num;        &#125;        return result;    &#125;&#125;</code></pre><h2 id="复杂度分析"><a href="#复杂度分析" class="headerlink" title="复杂度分析"></a>复杂度分析</h2><h3 id="思路1时间复杂度"><a href="#思路1时间复杂度" class="headerlink" title="思路1时间复杂度"></a>思路1时间复杂度</h3><p>$O(n)$</p><h3 id="思路1空间复杂度"><a href="#思路1空间复杂度" class="headerlink" title="思路1空间复杂度"></a>思路1空间复杂度</h3><p>$O(1)$</p>]]></content>
      
      
      <categories>
          
          <category> Leetcode </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Leetcode </tag>
            
            <tag> Easy </tag>
            
            <tag> 异或 </tag>
            
            <tag> 位运算 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Leetcode:210. 课程表 II</title>
      <link href="/2020/04/30/leetcode-210-ke-cheng-biao-ii/"/>
      <url>/2020/04/30/leetcode-210-ke-cheng-biao-ii/</url>
      
        <content type="html"><![CDATA[<h1 id="Leetcode-210-课程表-II"><a href="#Leetcode-210-课程表-II" class="headerlink" title="Leetcode:210. 课程表 II"></a><a href="https://leetcode-cn.com/problems/course-schedule-ii/">Leetcode:210. 课程表 II</a></h1><h2 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h2><pre><code>现在你总共有 n 门课需要选，记为 0 到 n-1。在选修某些课程之前需要一些先修课程。 例如，想要学习课程 0 ，你需要先完成课程 1 ，我们用一个匹配来表示他们: [0,1]给定课程总量以及它们的先决条件，返回你为了学完所有课程所安排的学习顺序。可能会有多个正确的顺序，你只要返回一种就可以了。如果不可能完成所有课程，返回一个空数组。</code></pre><h3 id="示例-1"><a href="#示例-1" class="headerlink" title="示例 1:"></a>示例 1:</h3><pre><code>输入: 2, [[1,0]] 输出: [0,1]解释: 总共有 2 门课程。要学习课程 1，你需要先完成课程 0。因此，正确的课程顺序为 [0,1] 。</code></pre><h3 id="示例-2"><a href="#示例-2" class="headerlink" title="示例 2:"></a>示例 2:</h3><pre><code>输入: 4, [[1,0],[2,0],[3,1],[3,2]]输出: [0,1,2,3] or [0,2,1,3]解释: 总共有 4 门课程。要学习课程 3，你应该先完成课程 1 和课程 2。并且课程 1 和课程 2 都应该排在课程 0 之后。     因此，一个正确的课程顺序是 [0,1,2,3] 。另一个正确的排序是 [0,2,1,3] 。</code></pre><h3 id="说明"><a href="#说明" class="headerlink" title="说明:"></a>说明:</h3><pre><code>输入的先决条件是由边缘列表表示的图形，而不是邻接矩阵。详情请参见图的表示法。你可以假定输入的先决条件中没有重复的边。</code></pre><h3 id="提示"><a href="#提示" class="headerlink" title="提示:"></a>提示:</h3><pre><code>这个问题相当于查找一个循环是否存在于有向图中。如果存在循环，则不存在拓扑排序，因此不可能选取所有课程进行学习。通过 DFS 进行拓扑排序 - 一个关于Coursera的精彩视频教程（21分钟），介绍拓扑排序的基本概念。拓扑排序也可以通过 BFS 完成。</code></pre><h2 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h2><h3 id="思路1-BFS"><a href="#思路1-BFS" class="headerlink" title="思路1 BFS"></a>思路1 BFS</h3><p>以依赖前置课程数为零的课程开始BFS,按照这个顺序修完所有课程并记录，同时记录所有的课程</p><h3 id="思路2-DFS"><a href="#思路2-DFS" class="headerlink" title="思路2 DFS"></a>思路2 DFS</h3><p>类似与课程表LC207&#x2F;&#x2F;TODO</p><h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><h3 id="代码1"><a href="#代码1" class="headerlink" title="代码1"></a>代码1</h3><pre class=" language-Java"><code class="language-Java">class Solution &#123;    public int[] findOrder(int numCourses, int[][] prerequisites) &#123;        int[] result = new int[numCourses];        int[] depNum = new int[numCourses];        List<List<Integer>> afters = new ArrayList<>();        for(int i = 0; i < numCourses; i++)&#123;            afters.add(new ArrayList<Integer>());        &#125;        for(int[] pres: prerequisites)&#123;            afters.get(pres[1]).add(pres[0]);            depNum[pres[0]] += 1;        &#125;        Queue<Integer> queue = new LinkedList<>();        for(int i = 0; i < numCourses; i++)&#123;            if (depNum[i] == 0)&#123;                queue.offer(i);            &#125;        &#125;        // System.out.printf("%d\n", queue.size());        int getIndex = 0;        while(!queue.isEmpty())&#123;            int getNum = queue.remove();            result[getIndex++] = getNum;            for(int after: afters.get(getNum))&#123;                depNum[after] -= 1;                if (depNum[after] == 0)&#123;                    queue.offer(after);                &#125;            &#125;        &#125;        return  getIndex == numCourses ? result: new int[0];    &#125;&#125;</code></pre><h2 id="复杂度分析"><a href="#复杂度分析" class="headerlink" title="复杂度分析"></a>复杂度分析</h2><h3 id="思路1时间复杂度"><a href="#思路1时间复杂度" class="headerlink" title="思路1时间复杂度"></a>思路1时间复杂度</h3><p>$O(V+E)$，所有的课程数目和依赖关系</p><h3 id="思路1空间复杂度"><a href="#思路1空间复杂度" class="headerlink" title="思路1空间复杂度"></a>思路1空间复杂度</h3><p>$O(V+E)$</p>]]></content>
      
      
      <categories>
          
          <category> Leetcode </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Leetcode </tag>
            
            <tag> Medium </tag>
            
            <tag> BFS </tag>
            
            <tag> DFS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Leetcode:207. 课程表</title>
      <link href="/2020/04/29/leetcode-207-ke-cheng-biao/"/>
      <url>/2020/04/29/leetcode-207-ke-cheng-biao/</url>
      
        <content type="html"><![CDATA[<h1 id="Leetcode-207-课程表"><a href="#Leetcode-207-课程表" class="headerlink" title="[Leetcode: 207.课程表]"></a>[Leetcode: 207.课程表]</h1><h2 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h2><pre><code>你这个学期必须选修 numCourse 门课程，记为 0 到 numCourse-1 。在选修某些课程之前需要一些先修课程。 例如，想要学习课程 0 ，你需要先完成课程 1 ，我们用一个匹配来表示他们：[0,1]给定课程总量以及它们的先决条件，请你判断是否可能完成所有课程的学习？</code></pre><h3 id="示例-1"><a href="#示例-1" class="headerlink" title="示例 1:"></a>示例 1:</h3><pre><code>输入: 2, [[1,0]] 输出: true解释: 总共有 2 门课程。学习课程 1 之前，你需要完成课程 0。所以这是可能的。</code></pre><h3 id="示例-2"><a href="#示例-2" class="headerlink" title="示例 2:"></a>示例 2:</h3><pre><code>输入: 2, [[1,0],[0,1]]输出: false解释: 总共有 2 门课程。学习课程 1 之前，你需要先完成​课程 0；并且学习课程 0 之前，你还应先完成课程 1。这是不可能的。</code></pre><h3 id="提示："><a href="#提示：" class="headerlink" title="提示："></a>提示：</h3><pre><code>输入的先决条件是由 边缘列表 表示的图形，而不是 邻接矩阵 。详情请参见图的表示法。你可以假定输入的先决条件中没有重复的边。1 &lt;= numCourses &lt;= 10^5</code></pre><h2 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h2><h3 id="思路1"><a href="#思路1" class="headerlink" title="思路1"></a>思路1</h3><p>使用BFS思想，将无前置课程的课程作为初始节点进行BFS遍历，在遍历过程中通过减少子节点依赖前置课程数的方式遍历（当该课程无前置课程时），判断最终的课程数目是否和需要修的课程数相等</p><h3 id="思路2"><a href="#思路2" class="headerlink" title="思路2"></a>思路2</h3><p>使用DFS思想，判断各个课程出发的图是否有环，可以使用一个数组记录课程遍历状态，如1表示在当前课程中已经被遍历过，0表示未被遍历，-1表示在其他课程开始的节点中遍历过</p><h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><h3 id="代码1"><a href="#代码1" class="headerlink" title="代码1"></a>代码1</h3><pre class=" language-Java"><code class="language-Java">class Solution &#123;    public boolean canFinish(int numCourses, int[][] prerequisites) &#123;        if (numCourses == 0 || prerequisites == null || prerequisites.length == 0 || prerequisites[0] == null || prerequisites[0].length == 0)&#123;            return true;        &#125;        int[] dps = new int[numCourses];        List<List<Integer>> numOutput = new ArrayList();        for(int i = 0; i < numCourses; i++)&#123;            numOutput.add(new ArrayList<Integer>());        &#125;        for(int[] pre: prerequisites)&#123;            numOutput.get(pre[0]).add(pre[1]);            dps[pre[1]] += 1;        &#125;        Queue<Integer> queue = new LinkedList<>();        for(int i = 0; i < numCourses; i++)&#123;            if (dps[i] == 0)&#123;                queue.offer(i);            &#125;        &#125;        int amount = 0;        while (!queue.isEmpty())&#123;            int getNum = queue.remove();            amount += 1;            for(int num: numOutput.get(getNum))&#123;                dps[num] -= 1;                if (dps[num] == 0)&#123;                    queue.offer(num);                &#125;            &#125;        &#125;        return amount == numCourses;    &#125;&#125;</code></pre><h3 id="代码2"><a href="#代码2" class="headerlink" title="代码2"></a>代码2</h3><pre class=" language-Java"><code class="language-Java">class Solution &#123;    public boolean canFinish(int numCourses, int[][] prerequisites) &#123;        if (numCourses == 0 || prerequisites == null || prerequisites.length == 0 || prerequisites[0] == null || prerequisites[0].length == 0)&#123;            return true;        &#125;        int[] hasVisit = new int[numCourses];        List<List<Integer>> numOutput = new ArrayList();        for(int i = 0; i < numCourses; i++)&#123;            numOutput.add(new ArrayList<Integer>());        &#125;        for(int[] pre: prerequisites)&#123;            numOutput.get(pre[1]).add(pre[0]);        &#125;        for(int i = 0; i < numCourses; i++)&#123;            if (hasLoop(numOutput, hasVisit, i))&#123;                return false;            &#125;        &#125;        return true;    &#125;        private boolean hasLoop(List<List<Integer>> numOutput, int[] hasVisit, int index)&#123;        if (hasVisit[index] == 1)&#123;            return true;        &#125;        if (hasVisit[index] == -1)&#123;            return false;        &#125;        hasVisit[index] = 1;        for(int getIndex: numOutput.get(index))&#123;            if (hasLoop(numOutput, hasVisit, getIndex))&#123;                return true;            &#125;        &#125;        hasVisit[index] = -1;        return false;    &#125; &#125;</code></pre><h2 id="复杂度分析"><a href="#复杂度分析" class="headerlink" title="复杂度分析"></a>复杂度分析</h2><h3 id="思路1时间复杂度"><a href="#思路1时间复杂度" class="headerlink" title="思路1时间复杂度"></a>思路1时间复杂度</h3><p>$O(V+E)$所有节点和边数目</p><h3 id="思路1空间复杂度"><a href="#思路1空间复杂度" class="headerlink" title="思路1空间复杂度"></a>思路1空间复杂度</h3><p>$O(V+E)$所有节点和边数目</p><h3 id="思路2时间复杂度"><a href="#思路2时间复杂度" class="headerlink" title="思路2时间复杂度"></a>思路2时间复杂度</h3><p>$O(V+E)$所有节点和边数目</p><h3 id="思路2空间复杂度"><a href="#思路2空间复杂度" class="headerlink" title="思路2空间复杂度"></a>思路2空间复杂度</h3><p>$O(V+E)$所有节点和边数目</p>]]></content>
      
      
      <categories>
          
          <category> Leetcode </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Leetcode </tag>
            
            <tag> Medium </tag>
            
            <tag> BFS </tag>
            
            <tag> DFS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Leetcode:127. 单词接龙</title>
      <link href="/2020/04/28/leetcode-127-dan-ci-jie-long/"/>
      <url>/2020/04/28/leetcode-127-dan-ci-jie-long/</url>
      
        <content type="html"><![CDATA[<h1 id="Leetcode-127-单词接龙"><a href="#Leetcode-127-单词接龙" class="headerlink" title="Leetcode: 127. 单词接龙"></a><a href="https://leetcode-cn.com/problems/word-ladder/">Leetcode: 127. 单词接龙</a></h1><h2 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h2><pre><code>给定两个单词（beginWord 和 endWord）和一个字典，找到从 beginWord 到 endWord 的最短转换序列的长度。转换需遵循如下规则：每次转换只能改变一个字母。转换过程中的中间单词必须是字典中的单词。</code></pre><h3 id="说明"><a href="#说明" class="headerlink" title="说明:"></a>说明:</h3><pre><code>如果不存在这样的转换序列，返回 0。所有单词具有相同的长度。所有单词只由小写字母组成。字典中不存在重复的单词。你可以假设 beginWord 和 endWord 是非空的，且二者不相同。</code></pre><h3 id="示例-1"><a href="#示例-1" class="headerlink" title="示例 1:"></a>示例 1:</h3><pre><code>输入:beginWord = &quot;hit&quot;,endWord = &quot;cog&quot;,wordList = [&quot;hot&quot;,&quot;dot&quot;,&quot;dog&quot;,&quot;lot&quot;,&quot;log&quot;,&quot;cog&quot;]输出: 5解释: 一个最短转换序列是 &quot;hit&quot; -&gt; &quot;hot&quot; -&gt; &quot;dot&quot; -&gt; &quot;dog&quot; -&gt; &quot;cog&quot;,    返回它的长度 5。</code></pre><h3 id="示例-2"><a href="#示例-2" class="headerlink" title="示例 2:"></a>示例 2:</h3><pre><code>输入:beginWord = &quot;hit&quot;endWord = &quot;cog&quot;wordList = [&quot;hot&quot;,&quot;dot&quot;,&quot;dog&quot;,&quot;lot&quot;,&quot;log&quot;]输出: 0解释: endWord &quot;cog&quot; 不在字典中，所以无法进行转换。</code></pre><h2 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h2><h3 id="思路1-BFS"><a href="#思路1-BFS" class="headerlink" title="思路1 BFS"></a>思路1 BFS</h3><p>可将单词接龙看作更改一个单词的无向图，但是需要记录访问的词，所有词都可分解为将一个字符改成*的通用匹配模式，然后使用该通用模型进行匹配，然后使用BFS对图进行广度优先遍历，在广度优先遍历时需要注意要保存层次信息帮助记录路径长</p><h3 id="思路2-双向"><a href="#思路2-双向" class="headerlink" title="思路2 双向"></a>思路2 双向</h3><p>同时从开始词和末尾词进行BFS,减少无用边，更快找到路径，结果为路径加和即可</p><h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><h3 id="代码1"><a href="#代码1" class="headerlink" title="代码1"></a>代码1</h3><pre class=" language-Java"><code class="language-Java">class Solution &#123;    public int ladderLength(String beginWord, String endWord, List<String> wordList) &#123;        if (beginWord == null || beginWord.length() == 0 || endWord == null || endWord.length() == 0 || wordList == null || wordList.size() == 0)&#123;            return 0;        &#125;        Map<String, List<String>> wordDict = new HashMap<>();        Map<String, Boolean> hasVisit = new HashMap();        Queue<Map<String, Integer>> queue = new LinkedList<>();        hasVisit.put(beginWord, true);        queue.offer(new HashMap<>()&#123;&#123;put(beginWord, 1);&#125;&#125;);        for(String word: wordList)&#123;            int l = word.length();            if (!word.equals(beginWord))&#123;                hasVisit.put(word, false);            &#125;            for(int i = 0; i < l; i++)&#123;                String tempStr = word.substring(0, i) + "*" + word.substring(i + 1, l);                if (!wordDict.containsKey(tempStr))&#123;                    wordDict.put(tempStr, new ArrayList<String>());                &#125;                List<String> tempList = wordDict.get(tempStr);                tempList.add(word);                wordDict.put(tempStr, tempList);            &#125;        &#125;        while(!queue.isEmpty())&#123;            Map<String, Integer> node = queue.remove();            String word = node.keySet().toArray()[0].toString();            int getLevel = node.get(word);            if (word.equals(endWord))&#123;                return getLevel;            &#125;            int l = word.length();            for(int i = 0; i < l; i++)&#123;                String tempStr = word.substring(0, i) + "*" + word.substring(i + 1, l);                if (wordDict.get(tempStr) == null || wordDict.get(tempStr).size() == 0)&#123;                    continue;                &#125;                for(String getWord: wordDict.get(tempStr))&#123;                    if (getWord.equals(endWord))&#123;                        return getLevel + 1;                    &#125;                    if (!hasVisit.get(getWord))&#123;                        queue.offer(new HashMap<>()&#123;&#123;put(getWord, getLevel + 1);&#125;&#125;);                        hasVisit.put(getWord, true);                    &#125;                &#125;            &#125;        &#125;        return 0;    &#125;&#125;</code></pre><h3 id="代码2"><a href="#代码2" class="headerlink" title="代码2"></a>代码2</h3><pre class=" language-Java"><code class="language-Java">class Solution &#123;    public int ladderLength(String beginWord, String endWord, List<String> wordList) &#123;        if (beginWord == null || beginWord.length() == 0 || endWord == null || endWord.length() == 0 || wordList == null || wordList.size() == 0)&#123;            return 0;        &#125;        Map<String, List<String>> wordDict = new HashMap<>();        Map<String, Integer> beginVisit = new HashMap<>();        Map<String, Integer> endVisit = new HashMap<>();        Queue<String> beginQueue = new LinkedList<>();        Queue<String> endQueue = new LinkedList<>();                beginVisit.put(beginWord, 1);        endVisit.put(endWord, 1);        beginQueue.offer(beginWord);        endQueue.offer(endWord);        boolean hasEndWord = false;                for(String word: wordList)&#123;            int l = word.length();            if (word.equals(endWord))&#123;                hasEndWord = true;            &#125;            for(int i = 0; i < l; i++)&#123;                String tempStr = word.substring(0, i) + "*" + word.substring(i + 1, l);                if (!wordDict.containsKey(tempStr))&#123;                    wordDict.put(tempStr, new ArrayList<String>());                &#125;                List<String> tempList = wordDict.get(tempStr);                tempList.add(word);                wordDict.put(tempStr, tempList);            &#125;        &#125;        System.out.println(hasEndWord);        if (!hasEndWord)&#123;            return 0;        &#125;                while(!beginQueue.isEmpty() && !endQueue.isEmpty())&#123;            int getSame = updateQueue(wordDict, beginQueue, beginVisit, endVisit);            if (getSame != -1)&#123;                return getSame;            &#125;            getSame = updateQueue(wordDict, endQueue, endVisit, beginVisit);            if (getSame != -1)&#123;                return getSame;            &#125;        &#125;        return 0;    &#125;        private int updateQueue(Map<String, List<String>> wordDict, Queue<String> queue, Map<String, Integer> visit, Map<String, Integer> visit1)&#123;        String getStr = queue.remove();        int l = getStr.length();        int getLever = visit.get(getStr);        for(int i = 0; i < l; i++)&#123;            String tempStr = getStr.substring(0, i) + "*" + getStr.substring(i + 1, l);            if (!wordDict.containsKey(tempStr) || wordDict.get(tempStr).size() == 0)&#123;                continue;            &#125;            for(String getWord: wordDict.get(tempStr))&#123;                if (!visit.containsKey(getWord))&#123;                    if (visit1.containsKey(getWord))&#123;                        return getLever + visit1.get(getWord);                    &#125;                    queue.offer(getWord);                    visit.put(getWord, getLever + 1);                &#125;            &#125;        &#125;        return -1;    &#125;&#125;</code></pre><h2 id="复杂度分析"><a href="#复杂度分析" class="headerlink" title="复杂度分析"></a>复杂度分析</h2><h3 id="思路1时间复杂度"><a href="#思路1时间复杂度" class="headerlink" title="思路1时间复杂度"></a>思路1时间复杂度</h3><p>$O(m*n)$遍历完m个字符长度的n个词</p><h3 id="思路1空间复杂度"><a href="#思路1空间复杂度" class="headerlink" title="思路1空间复杂度"></a>思路1空间复杂度</h3><p>$O(m*n)$存储可变换状态</p><h3 id="思路2时间复杂度"><a href="#思路2时间复杂度" class="headerlink" title="思路2时间复杂度"></a>思路2时间复杂度</h3><p>$O(m*n)$遍历完m个字符长度的n个词</p><h3 id="思路2空间复杂度"><a href="#思路2空间复杂度" class="headerlink" title="思路2空间复杂度"></a>思路2空间复杂度</h3><p>$O(m*n)$存储可变换状态</p>]]></content>
      
      
      <categories>
          
          <category> Leetcode </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Leetcode </tag>
            
            <tag> Medium </tag>
            
            <tag> BFS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Leetcode:200. 岛屿数量</title>
      <link href="/2020/04/26/leetcode-200-dao-yu-shu-liang/"/>
      <url>/2020/04/26/leetcode-200-dao-yu-shu-liang/</url>
      
        <content type="html"><![CDATA[<h1 id="Leetcode-200-岛屿数量"><a href="#Leetcode-200-岛屿数量" class="headerlink" title="Leetcode:200. 岛屿数量"></a><a href="https://leetcode-cn.com/problems/number-of-islands/">Leetcode:200. 岛屿数量</a></h1><h2 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h2><pre><code>给你一个由 &#39;1&#39;（陆地）和 &#39;0&#39;（水）组成的的二维网格，请你计算网格中岛屿的数量。岛屿总是被水包围，并且每座岛屿只能由水平方向或竖直方向上相邻的陆地连接形成。此外，你可以假设该网格的四条边均被水包围。</code></pre><h3 id="示例-1"><a href="#示例-1" class="headerlink" title="示例 1:"></a>示例 1:</h3><pre><code>输入:11110110101100000000输出: 1示例 2:</code></pre><h3 id="输入"><a href="#输入" class="headerlink" title="输入:"></a>输入:</h3><pre><code>11000110000010000011输出: 3解释: 每座岛屿只能由水平和/或竖直方向上相邻的陆地连接而成。</code></pre><h2 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h2><h3 id="思路1-DFS"><a href="#思路1-DFS" class="headerlink" title="思路1 DFS"></a>思路1 DFS</h3><p>在先判断是否是岛屿之后使用DFS对为’1’的岛屿进行深度优先遍历，将状态改为’0’</p><h3 id="TODO"><a href="#TODO" class="headerlink" title="TODO"></a>TODO</h3><p>并查集和BFS</p><h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><pre class=" language-Java"><code class="language-Java">class Solution &#123;    private int[][] paths = &#123;&#123;1, 0&#125;, &#123;0, 1&#125;, &#123;-1, 0&#125;, &#123;0, -1&#125;&#125;;    public int numIslands(char[][] grid) &#123;        if (grid == null || grid.length == 0 || grid[0] == null || grid[0].length == 0)&#123;            return 0;        &#125;        int m = grid.length;        int n = grid[0].length;        int result = 0;        for(int i = 0; i < m; i++)&#123;            for(int j = 0; j < n; j++)&#123;                if (grid[i][j] == '1')&#123;                    result += 1;                &#125;                dfs(grid, i, j);            &#125;        &#125;        return result;    &#125;        private void dfs(char[][] grid, int i, int j)&#123;        if(grid[i][j] == '0')&#123;            return;        &#125;        int m = grid.length;        int n = grid[0].length;        grid[i][j] = '0';        for(int[] path: paths)&#123;            int x = i + path[0];            int y = j + path[1];            if (x >= 0 && x < m && y >= 0 && y < n)&#123;                if (grid[x][y] == '1')&#123;                    dfs(grid, x, y);                &#125;            &#125;        &#125;    &#125;&#125;</code></pre><h2 id="复杂度分析"><a href="#复杂度分析" class="headerlink" title="复杂度分析"></a>复杂度分析</h2><h3 id="思路1时间复杂度"><a href="#思路1时间复杂度" class="headerlink" title="思路1时间复杂度"></a>思路1时间复杂度</h3><p>$O(mn)$</p><h3 id="思路1空间复杂度"><a href="#思路1空间复杂度" class="headerlink" title="思路1空间复杂度"></a>思路1空间复杂度</h3><p>$O(mn)$,栈空间m*n</p>]]></content>
      
      
      <categories>
          
          <category> Leetcode </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Leetcode </tag>
            
            <tag> Medium </tag>
            
            <tag> DFS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Leetcode:329. 矩阵中的最长递增路径</title>
      <link href="/2020/04/26/leetcode-329-ju-zhen-zhong-de-zui-chang-di-zeng-lu-jing/"/>
      <url>/2020/04/26/leetcode-329-ju-zhen-zhong-de-zui-chang-di-zeng-lu-jing/</url>
      
        <content type="html"><![CDATA[<h1 id="Leetcode"><a href="#Leetcode" class="headerlink" title="Leetcode"></a><a href="https://leetcode-cn.com/problems/longest-increasing-path-in-a-matrix/">Leetcode</a></h1><h2 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h2><pre><code>给定一个整数矩阵，找出最长递增路径的长度。对于每个单元格，你可以往上，下，左，右四个方向移动。 你不能在对角线方向上移动或移动到边界外（即不允许环绕）。</code></pre><h3 id="示例-1"><a href="#示例-1" class="headerlink" title="示例 1:"></a>示例 1:</h3><pre><code>输入: nums = [[9,9,4],[6,6,8],[2,1,1]] 输出: 4 解释: 最长递增路径为 [1, 2, 6, 9]。</code></pre><h3 id="示例-2"><a href="#示例-2" class="headerlink" title="示例 2:"></a>示例 2:</h3><pre><code>输入: nums = [[3,4,5],[3,2,6],[2,2,1]] 输出: 4 解释: 最长递增路径是 [3, 4, 5, 6]。注意不允许在对角线方向上移动。</code></pre><h2 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h2><h3 id="思路1"><a href="#思路1" class="headerlink" title="思路1"></a>思路1</h3><p>对每个位置进行深度优先遍历（可看作是四叉树），使用一个与matrix形状相同的数组保存以及经过DFS的节点，然后通过比较与上下左右四个状态比较更新状态</p><h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><h3 id="代码1"><a href="#代码1" class="headerlink" title="代码1"></a>代码1</h3><pre class=" language-Java"><code class="language-Java">class Solution &#123;    private int[][] paths = &#123;&#123;0, 1&#125;, &#123;1, 0&#125;, &#123;0, -1&#125;, &#123;-1, 0&#125;&#125;;    private int[][] dps;    public int longestIncreasingPath(int[][] matrix) &#123;        if (matrix == null || matrix.length == 0 || matrix[0] == null || matrix[0].length == 0)&#123;            return 0;        &#125;        dps = new int[matrix.length][matrix[0].length];        int result = 0;        for(int i = 0; i < matrix.length; i++)&#123;            for(int j = 0; j < matrix[0].length; j++)&#123;                result = Math.max(dfs(matrix, i, j), result);            &#125;        &#125;        return result;    &#125;        private int dfs(int[][] matrix, int i, int j)&#123;        if(dps[i][j] != 0)&#123;            return dps[i][j];        &#125;        for(int[] path: paths)&#123;            int x = i + path[0];            int y = j + path[1];            if(x >= 0 && x < matrix.length && y >=0 && y < matrix[0].length && matrix[i][j] < matrix[x][y])&#123;                dps[i][j] = Math.max(dps[i][j], dfs(matrix, x, y));            &#125;        &#125;        return ++dps[i][j];    &#125;&#125;</code></pre><h2 id="复杂度分析"><a href="#复杂度分析" class="headerlink" title="复杂度分析"></a>复杂度分析</h2><h3 id="思路1时间复杂度"><a href="#思路1时间复杂度" class="headerlink" title="思路1时间复杂度"></a>思路1时间复杂度</h3><p>$O(mn)$每个单元格仅被计算一次</p><h3 id="思路1空间复杂度"><a href="#思路1空间复杂度" class="headerlink" title="思路1空间复杂度"></a>思路1空间复杂度</h3><p>$O(mn)$</p>]]></content>
      
      
      <categories>
          
          <category> Leetcode </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Leetcode </tag>
            
            <tag> Hard </tag>
            
            <tag> DFS </tag>
            
            <tag> 动态规划 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Leetcode:322. 零钱兑换</title>
      <link href="/2020/04/25/leetcode-322-ling-qian-dui-huan/"/>
      <url>/2020/04/25/leetcode-322-ling-qian-dui-huan/</url>
      
        <content type="html"><![CDATA[<h1 id="Leetcode-322-零钱兑换"><a href="#Leetcode-322-零钱兑换" class="headerlink" title="Leetcode: 322.零钱兑换"></a><a href="https://leetcode-cn.com/problems/coin-change/">Leetcode: 322.零钱兑换</a></h1><h2 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h2><pre><code>给定不同面额的硬币 coins 和一个总金额 amount。编写一个函数来计算可以凑成总金额所需的最少的硬币个数。如果没有任何一种硬币组合能组成总金额，返回 -1。</code></pre><h3 id="示例-1"><a href="#示例-1" class="headerlink" title="示例 1:"></a>示例 1:</h3><pre><code>输入: coins = [1, 2, 5], amount = 11输出: 3 解释: 11 = 5 + 5 + 1</code></pre><h3 id="示例-2"><a href="#示例-2" class="headerlink" title="示例 2:"></a>示例 2:</h3><pre><code>输入: coins = [2], amount = 3输出: -1</code></pre><h3 id="说明"><a href="#说明" class="headerlink" title="说明:"></a>说明:</h3><pre><code>你可以认为每种硬币的数量是无限的。</code></pre><h2 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h2><h3 id="思路1"><a href="#思路1" class="headerlink" title="思路1"></a>思路1</h3><p>从0开始计算到amount的每个位置的需要硬币的数量，然后按照$dp[i] &#x3D; min(dp[i - coin] + 1)　coin \in coins$更新状态</p><h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><h3 id="代码1"><a href="#代码1" class="headerlink" title="代码1"></a>代码1</h3><pre class=" language-Java"><code class="language-Java">class Solution &#123;    public int coinChange(int[] coins, int amount) &#123;        if (coins == null || coins.length == 0)&#123;            return -1;        &#125;                int[] dps = new int[amount + 1];        for(int i = 1; i <= amount; i++)&#123;            dps[i] = amount + 1;            for(int coin: coins)&#123;                if (i - coin >= 0)&#123;                    dps[i] = Math.min(dps[i], dps[i - coin] + 1);                &#125;            &#125;        &#125;        return dps[amount] > amount ? -1 : dps[amount];    &#125;&#125;</code></pre><h2 id="复杂度分析"><a href="#复杂度分析" class="headerlink" title="复杂度分析"></a>复杂度分析</h2><h3 id="思路1时间复杂度"><a href="#思路1时间复杂度" class="headerlink" title="思路1时间复杂度"></a>思路1时间复杂度</h3><p>$O(AN)$</p><h3 id="思路1空间复杂度"><a href="#思路1空间复杂度" class="headerlink" title="思路1空间复杂度"></a>思路1空间复杂度</h3><p>$O(A)$</p>]]></content>
      
      
      <categories>
          
          <category> Leetcode </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Leetcode </tag>
            
            <tag> Medium </tag>
            
            <tag> 动态规划 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Leetcode:300. 最长上升子序列</title>
      <link href="/2020/04/24/leetcode-300-zui-chang-shang-sheng-zi-xu-lie/"/>
      <url>/2020/04/24/leetcode-300-zui-chang-shang-sheng-zi-xu-lie/</url>
      
        <content type="html"><![CDATA[<h1 id="Leetcode-300-最长上升子序列"><a href="#Leetcode-300-最长上升子序列" class="headerlink" title="Leetcode:300.最长上升子序列"></a><a href="https://leetcode-cn.com/problems/longest-increasing-subsequence/">Leetcode:300.最长上升子序列</a></h1><h2 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h2><pre><code>给定一个无序的整数数组，找到其中最长上升子序列的长度。</code></pre><h3 id="示例"><a href="#示例" class="headerlink" title="示例:"></a>示例:</h3><pre><code>输入: [10,9,2,5,3,7,101,18]输出: 4 解释: 最长的上升子序列是 [2,3,7,101]，它的长度是 4。</code></pre><h3 id="说明"><a href="#说明" class="headerlink" title="说明:"></a>说明:</h3><pre><code>可能会有多种最长上升子序列的组合，你只需要输出对应的长度即可。你算法的时间复杂度应该为 O(n2) 。进阶: 你能将算法的时间复杂度降低到 O(n log n) 吗?</code></pre><h2 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h2><h3 id="思路1-动态规划"><a href="#思路1-动态规划" class="headerlink" title="思路1 动态规划"></a>思路1 动态规划</h3><p>维持每个数字对应的上升子序列长度，然后根据状态转移方程$dp[i] &#x3D; max(dp[j] + 1)　j\in(nums[j] &lt; nums[i] &amp;&amp; j &lt; i&gt;&gt;)$</p><h3 id="思路2-贪心-二分搜索"><a href="#思路2-贪心-二分搜索" class="headerlink" title="思路2 贪心+二分搜索"></a>思路2 贪心+二分搜索</h3><p>使用一个数组保存从小到大的数字，在相同的上升子序列长度只保留一个值(最小值)，然后每个数字进来二分查找找到合适的位置。</p><h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><h3 id="代码1"><a href="#代码1" class="headerlink" title="代码1"></a>代码1</h3><pre class=" language-Java"><code class="language-Java">class Solution &#123;    public int lengthOfLIS(int[] nums) &#123;        if (nums == null || nums.length == 0)&#123;            return 0;        &#125;        int result = 0;        int dps[] = new int[nums.length];        for(int i = 1; i < nums.length; i++)&#123;            for(int j = 0; j < i; j++)&#123;                if (nums[i] > nums[j])&#123;                    dps[i] = Math.max(dps[j] + 1, dps[i]);                    if (result < dps[i])&#123;                        result = dps[i];                    &#125;                &#125;            &#125;        &#125;        return result + 1;    &#125;&#125;</code></pre><h3 id="代码2"><a href="#代码2" class="headerlink" title="代码2"></a>代码2</h3><pre class=" language-Java"><code class="language-Java">class Solution &#123;    public int lengthOfLIS(int[] nums) &#123;        if (nums == null || nums.length == 0)&#123;            return 0;        &#125;        int n = nums.length;        int[] dps = new int[n + 1];        int len = 1;        dps[1] = nums[0];        for(int i = 1; i < n; i++)&#123;            if (nums[i] > dps[len])&#123;                dps[++len] = nums[i];                continue;            &#125;            int left  = 1, right = len;            int origin = 0;            while(left <= right)&#123;                int mid = (left + right) / 2;                if (dps[mid] < nums[i])&#123;                    origin = mid;                    left = mid + 1;                &#125;else&#123;                    right = mid - 1;                &#125;            &#125;            dps[origin + 1] = nums[i];        &#125;        return len;    &#125; &#125;</code></pre><h2 id="复杂度分析"><a href="#复杂度分析" class="headerlink" title="复杂度分析"></a>复杂度分析</h2><h3 id="思路1时间复杂度"><a href="#思路1时间复杂度" class="headerlink" title="思路1时间复杂度"></a>思路1时间复杂度</h3><p>$O(n^2)$</p><h3 id="思路1空间复杂度"><a href="#思路1空间复杂度" class="headerlink" title="思路1空间复杂度"></a>思路1空间复杂度</h3><p>$O(n)$</p><h3 id="思路2时间复杂度"><a href="#思路2时间复杂度" class="headerlink" title="思路2时间复杂度"></a>思路2时间复杂度</h3><p>$O(nlogn)$</p><h3 id="思路2空间复杂度"><a href="#思路2空间复杂度" class="headerlink" title="思路2空间复杂度"></a>思路2空间复杂度</h3><p>$O(n)$</p>]]></content>
      
      
      <categories>
          
          <category> Leetcode </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Leetcode </tag>
            
            <tag> Medium </tag>
            
            <tag> 动态规划 </tag>
            
            <tag> 贪心 </tag>
            
            <tag> 二分查找 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Leetcode:279. 完全平方数</title>
      <link href="/2020/04/23/leetcode-279-wan-quan-ping-fang-shu/"/>
      <url>/2020/04/23/leetcode-279-wan-quan-ping-fang-shu/</url>
      
        <content type="html"><![CDATA[<h1 id="Leetcode-279-完全平方数"><a href="#Leetcode-279-完全平方数" class="headerlink" title="Leetcode:279. 完全平方数"></a><a href="https://leetcode-cn.com/problems/perfect-squares/">Leetcode:279. 完全平方数</a></h1><h2 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h2><pre><code>给定正整数 n，找到若干个完全平方数（比如 1, 4, 9, 16, ...）使得它们的和等于 n。你需要让组成和的完全平方数的个数最少。</code></pre><h3 id="示例-1"><a href="#示例-1" class="headerlink" title="示例 1:"></a>示例 1:</h3><pre><code>输入: n = 12输出: 3 解释: 12 = 4 + 4 + 4.</code></pre><h3 id="示例-2"><a href="#示例-2" class="headerlink" title="示例 2:"></a>示例 2:</h3><pre><code>输入: n = 13输出: 2解释: 13 = 4 + 9.</code></pre><h2 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h2><h3 id="思路1-DP-可开方数保存"><a href="#思路1-DP-可开方数保存" class="headerlink" title="思路1 DP+可开方数保存"></a>思路1 DP+可开方数保存</h3><p>保存可开方数，然后使用$dp[i] &#x3D; min(dp[i - sqrtNum[j]] + 1)　j \in 开方列表大小$</p><h3 id="思路2-贪心法"><a href="#思路2-贪心法" class="headerlink" title="思路2 贪心法"></a>思路2 贪心法</h3><p>使用一个canSqure函数依次计算是否可以由count个可开方数字加和得到，在这个过程依旧要保存可开方数，用于计算递归计算count - 1个组合而成</p><h3 id="思路3-贪心-BFS"><a href="#思路3-贪心-BFS" class="headerlink" title="思路3 贪心+BFS"></a>思路3 贪心+BFS</h3><p><a href="https://leetcode-cn.com/problems/perfect-squares/solution/wan-quan-ping-fang-shu-by-leetcode/">贪心+BFS</a>基本思路是思路2的n元树BFS</p><h3 id="思路4-数学公式"><a href="#思路4-数学公式" class="headerlink" title="思路4 数学公式"></a>思路4 数学公式</h3><p>每个自然数都可以表示为四个整数平方和，且$n!&#x3D; 4^k(8m + 7) &lt;&#x3D;&#x3D;&gt; n &#x3D; a^2 + b^2 + c^2$,所以只需要判断能否表示为三个可开方数之和，如果不能则为4，然后判断是否可以由两个开方数组合而成以及一个可开方数</p><h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><h3 id="代码1"><a href="#代码1" class="headerlink" title="代码1"></a>代码1</h3><pre class=" language-Java"><code class="language-Java">class Solution &#123;    public int numSquares(int n) &#123;        if (n == 0 || n == 1)&#123;            return 1;        &#125;        int[] dps = new int[n + 1];        ArrayList<Integer> sqrtNums = new ArrayList<>();        for(int i = 0; i < n + 1; i++)&#123;            if (i >= 1 && i * i <= n)&#123;                sqrtNums.add(i * i);            &#125;            dps[i] = i;        &#125;        int sqrtSize = sqrtNums.size();        for(int i = 2; i <= n; i++)&#123;            int tempNum = 1;            for(int j = 0; j < sqrtSize && i - sqrtNums.get(j) >= 0; j++)&#123;                dps[i] = Math.min(dps[i], dps[i - sqrtNums.get(j)] + 1);            &#125;        &#125;        return dps[n];    &#125;&#125;</code></pre><h3 id="代码2"><a href="#代码2" class="headerlink" title="代码2"></a>代码2</h3><pre class=" language-Java"><code class="language-Java">class Solution &#123;    private Set<Integer> squareSet;        public int numSquares(int n) &#123;        if (n == 0 || n == 1)&#123;            return 1;        &#125;        squareSet = new HashSet<>();        for(int i = 0; i * i <= n; i++)&#123;            squareSet.add(i * i);        &#125;                for(int i = 1; i <= n; i++)&#123;            if (canSquare(n, i))&#123;                return i;            &#125;        &#125;        return n;    &#125;        private boolean canSquare(int n, int count)&#123;        if (n < 0)&#123;            return false;        &#125;        if (count == 1)&#123;            return squareSet.contains(n);        &#125;        for(int num: squareSet)&#123;            if (canSquare(n - num, count - 1))&#123;                return true;            &#125;        &#125;        return false;    &#125;&#125;</code></pre><h3 id="代码4"><a href="#代码4" class="headerlink" title="代码4"></a>代码4</h3><pre class=" language-Java"><code class="language-Java">class Solution &#123;    public int numSquares(int n) &#123;        while (n % 4 == 0)&#123;            n /= 4;        &#125;        if (n % 8 == 7)&#123;            return 4;        &#125;        if (isSquare(n))&#123;            return 1;        &#125;        for(int i = 1; i * i <= n; i++)&#123;            if (isSquare(n - i * i))&#123;                return 2;            &#125;        &#125;        return 3;    &#125;        private boolean isSquare(int n)&#123;        int getSqrt = (int)Math.sqrt(n);        return getSqrt * getSqrt == n;    &#125;&#125;</code></pre><h2 id="复杂度分析"><a href="#复杂度分析" class="headerlink" title="复杂度分析"></a>复杂度分析</h2><h3 id="思路1时间复杂度"><a href="#思路1时间复杂度" class="headerlink" title="思路1时间复杂度"></a>思路1时间复杂度</h3><p>$ O(n\sqrt{n}) $</p><h3 id="思路1空间复杂度"><a href="#思路1空间复杂度" class="headerlink" title="思路1空间复杂度"></a>思路1空间复杂度</h3><p>$O(n)$</p><h3 id="思路2时间复杂度"><a href="#思路2时间复杂度" class="headerlink" title="思路2时间复杂度"></a>思路2时间复杂度</h3><p>$O(n^{\frac{h}{2}})$,h为递归次数，h可看作是n元树，n为可开方数量，然后最多层数为4根据后续证明</p><h3 id="思路2空间复杂度"><a href="#思路2空间复杂度" class="headerlink" title="思路2空间复杂度"></a>思路2空间复杂度</h3><p>$O(\sqrt{n})$</p><h3 id="思路3同思路2"><a href="#思路3同思路2" class="headerlink" title="思路3同思路2"></a>思路3同思路2</h3><h3 id="思路4时间复杂度"><a href="#思路4时间复杂度" class="headerlink" title="思路4时间复杂度"></a>思路4时间复杂度</h3><p>$O(\sqrt{n})$</p><h3 id="思路4空间复杂度"><a href="#思路4空间复杂度" class="headerlink" title="思路4空间复杂度"></a>思路4空间复杂度</h3><p>$O(1)$</p>]]></content>
      
      
      <categories>
          
          <category> Leetcode </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Leetcode </tag>
            
            <tag> Medium </tag>
            
            <tag> BFS </tag>
            
            <tag> 动态规划 </tag>
            
            <tag> 数学公式 </tag>
            
            <tag> 贪心 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Leetcode:198. 打家劫舍</title>
      <link href="/2020/04/22/leetcode-198-da-jia-jie-she/"/>
      <url>/2020/04/22/leetcode-198-da-jia-jie-she/</url>
      
        <content type="html"><![CDATA[<h1 id="Leetcode-198-打家劫舍"><a href="#Leetcode-198-打家劫舍" class="headerlink" title="Leetcode:198. 打家劫舍"></a><a href="https://leetcode-cn.com/problems/house-robber/">Leetcode:198. 打家劫舍</a></h1><h2 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h2><pre><code>你是一个专业的小偷，计划偷窃沿街的房屋。每间房内都藏有一定的现金，影响你偷窃的唯一制约因素就是相邻的房屋装有相互连通的防盗系统，如果两间相邻的房屋在同一晚上被小偷闯入，系统会自动报警。给定一个代表每个房屋存放金额的非负整数数组，计算你在不触动警报装置的情况下，能够偷窃到的最高金额。</code></pre><h3 id="示例-1"><a href="#示例-1" class="headerlink" title="示例 1:"></a>示例 1:</h3><pre><code>输入: [1,2,3,1]输出: 4解释: 偷窃 1 号房屋 (金额 = 1) ，然后偷窃 3 号房屋 (金额 = 3)。     偷窃到的最高金额 = 1 + 3 = 4 。</code></pre><h3 id="示例-2"><a href="#示例-2" class="headerlink" title="示例 2:"></a>示例 2:</h3><pre><code>输入: [2,7,9,3,1]输出: 12解释: 偷窃 1 号房屋 (金额 = 2), 偷窃 3 号房屋 (金额 = 9)，接着偷窃 5 号房屋 (金额 = 1)。     偷窃到的最高金额 = 2 + 9 + 1 = 12 。</code></pre><h2 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h2><h3 id="思路1-DP保存所有状态"><a href="#思路1-DP保存所有状态" class="headerlink" title="思路1 DP保存所有状态"></a>思路1 DP保存所有状态</h3><p>DP保存所有状态，然后根据$dps[i] &#x3D; max(dps[i], nums[i] + dps[j])　j\in[0, i-2]$进行状态更新</p><h3 id="思路2-DP只保存前三个状态"><a href="#思路2-DP只保存前三个状态" class="headerlink" title="思路2 DP只保存前三个状态"></a>思路2 DP只保存前三个状态</h3><p>DP保存前三个状态，然后根据$dps[i] &#x3D; max(nums[i] + dps[i - 2], nums[i] + dps[i - 3])$进行状态更新</p><h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><h3 id="代码1"><a href="#代码1" class="headerlink" title="代码1"></a>代码1</h3><pre class=" language-Java"><code class="language-Java">class Solution &#123;    public int rob(int[] nums) &#123;        if (nums == null || nums.length == 0)&#123;            return 0;        &#125;        if (nums.length == 1)&#123;            return nums[0];        &#125;        int[] dps = new int[nums.length];        for(int i = 0; i < nums.length; i++)&#123;            if (i < 2)&#123;                dps[i] = nums[i];            &#125;else if(i == 2)&#123;                dps[i] = nums[i] + nums[0];            &#125;else&#123;                dps[i] = nums[i] + Math.max(dps[i - 2], dps[i - 3]);            &#125;        &#125;        return Math.max(dps[nums.length - 1], dps[nums.length - 2]);    &#125;&#125;</code></pre><h3 id="代码2"><a href="#代码2" class="headerlink" title="代码2"></a>代码2</h3><pre class=" language-Java"><code class="language-Java">class Solution &#123;    public int rob(int[] nums) &#123;        if (nums == null || nums.length == 0)&#123;            return 0;        &#125;        int pre = 0;        int cur = 0;        for(int num: nums)&#123;            int temp = cur;            cur = Math.max(cur, num + pre);            pre = temp;        &#125;                return cur;    &#125;&#125;</code></pre><h2 id="复杂度分析"><a href="#复杂度分析" class="headerlink" title="复杂度分析"></a>复杂度分析</h2><h3 id="思路1时间复杂度"><a href="#思路1时间复杂度" class="headerlink" title="思路1时间复杂度"></a>思路1时间复杂度</h3><p>$O(n)$</p><h3 id="思路1空间复杂度"><a href="#思路1空间复杂度" class="headerlink" title="思路1空间复杂度"></a>思路1空间复杂度</h3><p>$O(n)$</p><h3 id="思路2时间复杂度"><a href="#思路2时间复杂度" class="headerlink" title="思路2时间复杂度"></a>思路2时间复杂度</h3><p>$O(n)$</p><h3 id="思路2空间复杂度"><a href="#思路2空间复杂度" class="headerlink" title="思路2空间复杂度"></a>思路2空间复杂度</h3><p>$O(1)$</p>]]></content>
      
      
      <categories>
          
          <category> Leetcode </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Leetcode </tag>
            
            <tag> 动态规划 </tag>
            
            <tag> Easy </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Leetcode:128. 最长连续序列</title>
      <link href="/2020/04/22/leetcode-128-zui-chang-lian-xu-xu-lie/"/>
      <url>/2020/04/22/leetcode-128-zui-chang-lian-xu-xu-lie/</url>
      
        <content type="html"><![CDATA[<h1 id="Leetcode-128-最长连续序列"><a href="#Leetcode-128-最长连续序列" class="headerlink" title="Leetcode:128. 最长连续序列"></a><a href="https://leetcode-cn.com/problems/longest-consecutive-sequence/">Leetcode:128. 最长连续序列</a></h1><h2 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h2><pre><code>给定一个未排序的整数数组，找出最长连续序列的长度。要求算法的时间复杂度为 O(n)。</code></pre><h3 id="示例"><a href="#示例" class="headerlink" title="示例:"></a>示例:</h3><pre><code>输入: [100, 4, 200, 1, 3, 2]输出: 4解释: 最长连续序列是 [1, 2, 3, 4]。它的长度为 4。</code></pre><h2 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h2><h3 id="思路1-排序-遍历"><a href="#思路1-排序-遍历" class="headerlink" title="思路1 排序+遍历"></a>思路1 排序+遍历</h3><p>在对数组进行排序后，依次遍历计算最长的连续序列，注意相等情况</p><h3 id="思路2-hash表-初始值才遍历"><a href="#思路2-hash表-初始值才遍历" class="headerlink" title="思路2 hash表+初始值才遍历"></a>思路2 hash表+初始值才遍历</h3><p>使用一个hash表记录数组中存在的数字，每次都只计算当前数字在且该数字减一不在(避免重复遍历)，然后依次叠加计算最长连续序列</p><h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><h3 id="代码1"><a href="#代码1" class="headerlink" title="代码1"></a>代码1</h3><pre class=" language-Java"><code class="language-Java">class Solution &#123;    public int longestConsecutive(int[] nums) &#123;        if (nums == null || nums.length == 0)&#123;            return 0;        &#125;                Arrays.sort(nums);        int result = 1;        int temp = 1;        for(int i = 1; i < nums.length; i++)&#123;            if (nums[i] - nums[i - 1] == 1)&#123;                temp += 1;                if (temp > result)&#123;                    result = temp;                &#125;            &#125;else if(nums[i] != nums[i - 1])&#123;                temp = 1;             &#125;        &#125;                return result;    &#125;&#125;</code></pre><h3 id="代码2"><a href="#代码2" class="headerlink" title="代码2"></a>代码2</h3><pre class=" language-Java"><code class="language-Java">class Solution &#123;    public int longestConsecutive(int[] nums) &#123;        if (nums == null || nums.length == 0)&#123;            return 0;        &#125;        int result = 1;        int temp = 1;                HashSet<Integer> numSet = new HashSet<>();        for(int num: nums)&#123;            numSet.add(num);        &#125;                for(int num: nums)&#123;            if (!numSet.contains(num - 1))&#123;                temp = 1;                while (numSet.contains(num + 1))&#123;                    temp += 1;                    num ++;                &#125;                if (temp > result)&#123;                    result = temp;                &#125;            &#125;        &#125;        return result;    &#125;&#125;</code></pre><h2 id="复杂度分析"><a href="#复杂度分析" class="headerlink" title="复杂度分析"></a>复杂度分析</h2><h3 id="思路1时间复杂度"><a href="#思路1时间复杂度" class="headerlink" title="思路1时间复杂度"></a>思路1时间复杂度</h3><p>$O(nlog(n))$</p><h3 id="思路1空间复杂度"><a href="#思路1空间复杂度" class="headerlink" title="思路1空间复杂度"></a>思路1空间复杂度</h3><p>$O(n)$若看作排序需要n的空间</p><h3 id="思路2时间复杂度"><a href="#思路2时间复杂度" class="headerlink" title="思路2时间复杂度"></a>思路2时间复杂度</h3><p>$O(n)$</p><h3 id="思路2空间复杂度"><a href="#思路2空间复杂度" class="headerlink" title="思路2空间复杂度"></a>思路2空间复杂度</h3><p>$O(n)$</p>]]></content>
      
      
      <categories>
          
          <category> Leetcode </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Leetcode </tag>
            
            <tag> Hard </tag>
            
            <tag> 排序 </tag>
            
            <tag> 哈希表 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Leetcode:124. 二叉树中的最大路径和</title>
      <link href="/2020/04/22/leetcode-124-er-cha-shu-zhong-de-zui-da-lu-jing-he/"/>
      <url>/2020/04/22/leetcode-124-er-cha-shu-zhong-de-zui-da-lu-jing-he/</url>
      
        <content type="html"><![CDATA[<h1 id="Leetcode-124-二叉树中的最大路径和"><a href="#Leetcode-124-二叉树中的最大路径和" class="headerlink" title="Leetcode:124. 二叉树中的最大路径和"></a><a href="https://leetcode-cn.com/problems/binary-tree-maximum-path-sum/">Leetcode:124. 二叉树中的最大路径和</a></h1><h2 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h2><pre><code>给定一个非空二叉树，返回其最大路径和。本题中，路径被定义为一条从树中任意节点出发，达到任意节点的序列。该路径至少包含一个节点，且不一定经过根节点。</code></pre><h3 id="示例-1"><a href="#示例-1" class="headerlink" title="示例 1:"></a>示例 1:</h3><pre><code>输入: [1,2,3]    1    / \    2   3输出: 6</code></pre><h3 id="示例-2"><a href="#示例-2" class="headerlink" title="示例 2:"></a>示例 2:</h3><pre><code>输入: [-10,9,20,null,null,15,7]   -10   / \  9  20    /  \   15   7输出: 42</code></pre><h2 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h2><h3 id="思路1"><a href="#思路1" class="headerlink" title="思路1"></a>思路1</h3><p>后序遍历递归实现，最大路径只能为node+left son + right son或node + left son + node的父节点或node + right son + 父节点，所以在具体实现中后序遍历二叉数，并分别计算比较这三个值即可，递归得到以left son为最高节点的最大路径和right son为最高节点的路径和</p><h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><h3 id="代码1"><a href="#代码1" class="headerlink" title="代码1"></a>代码1</h3><pre class=" language-Java"><code class="language-Java">class Solution &#123;    private int result = Integer.MIN_VALUE;        public int maxPathSum(TreeNode root) &#123;        maxPathCount(root);        return result;    &#125;        private int maxPathCount(TreeNode node)&#123;        if (node == null)&#123;            return 0;        &#125;                int leftSum = Math.max(maxPathCount(node.left), 0);        int rightSum = Math.max(maxPathCount(node.right), 0);                int newSum = node.val + leftSum + rightSum;        result = Math.max(result, newSum);                return node.val + Math.max(leftSum, rightSum);    &#125;&#125;</code></pre><h2 id="复杂度分析"><a href="#复杂度分析" class="headerlink" title="复杂度分析"></a>复杂度分析</h2><h3 id="思路1时间复杂度"><a href="#思路1时间复杂度" class="headerlink" title="思路1时间复杂度"></a>思路1时间复杂度</h3><p>$O(n)$</p><h3 id="思路1空间复杂度"><a href="#思路1空间复杂度" class="headerlink" title="思路1空间复杂度"></a>思路1空间复杂度</h3><p>$O(logn)$</p>]]></content>
      
      
      <categories>
          
          <category> Leetcode </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Leetcode </tag>
            
            <tag> Hard </tag>
            
            <tag> 递归 </tag>
            
            <tag> 后序遍历 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Leetcode:395. 至少有K个重复字符的最长子串</title>
      <link href="/2020/04/21/leetcode-395-zhi-shao-you-k-ge-chong-fu-zi-fu-de-zui-chang-zi-chuan/"/>
      <url>/2020/04/21/leetcode-395-zhi-shao-you-k-ge-chong-fu-zi-fu-de-zui-chang-zi-chuan/</url>
      
        <content type="html"><![CDATA[<h1 id="Leetcode-395-至少有K个重复字符的最长子串"><a href="#Leetcode-395-至少有K个重复字符的最长子串" class="headerlink" title="Leetcode:395. 至少有K个重复字符的最长子串"></a><a href="https://leetcode-cn.com/problems/longest-substring-with-at-least-k-repeating-characters/">Leetcode:395. 至少有K个重复字符的最长子串</a></h1><h2 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h2><pre><code>找到给定字符串（由小写字符组成）中的最长子串 T ， 要求 T 中的每一字符出现次数都不少于 k 。输出 T 的长度。</code></pre><h3 id="示例-1"><a href="#示例-1" class="headerlink" title="示例 1:"></a>示例 1:</h3><pre><code>输入:s = &quot;aaabb&quot;, k = 3输出:3最长子串为 &quot;aaa&quot; ，其中 &#39;a&#39; 重复了 3 次。</code></pre><h3 id="示例-2"><a href="#示例-2" class="headerlink" title="示例 2:"></a>示例 2:</h3><pre><code>输入:s = &quot;ababbc&quot;, k = 2输出:5最长子串为 &quot;ababb&quot; ，其中 &#39;a&#39; 重复了 2 次， &#39;b&#39; 重复了 3 次。</code></pre><h2 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h2><h3 id="思路1"><a href="#思路1" class="headerlink" title="思路1"></a>思路1</h3><p>计算字符串中每个字符出现次数，然后是用双指针去除前后不满足的字符。中间字符串遍历，如有少于k次地则切割分治分别计算，并取最大值</p><h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><h3 id="代码1"><a href="#代码1" class="headerlink" title="代码1"></a>代码1</h3><pre class=" language-Java"><code class="language-Java">class Solution &#123;    public int longestSubstring(String s, int k) &#123;        if (s == null || s.length() == 0 || k > s.length())&#123;            return 0;        &#125;        if (k < 2)&#123;            return s.length();        &#125;                return subStringHelper(s, 0, s.length() - 1, k);    &#125;            private int subStringHelper(String s, int start, int end, int k)&#123;        if (end - start + 1 < k)&#123;            return 0;        &#125;                int[] chNum = new int[26];        for(int i = start; i <= end; i++)&#123;            chNum[s.charAt(i) - 'a'] += 1;        &#125;        while(end - start + 1 >= k && chNum[s.charAt(start) - 'a'] < k)&#123;            start++;        &#125;        while(end - start + 1 >= k && chNum[s.charAt(end) - 'a'] < k)&#123;            end--;        &#125;                if (end - start + 1 < k)&#123;            return 0;        &#125;        for(int i = start; i <= end; i++)&#123;            if (chNum[s.charAt(i) - 'a'] < k)&#123;                return Math.max(subStringHelper(s, start, i - 1, k), subStringHelper(s, i + 1, end, k));            &#125;        &#125;        return end - start + 1;    &#125;&#125;</code></pre><h2 id="复杂度分析"><a href="#复杂度分析" class="headerlink" title="复杂度分析"></a>复杂度分析</h2><h3 id="时间复杂度"><a href="#时间复杂度" class="headerlink" title="时间复杂度"></a>时间复杂度</h3><p>$O(n)$</p><h3 id="空间复杂度"><a href="#空间复杂度" class="headerlink" title="空间复杂度"></a>空间复杂度</h3><p>$O(n)$</p>]]></content>
      
      
      <categories>
          
          <category> Leetcode </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Leetcode </tag>
            
            <tag> Medium </tag>
            
            <tag> 分治 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Leetcode:315. 计算右侧小于当前元素的个数</title>
      <link href="/2020/04/20/leetcode-315-ji-suan-you-ce-xiao-yu-dang-qian-yuan-su-de-ge-shu/"/>
      <url>/2020/04/20/leetcode-315-ji-suan-you-ce-xiao-yu-dang-qian-yuan-su-de-ge-shu/</url>
      
        <content type="html"><![CDATA[<h1 id="Leetcode-315-计算右侧小于当前元素的个数"><a href="#Leetcode-315-计算右侧小于当前元素的个数" class="headerlink" title="Leetcode:315. 计算右侧小于当前元素的个数"></a><a href="https://leetcode-cn.com/problems/count-of-smaller-numbers-after-self/">Leetcode:315. 计算右侧小于当前元素的个数</a></h1><h2 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h2><pre><code>给定一个整数数组 nums，按要求返回一个新数组 counts。数组 counts 有该性质： counts[i] 的值是  nums[i] 右侧小于 nums[i] 的元素的数量。</code></pre><h3 id="示例"><a href="#示例" class="headerlink" title="示例:"></a>示例:</h3><pre><code>输入: [5,2,6,1]输出: [2,1,1,0] 解释:5 的右侧有 2 个更小的元素 (2 和 1).2 的右侧仅有 1 个更小的元素 (1).6 的右侧有 1 个更小的元素 (1).1 的右侧有 0 个更小的元素.</code></pre><h2 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h2><h3 id="思路1-暴力遍历比较"><a href="#思路1-暴力遍历比较" class="headerlink" title="思路1 暴力遍历比较"></a>思路1 暴力遍历比较</h3><p>直接对每个位置的数和之后的数比较</p><h3 id="思路2-归并排序-索引数组"><a href="#思路2-归并排序-索引数组" class="headerlink" title="思路2 归并排序+索引数组"></a>思路2 归并排序+索引数组</h3><h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><h3 id="代码1"><a href="#代码1" class="headerlink" title="代码1"></a>代码1</h3><pre class=" language-Java"><code class="language-Java">class Solution &#123;    public List<Integer> countSmaller(int[] nums) &#123;        ArrayList<Integer> result = new ArrayList<>();        for(int i = 0; i < nums.length; i++)&#123;            int count = 0;            for(int j = i + 1; j < nums.length; j++)&#123;                if (nums[i] > nums[j])&#123;                    count += 1;                &#125;            &#125;            result.add(count);        &#125;        return result;    &#125;&#125;</code></pre><h3 id="代码2"><a href="#代码2" class="headerlink" title="代码2"></a>代码2</h3><pre class=" language-Java"><code class="language-Java">class Solution &#123;    private int[] indexs;    private int[] counters;    private int[] temp;        public List<Integer> countSmaller(int[] nums) &#123;        ArrayList<Integer> result = new ArrayList<>();        indexs = new int[nums.length];        counters = new int[nums.length];        temp = new int[nums.length];        for(int i = 0; i < nums.length; i++)&#123;            indexs[i] = i;            counters[i] = 0;        &#125;        mergeSort(nums, 0, nums.length - 1);        for(int i = 0; i < counters.length; i++)&#123;            result.add(counters[i]);        &#125;        return result;    &#125;            private void mergeSort(int[] nums, int left, int right)&#123;        if (left < right)&#123;            int mid = (left + right) / 2;            mergeSort(nums, left, mid);            mergeSort(nums, mid + 1, right);            mergeHelper(nums, left, mid, right);        &#125;    &#125;        private void mergeHelper(int[] nums, int left, int mid , int right)&#123;        int tempIndex = left;        int leftIndex = left;        int rightIndex = mid + 1;        while (leftIndex <= mid && rightIndex <= right)&#123;            if (nums[indexs[leftIndex]] <= nums[indexs[rightIndex]])&#123;                temp[tempIndex] = indexs[leftIndex];                counters[indexs[leftIndex]] += rightIndex - mid - 1;                leftIndex++;            &#125;else&#123;                temp[tempIndex] = indexs[rightIndex];                rightIndex++;            &#125;            tempIndex++;        &#125;        while(leftIndex <= mid)&#123;            temp[tempIndex] = indexs[leftIndex];            counters[indexs[leftIndex]] += rightIndex - mid - 1;            leftIndex++;            tempIndex++;        &#125;        while(rightIndex <= right)&#123;            temp[tempIndex] = indexs[rightIndex];            rightIndex++;            tempIndex++;        &#125;        for(int i = left; i <= right; i++)&#123;            indexs[i] = temp[i];        &#125;    &#125;&#125;</code></pre><h2 id="复杂度分析"><a href="#复杂度分析" class="headerlink" title="复杂度分析"></a>复杂度分析</h2><h3 id="思路1时间复杂度"><a href="#思路1时间复杂度" class="headerlink" title="思路1时间复杂度"></a>思路1时间复杂度</h3><p>$O(n^2)$</p><h3 id="思路1空间复杂度"><a href="#思路1空间复杂度" class="headerlink" title="思路1空间复杂度"></a>思路1空间复杂度</h3><p>$O(n)$</p><h3 id="思路2时间复杂度"><a href="#思路2时间复杂度" class="headerlink" title="思路2时间复杂度"></a>思路2时间复杂度</h3><p>$O(nlog(n))$</p><h3 id="思路2空间复杂度"><a href="#思路2空间复杂度" class="headerlink" title="思路2空间复杂度"></a>思路2空间复杂度</h3><p>$O(n)$</p>]]></content>
      
      
      <categories>
          
          <category> Leetcode </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Leetcode </tag>
            
            <tag> Hard </tag>
            
            <tag> 逆序对 </tag>
            
            <tag> 归并排序 </tag>
            
            <tag> 索引数组 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Leetcode:218. 天际线问题</title>
      <link href="/2020/04/19/leetcode-218-tian-ji-xian-wen-ti/"/>
      <url>/2020/04/19/leetcode-218-tian-ji-xian-wen-ti/</url>
      
        <content type="html"><![CDATA[<h1 id="Leetcode-218-天际线问题"><a href="#Leetcode-218-天际线问题" class="headerlink" title="Leetcode: 218. 天际线问题"></a><a href="https://leetcode-cn.com/problems/the-skyline-problem/">Leetcode: 218. 天际线问题</a></h1><h2 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h2><pre><code>城市的天际线是从远处观看该城市中所有建筑物形成的轮廓的外部轮廓。现在，假设您获得了城市风光照片（图A）上显示的所有建筑物的位置和高度，请编写一个程序以输出由这些建筑物形成的天际线（图B）。每个建筑物的几何信息用三元组 [Li，Ri，Hi] 表示，其中 Li 和 Ri 分别是第 i 座建筑物左右边缘的 x 坐标，Hi 是其高度。可以保证 0 ≤ Li, Ri ≤ INT_MAX, 0 &lt; Hi ≤ INT_MAX 和 Ri - Li &gt; 0。您可以假设所有建筑物都是在绝对平坦且高度为 0 的表面上的完美矩形。例如，图A中所有建筑物的尺寸记录为：[ [2 9 10], [3 7 15], [5 12 12], [15 20 10], [19 24 8] ] 。输出是以 [ [x1,y1], [x2, y2], [x3, y3], ... ] 格式的“关键点”（图B中的红点）的列表，它们唯一地定义了天际线。关键点是水平线段的左端点。请注意，最右侧建筑物的最后一个关键点仅用于标记天际线的终点，并始终为零高度。此外，任何两个相邻建筑物之间的地面都应被视为天际线轮廓的一部分。例如，图B中的天际线应该表示为：[ [2 10], [3 15], [7 12], [12 0], [15 10], [20 8], [24, 0] ]。</code></pre><h3 id="说明"><a href="#说明" class="headerlink" title="说明:"></a>说明:</h3><pre><code>任何输入列表中的建筑物数量保证在 [0, 10000] 范围内。输入列表已经按左 x 坐标 Li  进行升序排列。输出列表必须按 x 位排序。输出天际线中不得有连续的相同高度的水平线。例如 [...[2 3], [4 5], [7 5], [11 5], [12 7]...] 是不正确的答案；三条高度为 5 的线应该在最终输出中合并为一个：[...[2 3], [4 5], [12 7], ...]</code></pre><h2 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h2><h3 id="思路1"><a href="#思路1" class="headerlink" title="思路1"></a>思路1</h3><p>使用分治法，类似与插入排序思路。重点在于看到单个建筑物的应该如何存储。如[1, 5, 9]存为[1, 9],[5, 0],即分好左右节点.<a href="https://leetcode-cn.com/problems/the-skyline-problem/solution/tian-ji-xian-wen-ti-by-leetcode/">参考</a></p><h3 id="思路2"><a href="#思路2" class="headerlink" title="思路2"></a>思路2</h3><p>使用最大优先级队列保存最高点，然后根据左右节点以类似入栈出栈形式得到结果。关键在于存储左右节点</p><h3 id="思路3"><a href="#思路3" class="headerlink" title="思路3"></a>思路3</h3><p>可以使用TreeMap使得时间复杂度为$O(nlogn)$<a href="https://leetcode-cn.com/problems/the-skyline-problem/solution/xiang-xi-tong-su-de-si-lu-fen-xi-duo-jie-fa-by--45/">思路</a></p><h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><h3 id="代码1"><a href="#代码1" class="headerlink" title="代码1"></a>代码1</h3><pre class=" language-Java"><code class="language-Java">class Solution &#123;    public List<List<Integer>> getSkyline(int[][] buildings) &#123;        List<List<Integer>> result = new ArrayList<>();        int n = buildings.length;                if (n == 0)&#123;return result;&#125;        if (n == 1)&#123;            result.add(new ArrayList<Integer>() &#123;&#123;add(buildings[0][0]); add(buildings[0][2]);&#125;&#125;);            result.add(new ArrayList<Integer>() &#123;&#123;add(buildings[0][1]); add(0);&#125;&#125;);            return result;        &#125;                List<List<Integer>> left, right;        left = getSkyline(Arrays.copyOfRange(buildings,0, n / 2));        right = getSkyline(Arrays.copyOfRange(buildings, n/2, n));                return mergeResult(left, right);    &#125;        private List<List<Integer>> mergeResult(List<List<Integer>> left, List<List<Integer>> right)&#123;        int ls = 0, rs = 0;        int le = left.size(), re = right.size();        int leftY = 0, rightY = 0, curY = 0;        int x, maxY;        List<List<Integer>> result = new ArrayList<>();                while (ls < le && rs < re)&#123;            List<Integer> leftP = left.get(ls);            List<Integer> rightP = right.get(rs);                        if (leftP.get(0) < rightP.get(0))&#123;                x = leftP.get(0);                ls ++;                leftY = leftP.get(1);            &#125;else&#123;                x = rightP.get(0);                rs ++;                rightY = rightP.get(1);            &#125;            maxY = Math.max(leftY, rightY);            if (curY != maxY)&#123;                updateResult(result, x, maxY);                curY = maxY;            &#125;        &#125;                addRest(result, left, ls, le, curY);        addRest(result, right, rs, re, curY);        return result;      &#125;        private void updateResult(List<List<Integer>> result, int x, int y)&#123;        if (result.isEmpty() || result.get(result.size() - 1).get(0) != x)&#123;            result.add(new ArrayList<Integer>()&#123;&#123;add(x); add(y);&#125;&#125;);        &#125;else&#123;            result.get(result.size() - 1).set(1, y);        &#125;    &#125;        private void addRest(List<List<Integer>> result, List<List<Integer>> left, int s, int e, int curY)&#123;        while (s < e)&#123;            List<Integer> point = left.get(s);            int x = point.get(0);            int y = point.get(1);            s ++;                        if (y != curY)&#123;                updateResult(result, x, y);                curY = y;            &#125;        &#125;    &#125;    &#125;</code></pre><h3 id="代码2"><a href="#代码2" class="headerlink" title="代码2"></a>代码2</h3><pre class=" language-Java"><code class="language-Java">class Solution &#123;    public List<List<Integer>> getSkyline(int[][] buildings) &#123;        List<List<Integer>> result = new ArrayList<>();        if (buildings.length == 0)&#123;            return result;        &#125;        List<List<Integer>> marks = new ArrayList<>();        for(int[] nums: buildings)&#123;            marks.add(new ArrayList<Integer>()&#123;&#123;add(nums[0]);add(-nums[2]);&#125;&#125;);            marks.add(new ArrayList<Integer>()&#123;&#123;add(nums[1]); add(nums[2]);&#125;&#125;);        &#125;                Collections.sort(marks, new Comparator<List<Integer>>()&#123;            @Override            public int compare(List<Integer> o1, List<Integer> o2)&#123;                int x1 = o1.get(0);                int x2 = o2.get(0);                int y1 = o1.get(1);                int y2 = o2.get(1);                if (x1 != x2)&#123;                    return x1 - x2;                &#125;else&#123;                    return y1 - y2;                &#125;            &#125;        &#125;);                Queue<Integer> queue = new PriorityQueue<Integer>(new Comparator<Integer>()&#123;            @Override            public int compare(Integer o1, Integer o2)&#123;                return o2 - o1;            &#125;        &#125;);        queue.offer(0);        int preY = 0;        for(List<Integer> nums: marks)&#123;            int x = nums.get(0);            int y = nums.get(1);                        if (y < 0)&#123;                queue.offer(-y);            &#125;else&#123;                queue.remove(y);            &#125;            int curMax = queue.peek();            if (preY != curMax)&#123;                result.add(new ArrayList<Integer>()&#123;&#123;add(x); add(curMax);&#125;&#125;);                preY = curMax;            &#125;        &#125;        return result;    &#125;&#125;</code></pre><h2 id="复杂度分析"><a href="#复杂度分析" class="headerlink" title="复杂度分析"></a>复杂度分析</h2><h3 id="思路1时间复杂度"><a href="#思路1时间复杂度" class="headerlink" title="思路1时间复杂度"></a>思路1时间复杂度</h3><p>$O(nlogn)$</p><h3 id="思路1空间复杂度"><a href="#思路1空间复杂度" class="headerlink" title="思路1空间复杂度"></a>思路1空间复杂度</h3><p>$O(n)$</p><h3 id="思路2时间复杂度"><a href="#思路2时间复杂度" class="headerlink" title="思路2时间复杂度"></a>思路2时间复杂度</h3><p>$O(n^2)$</p><h3 id="思路2空间复杂度"><a href="#思路2空间复杂度" class="headerlink" title="思路2空间复杂度"></a>思路2空间复杂度</h3><p>$O(n)$</p>]]></content>
      
      
      <categories>
          
          <category> Leetcode </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Leetcode </tag>
            
            <tag> Hard </tag>
            
            <tag> 分治 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Leetcode:287. 寻找重复数</title>
      <link href="/2020/04/17/leetcode-287-xun-zhao-chong-fu-shu/"/>
      <url>/2020/04/17/leetcode-287-xun-zhao-chong-fu-shu/</url>
      
        <content type="html"><![CDATA[<h1 id="Leetcode-287-寻找重复数"><a href="#Leetcode-287-寻找重复数" class="headerlink" title="Leetcode:287. 寻找重复数"></a><a href="https://leetcode-cn.com/problems/find-the-duplicate-number/">Leetcode:287. 寻找重复数</a></h1><h2 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h2><pre><code>给定一个包含 n + 1 个整数的数组 nums，其数字都在 1 到 n 之间（包括 1 和 n），可知至少存在一个重复的整数。假设只有一个重复的整数，找出这个重复的数。</code></pre><h3 id="示例-1"><a href="#示例-1" class="headerlink" title="示例 1:"></a>示例 1:</h3><pre><code>输入: [1,3,4,2,2]输出: 2</code></pre><h3 id="示例-2"><a href="#示例-2" class="headerlink" title="示例 2:"></a>示例 2:</h3><pre><code>输入: [3,1,3,4,2]输出: 3</code></pre><h3 id="说明："><a href="#说明：" class="headerlink" title="说明："></a>说明：</h3><pre><code>不能更改原数组（假设数组是只读的）。只能使用额外的 O(1) 的空间。时间复杂度小于 O(n2) 。数组中只有一个重复的数字，但它可能不止重复出现一次。</code></pre><h2 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h2><h3 id="思路1"><a href="#思路1" class="headerlink" title="思路1"></a>思路1</h3><p>使用二分法统计小于mid数量，因为数字在1~n（n+1数组）,若大于mid数量则在左侧，反之右侧</p><h3 id="思路2"><a href="#思路2" class="headerlink" title="思路2"></a>思路2</h3><p>快慢指针的思路,因为范围有限以及有重复元素，所以可以看作是链表有环求交点位置</p><h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><h3 id="代码1"><a href="#代码1" class="headerlink" title="代码1"></a>代码1</h3><pre class=" language-Java"><code class="language-Java">class Solution &#123;    public int findDuplicate(int[] nums) &#123;        int left = 1;        int right = nums.length - 1;                while (left < right)&#123;            int mid = (left + right) / 2;            int count = 0;            for(int num: nums)&#123;                if (num <= mid)&#123;                    count += 1;                &#125;            &#125;            if (count > mid)&#123;                right = mid;            &#125;else&#123;                left = mid + 1;            &#125;        &#125;        return left;    &#125;&#125;</code></pre><h3 id="代码2"><a href="#代码2" class="headerlink" title="代码2"></a>代码2</h3><pre class=" language-Java"><code class="language-Java">class Solution &#123;    public int findDuplicate(int[] nums) &#123;        int slow = nums[0];        int fast = nums[0];        do&#123;            slow = nums[slow];            fast = nums[nums[fast]];        &#125;while(slow != fast);        fast = nums[0];        while(slow != fast)&#123;            slow = nums[slow];            fast = nums[fast];        &#125;        return slow;    &#125;&#125;</code></pre><h2 id="复杂度分析"><a href="#复杂度分析" class="headerlink" title="复杂度分析"></a>复杂度分析</h2><h3 id="思路1时间复杂度"><a href="#思路1时间复杂度" class="headerlink" title="思路1时间复杂度"></a>思路1时间复杂度</h3><p>$Onlog(n)$</p><h3 id="思路1空间复杂度"><a href="#思路1空间复杂度" class="headerlink" title="思路1空间复杂度"></a>思路1空间复杂度</h3><p>$O(1)$</p><h3 id="思路2时间复杂度"><a href="#思路2时间复杂度" class="headerlink" title="思路2时间复杂度"></a>思路2时间复杂度</h3><p>$O(n)$</p><h3 id="思路2空间复杂度"><a href="#思路2空间复杂度" class="headerlink" title="思路2空间复杂度"></a>思路2空间复杂度</h3><p>$O(1)$</p>]]></content>
      
      
      <categories>
          
          <category> Leetcode </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Leetcode </tag>
            
            <tag> Medium </tag>
            
            <tag> 快慢指针 </tag>
            
            <tag> 二分法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Leetcode:162. 寻找峰值</title>
      <link href="/2020/04/17/leetcode-162-xun-zhao-feng-zhi/"/>
      <url>/2020/04/17/leetcode-162-xun-zhao-feng-zhi/</url>
      
        <content type="html"><![CDATA[<h1 id="Leetcode-162-寻找峰值"><a href="#Leetcode-162-寻找峰值" class="headerlink" title="Leetcode:162. 寻找峰值"></a><a href="https://leetcode-cn.com/problems/find-peak-element/">Leetcode:162. 寻找峰值</a></h1><h2 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h2><pre><code>峰值元素是指其值大于左右相邻值的元素。给定一个输入数组 nums，其中 nums[i] ≠ nums[i+1]，找到峰值元素并返回其索引。数组可能包含多个峰值，在这种情况下，返回任何一个峰值所在位置即可。你可以假设 nums[-1] = nums[n] = -∞。</code></pre><h3 id="示例-1"><a href="#示例-1" class="headerlink" title="示例 1:"></a>示例 1:</h3><pre><code>输入: nums = [1,2,3,1]输出: 2解释: 3 是峰值元素，你的函数应该返回其索引 2。</code></pre><h3 id="示例-2"><a href="#示例-2" class="headerlink" title="示例 2:"></a>示例 2:</h3><pre><code>输入: nums = [1,2,1,3,5,6,4]输出: 1 或 5 解释: 你的函数可以返回索引 1，其峰值元素为 2；     或者返回索引 5， 其峰值元素为 6。</code></pre><h3 id="说明"><a href="#说明" class="headerlink" title="说明:"></a>说明:</h3><pre><code>你的解法应该是 O(logN) 时间复杂度的。</code></pre><h2 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h2><h3 id="思路1-遍历"><a href="#思路1-遍历" class="headerlink" title="思路1 遍历"></a>思路1 遍历</h3><p>直接遍历，遍历元素是否大于下一个元素，若大于则返回（从数组列表开始）</p><h3 id="思路2-二分法"><a href="#思路2-二分法" class="headerlink" title="思路2: 二分法"></a>思路2: 二分法</h3><p>可用二分法找峰值，若找的元素大于右侧元素，则需要峰值的元素在mid元素左侧，若小于右侧则为mid右侧</p><h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><h3 id="代码1"><a href="#代码1" class="headerlink" title="代码1"></a>代码1</h3><pre class=" language-Java"><code class="language-Java">class Solution &#123;    public int findPeakElement(int[] nums) &#123;        if (nums == null)&#123;            return -1;        &#125;        for(int i = 0; i < nums.length - 1; i++)&#123;            if (nums[i] > nums[i + 1])&#123;                return i;            &#125;        &#125;        return nums.length - 1;    &#125;&#125;</code></pre><h3 id="代码二"><a href="#代码二" class="headerlink" title="代码二"></a>代码二</h3><pre class=" language-Java"><code class="language-Java">class Solution &#123;    public int findPeakElement(int[] nums) &#123;        if (nums == null)&#123;            return -1;        &#125;        int left = 0;        int right = nums.length - 1;        while (left < right)&#123;            int mid = (left + right) / 2;            if (nums[mid] > nums[mid + 1])&#123;                right = mid;            &#125;else&#123;                left = mid + 1;            &#125;        &#125;        return left;    &#125;&#125;</code></pre><h2 id="复杂度分析"><a href="#复杂度分析" class="headerlink" title="复杂度分析"></a>复杂度分析</h2><h3 id="思路1时间复杂度"><a href="#思路1时间复杂度" class="headerlink" title="思路1时间复杂度"></a>思路1时间复杂度</h3><p>$O(n)$</p><h3 id="思路1空间复杂度"><a href="#思路1空间复杂度" class="headerlink" title="思路1空间复杂度"></a>思路1空间复杂度</h3><p>$O(1)$</p><h3 id="思路2时间复杂度"><a href="#思路2时间复杂度" class="headerlink" title="思路2时间复杂度"></a>思路2时间复杂度</h3><p>$O(logn)$</p><h3 id="思路2空间复杂度"><a href="#思路2空间复杂度" class="headerlink" title="思路2空间复杂度"></a>思路2空间复杂度</h3><p>$O(1)$</p>]]></content>
      
      
      <categories>
          
          <category> Leetcode </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Leetcode </tag>
            
            <tag> Medium </tag>
            
            <tag> 二分法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Leetcode:324. 摆动排序 II</title>
      <link href="/2020/04/16/leetcode-324-bai-dong-pai-xu-ii/"/>
      <url>/2020/04/16/leetcode-324-bai-dong-pai-xu-ii/</url>
      
        <content type="html"><![CDATA[<h1 id="Leetcode-324-摆动排序-II"><a href="#Leetcode-324-摆动排序-II" class="headerlink" title="Leetcode:324. 摆动排序 II"></a><a href="https://leetcode-cn.com/problems/wiggle-sort-ii/">Leetcode:324. 摆动排序 II</a></h1><h2 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h2><pre><code>给定一个无序的数组 nums，将它重新排列成 nums[0] &lt; nums[1] &gt; nums[2] &lt; nums[3]... 的顺序。</code></pre><h3 id="示例-1"><a href="#示例-1" class="headerlink" title="示例 1:"></a>示例 1:</h3><pre><code>输入: nums = [1, 5, 1, 1, 6, 4]输出: 一个可能的答案是 [1, 4, 1, 5, 1, 6]</code></pre><h3 id="示例-2"><a href="#示例-2" class="headerlink" title="示例 2:"></a>示例 2:</h3><pre><code>输入: nums = [1, 3, 2, 2, 3, 1]输出: 一个可能的答案是 [2, 3, 1, 3, 1, 2]</code></pre><h3 id="说明"><a href="#说明" class="headerlink" title="说明:"></a>说明:</h3><pre><code>你可以假设所有输入都会得到有效的结果。</code></pre><h3 id="进阶"><a href="#进阶" class="headerlink" title="进阶:"></a>进阶:</h3><pre><code>你能用 O(n) 时间复杂度和 / 或原地 O(1) 额外空间来实现吗？</code></pre><h3 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h3><h3 id="思路1"><a href="#思路1" class="headerlink" title="思路1"></a>思路1</h3><pre><code>直接使用排序加取后一半位置进行插入到合适的位置，需要注意需要新建一个前半排序和后半排序后的空间，不然由于交换不能到合适的位置(或者用一个map指示排序后每个元素应该在的位置),同时还需要注意最中间的元素等于(nums.length + 1) /2的情况，所以需要能够前后排序空间都逆序，使其中间元素不在一起即在排序时不产生等号</code></pre><h3 id="思路2"><a href="#思路2" class="headerlink" title="思路2"></a>思路2</h3><pre><code>不使用排序而直接使用三partition将数组形成小于中位数的数+中数+大于中位数的数，然后利用两个数组（中间位置之前和之后的数组）逆序，最后根据两个数组得到最后的结果</code></pre><h3 id="思路3"><a href="#思路3" class="headerlink" title="思路3"></a>思路3</h3><pre><code>将两个数组换位虚地址</code></pre><h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><h3 id="代码1"><a href="#代码1" class="headerlink" title="代码1"></a>代码1</h3><pre class=" language-Java"><code class="language-Java">class Solution &#123;    public void wiggleSort(int[] nums) &#123;        if (nums == null || nums.length == 0)&#123;            return;        &#125;        Arrays.sort(nums);        int mid = (nums.length + 1) / 2;        reverse(nums, 0, mid - 1);        reverse(nums, mid, nums.length - 1);        int[] smallNums = new int[mid];        int[] bigNums = new int[nums.length - mid];        for(int i = 0; i < nums.length; i++)&#123;            if (i <= mid - 1)&#123;                smallNums[i] = nums[i];            &#125;else&#123;                bigNums[i - mid] = nums[i];            &#125;        &#125;        for(int i = 0; i < nums.length; i++)&#123;            if (i % 2 == 0)&#123;                nums[i] = smallNums[i / 2];            &#125;else&#123;                nums[i] = bigNums[i / 2];            &#125;        &#125;    &#125;        private void reverse(int[] nums,int start,int end)&#123;        while (start < end)&#123;            int temp = nums[start];            nums[start++] = nums[end];            nums[end--] = temp;        &#125;    &#125;    &#125;</code></pre><h3 id="代码2"><a href="#代码2" class="headerlink" title="代码2"></a>代码2</h3><pre class=" language-Java"><code class="language-Java">class Solution &#123;    public void wiggleSort(int[] nums) &#123;        if (nums == null || nums.length == 0 || nums.length == 1)&#123;            return;        &#125;        int mid = (nums.length + 1) / 2;        if (nums.length > 1)&#123;            quickSelect(nums, 0, nums.length - 1, mid, false);        &#125;        int midNum = nums[mid];        int midIndex = 0, k = nums.length - 1, iterIndex =0;        while (midIndex < k)&#123;            if (nums[midIndex] > midNum)&#123;                swap(nums, midIndex, k);                k --;            &#125;else if(nums[midIndex] < midNum)&#123;                swap(nums, midIndex, iterIndex);                midIndex++;                iterIndex++;            &#125;else&#123;                midIndex++;            &#125;        &#125;        int[] smallNums = new int[mid];        int[] bigNums = new int[nums.length - mid];        for(int i = 0; i < nums.length; i++)&#123;            if (i < mid)&#123;                smallNums[i] = nums[mid - 1 - i];            &#125;else&#123;                bigNums[i - mid] = nums[nums.length - 1 - (i - mid)];            &#125;        &#125;        for(int i = 0; i < nums.length; i++)&#123;            if (i % 2 == 0)&#123;                nums[i] =  smallNums[i / 2];            &#125;else&#123;                nums[i] = bigNums[i / 2];            &#125;        &#125;    &#125;        private void quickSelect(int[] nums,int start,int end,int k, boolean reverse)&#123;        int getIndex = getPartition(nums, start, end, reverse);        while (getIndex != k)&#123;            if (getIndex > k)&#123;                getIndex = getPartition(nums, start, getIndex - 1, reverse);            &#125;            if (getIndex < k)&#123;                getIndex = getPartition(nums, getIndex + 1, end, reverse);            &#125;        &#125;    &#125;        private int getPartition(int[] nums, int start, int end, boolean reverse)&#123;        int getNum = nums[start];        int getIndex = start;        swap(nums, start, end);        for(int i = start; i < end; i++)&#123;            if ((!reverse && nums[i] < getNum) || (reverse && nums[i] > getNum))&#123;                swap(nums, getIndex++, i);            &#125;        &#125;        swap(nums, getIndex, end);        return getIndex;    &#125;            private void swap(int[] nums, int i, int j)&#123;        int temp = nums[i];        nums[i] = nums[j];        nums[j] = temp;    &#125;    &#125;</code></pre><h2 id="复杂度分析"><a href="#复杂度分析" class="headerlink" title="复杂度分析"></a>复杂度分析</h2><h3 id="思路1时间复杂度"><a href="#思路1时间复杂度" class="headerlink" title="思路1时间复杂度"></a>思路1时间复杂度</h3><p>$O(nlogn)$考虑平均情况</p><h3 id="思路1空间复杂度"><a href="#思路1空间复杂度" class="headerlink" title="思路1空间复杂度"></a>思路1空间复杂度</h3><p>$O(n)$</p><h3 id="思路2时间复杂度"><a href="#思路2时间复杂度" class="headerlink" title="思路2时间复杂度"></a>思路2时间复杂度</h3><p>$O(n)$考虑平均情况</p><h3 id="思路2空间复杂度"><a href="#思路2空间复杂度" class="headerlink" title="思路2空间复杂度"></a>思路2空间复杂度</h3><p>$O(n)$</p><h3 id="思路3时间复杂度"><a href="#思路3时间复杂度" class="headerlink" title="思路3时间复杂度"></a>思路3时间复杂度</h3><p>$O(n)$考虑平均情况</p><h3 id="思路3空间复杂度"><a href="#思路3空间复杂度" class="headerlink" title="思路3空间复杂度"></a>思路3空间复杂度</h3><p>$O(1)$</p><h2 id="参考文献"><a href="#参考文献" class="headerlink" title="参考文献"></a>参考文献</h2><ul><li><a href="https://leetcode-cn.com/problems/wiggle-sort-ii/solution/yi-bu-yi-bu-jiang-shi-jian-fu-za-du-cong-onlognjia/">Leetcode:324题解</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> Leetcode </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Leetcode </tag>
            
            <tag> Medium </tag>
            
            <tag> 排序 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Leetcode:179. 最大数</title>
      <link href="/2020/04/16/leetcode-179-zui-da-shu/"/>
      <url>/2020/04/16/leetcode-179-zui-da-shu/</url>
      
        <content type="html"><![CDATA[<h1 id="Leetcode-179-最大数"><a href="#Leetcode-179-最大数" class="headerlink" title="Leetcode:179. 最大数"></a><a href="https://leetcode-cn.com/problems/largest-number/">Leetcode:179. 最大数</a></h1><h2 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h2><pre><code>给定一组非负整数，重新排列它们的顺序使之组成一个最大的整数。</code></pre><h3 id="示例-1"><a href="#示例-1" class="headerlink" title="示例 1:"></a>示例 1:</h3><pre><code>输入: [10,2]输出: 210</code></pre><h3 id="示例-2"><a href="#示例-2" class="headerlink" title="示例 2:"></a>示例 2:</h3><pre><code>输入: [3,30,34,5,9]输出: 9534330</code></pre><h3 id="说明"><a href="#说明" class="headerlink" title="说明:"></a>说明:</h3><pre><code>输出结果可能非常大，所以你需要返回一个字符串而不是整数。</code></pre><h2 id="思路1：转化为排序-快排"><a href="#思路1：转化为排序-快排" class="headerlink" title="思路1：转化为排序+快排"></a>思路1：转化为排序+快排</h2><p>将数组转化为字符串数组，然后从大到小排序，比较的是str(a)+str(b)与str(b)+str(a),若str(a)+str(b)大，则str(a) &gt; str(b)</p><h2 id="思路2-转化为排序-Java排序"><a href="#思路2-转化为排序-Java排序" class="headerlink" title="思路2: 转化为排序+Java排序"></a>思路2: 转化为排序+Java排序</h2><p>转化为排序然后使用Java内置排序</p><h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><h3 id="代码1"><a href="#代码1" class="headerlink" title="代码1"></a>代码1</h3><pre class=" language-Java"><code class="language-Java">class Solution &#123;    public String largestNumber(int[] nums) &#123;        if (nums == null || nums.length == 0)&#123;            return "";        &#125;        StringBuilder result = new StringBuilder();        String[] strNums = new String[nums.length];        for(int i = 0; i < nums.length; i++)&#123;            strNums[i] = String.valueOf(nums[i]);        &#125;        quickSort(strNums, 0, strNums.length - 1);        if (strNums[0].equals("0"))&#123;            return "0";        &#125;        for(int i = 0; i < strNums.length; i++)&#123;            result.append(strNums[i]);        &#125;        return result.toString();    &#125;        private void quickSort(String[] nums, int start, int end)&#123;        if (start < end)&#123;            int getIndex = getPartition(nums, start, end);            quickSort(nums, start, getIndex);            quickSort(nums, getIndex + 1, end);        &#125;    &#125;        private int getPartition(String[] nums, int start, int end)&#123;        String getNum = nums[start];        nums[start] = nums[end];        nums[end] = getNum;        int getIndex = start;        for(int i = start; i < end; i++)&#123;            if (compare(nums[i], getNum))&#123;                String temp = nums[getIndex];                nums[getIndex] = nums[i];                nums[i] = temp;                getIndex ++;            &#125;        &#125;        nums[end] = nums[getIndex];        nums[getIndex] = getNum;        return getIndex;    &#125;        private boolean compare(String a, String b)&#123;        int aCount = a.length();        int bCount = b.length();        int maxCount = aCount > bCount ? aCount : bCount;        char chA = '0';        char chB = '0';        for(int i = 0; i < aCount + bCount; i++)&#123;            if (i < aCount)&#123;                chA = a.charAt(i);            &#125;else&#123;                chA = b.charAt(i - aCount);            &#125;            if(i < bCount)&#123;                chB = b.charAt(i);            &#125;else&#123;                chB = a.charAt(i - bCount);            &#125;            if (chA > chB)&#123;                return true;            &#125;else if(chA < chB)&#123;                return false;            &#125;        &#125;        return false;    &#125;&#125;</code></pre><h3 id="代码2"><a href="#代码2" class="headerlink" title="代码2"></a>代码2</h3><pre class=" language-Java"><code class="language-Java">class Solution &#123;    public String largestNumber(int[] nums) &#123;        if (nums == null || nums.length == 0)&#123;            return "";        &#125;        StringBuilder result = new StringBuilder();        String[] strNums = new String[nums.length];        for(int i = 0; i < nums.length; i++)&#123;            strNums[i] = String.valueOf(nums[i]);        &#125;        Arrays.sort(strNums, new Comparator<String>()&#123;            @Override            public int compare(String a, String b)&#123;                int aCount = a.length();                int bCount = b.length();                int maxCount = aCount > bCount ? aCount : bCount;                char chA = '0';                char chB = '0';                for(int i = 0; i < aCount + bCount; i++)&#123;                    if (i < aCount)&#123;                        chA = a.charAt(i);                    &#125;else&#123;                        chA = b.charAt(i - aCount);                    &#125;                    if(i < bCount)&#123;                        chB = b.charAt(i);                    &#125;else&#123;                        chB = a.charAt(i - bCount);                    &#125;                    if (chA != chB)&#123;                        return chB - chA;                    &#125;                &#125;                return 0;            &#125;        &#125;);        if (strNums[0].equals("0"))&#123;            return "0";        &#125;        for(int i = 0; i < strNums.length; i++)&#123;            result.append(strNums[i]);        &#125;        return result.toString();    &#125;&#125;</code></pre><h2 id="复杂度分析"><a href="#复杂度分析" class="headerlink" title="复杂度分析"></a>复杂度分析</h2><h3 id="思路1时间复杂度"><a href="#思路1时间复杂度" class="headerlink" title="思路1时间复杂度"></a>思路1时间复杂度</h3><p>最坏$O(n^2)$，平均$O(nlogn)$</p><h3 id="思路1空间复杂度"><a href="#思路1空间复杂度" class="headerlink" title="思路1空间复杂度"></a>思路1空间复杂度</h3><p>$O(n)$</p><h3 id="思路2时间复杂度"><a href="#思路2时间复杂度" class="headerlink" title="思路2时间复杂度"></a>思路2时间复杂度</h3><p>最坏$O(n^2)$，平均$O(nlogn)$</p><h3 id="思路2空间复杂度"><a href="#思路2空间复杂度" class="headerlink" title="思路2空间复杂度"></a>思路2空间复杂度</h3><p>$O(n)$</p>]]></content>
      
      
      <categories>
          
          <category> Leetcode </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Leetcode </tag>
            
            <tag> Medium </tag>
            
            <tag> 排序 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Attention Bridge:带有Attention Bridge语言无关的多语言神经翻译</title>
      <link href="/2020/04/14/attention-bridge-dai-you-attention-yu-yan-wu-guan-de-duo-yu-yan-shen-jing-fan-yi/"/>
      <url>/2020/04/14/attention-bridge-dai-you-attention-yu-yan-wu-guan-de-duo-yu-yan-shen-jing-fan-yi/</url>
      
        <content type="html"><![CDATA[<h1 id="Multilingual-NMT-with-a-language-independent-attention-bridge"><a href="#Multilingual-NMT-with-a-language-independent-attention-bridge" class="headerlink" title="Multilingual NMT with a language-independent attention bridge"></a><a href="https://www.aclweb.org/anthology/W19-4305.pdf">Multilingual NMT with a language-independent attention bridge</a></h1><h2 id="摘要"><a href="#摘要" class="headerlink" title="摘要"></a>摘要</h2><p>作者通过整合跨所有语言共享的中间注意力桥获取到为位机器翻译系统准备的句子表征架构。作者通过在编码端的inner-attention语言特定的编码和解码器连接进行训练。注意力桥利用每种语言的语义进行翻译，并发展成一种语言无关的意义表示，可以有效地用于迁移学习。作者为有效开发多语言神经网络机器翻译提供了一种新的框架。作者在多平行数据上进行了系统性的测试。该模型在双语模型和零样本的翻译上提升较大，展现了该模型的抽象和迁移能力。</p><h2 id="主要贡献"><a href="#主要贡献" class="headerlink" title="主要贡献"></a>主要贡献</h2><ul><li>提出了一种多语言翻译系统，有效解决学习语言无关的句子表征任务</li><li>验证了模型能够通过共享表征实现有效的迁移学习和零样本翻译。</li><li>证明了经过多语言训练的词嵌入可以改善大多数下流和展示了从组合翻译任务上获取抽象学习的句子探测任务</li></ul><h2 id="模型实现"><a href="#模型实现" class="headerlink" title="模型实现"></a>模型实现</h2><h3 id="整体上"><a href="#整体上" class="headerlink" title="整体上"></a>整体上</h3><ol><li>使用了标准的encoder-decoder加上attention机制</li><li>加上了self-attention层共享所有的语言对完成语言无关层</li></ol><h3 id="具体实现"><a href="#具体实现" class="headerlink" title="具体实现"></a>具体实现</h3><ul><li>编码器用用BiLSTM得到$n*d_h$句子向量表示，然后使用多层注意力将该表示转换为固定大小的向量$M\in R^{d_h * k}$,k为attention head数量。<br>$$\begin{aligned}<br>  A &amp;&#x3D; softmax(W_2ReLU(W_1H^T)) \\<br>  M &amp;&#x3D; AH<br>\end{aligned}$$</li><li>解码器使用通用的带注意力的解码器，该解码器初始向量通过M的平均池化的到。解码器用的是单向的LSTM</li><li>增加惩罚项避免学习到重复的信息。作者使用的是Frobenius正则化解决<br>$$L &#x3D; -log(p(Y|X)) + ||AA^T - I||_F^2$$</li></ul><h2 id="结果分析"><a href="#结果分析" class="headerlink" title="结果分析"></a>结果分析</h2><ol><li>在双语翻译结果上有所下降，作者解释是因为将有10个self-attention组成的固定的句子向量没有包含多语言信息<br><img src="https://i.loli.net/2020/04/14/KwBSyCF28i7LOq3.png" alt="AB_BLEU_score.png"></li><li>在多对一和一对多的实验中，但是多对一就有一定的效果提升，然后在训练过程中加上了单语数据，具体是将语言A的句子直接复制形成句子对，和平行预料一起进行训练。</li><li>在多对多模型上，在双语模型基础上有了巨大提升，加上单语预料后也有增益。同时在零样本学习上也强于之前的多对一模型。</li><li>训练得到向量在下流任务上结果:在相同预料库下相对于Glove-BoW有所提升，但是可能相对通用的预训练模型微调的效果可能有点不够看，但是为零样本、少样本的跨语言学习提供一种解决方案<br><img src="https://i.loli.net/2020/04/14/NZdJSiUn45mWw7Y.png" alt="AB_DT.png"></li></ol><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><ol><li>对传统的encoder-decoder进行了三项改造:使用了特定语言的encoder-decoder、语言无关的共享attention bridge以及惩罚项。</li><li>使用Attention Bridge合理地将多语言表征融合。该融合是否可以直接用于预训练任务？</li><li>Multi-Head学习到重复内容是否可以使用其他方法进行一种增加“惩罚项”,因为该方法中的Frobenius其实效果提升较小或者对有些任务有负作用</li></ol><h2 id="参考文献"><a href="#参考文献" class="headerlink" title="参考文献"></a>参考文献</h2><ul><li><a href="https://www.aclweb.org/anthology/W19-4305.pdf">Multilingual NMT with a language-independent attention bridge</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> NLP </category>
          
      </categories>
      
      
        <tags>
            
            <tag> NLP </tag>
            
            <tag> ACL 2019 </tag>
            
            <tag> 机器翻译 </tag>
            
            <tag> 论文阅读 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>MSRA:Unicoder跨语言预训练模型</title>
      <link href="/2020/04/14/msra-unicoder-kua-yu-yan-yu-xun-lian-mo-xing/"/>
      <url>/2020/04/14/msra-unicoder-kua-yu-yan-yu-xun-lian-mo-xing/</url>
      
        <content type="html"><![CDATA[<h1 id="Unicoder-A-Universal-Language-Encoder-by-Pre-training-with-Multiple-Cross-lingual-Tasks"><a href="#Unicoder-A-Universal-Language-Encoder-by-Pre-training-with-Multiple-Cross-lingual-Tasks" class="headerlink" title="Unicoder: A Universal Language Encoder by Pre-training with Multiple Cross-lingual Tasks"></a><a href="https://www.aclweb.org/anthology/D19-1252.pdf">Unicoder: A Universal Language Encoder by Pre-training with Multiple Cross-lingual Tasks</a></h1><h2 id="1-摘要"><a href="#1-摘要" class="headerlink" title="1. 摘要"></a>1. 摘要</h2><p>Unicoder是一个对于不同语言通用的语言编码器。该模型在某个语言的任意NLP任务之后可以直接运用于其他语言。与该方法类似的有Multilingual BERT和XLM，新提出了跨语言的词恢复、释义分类和遮盖语言模型三个预训练任务。这些任务帮助Unicoder学习到了不同语言深层次的内容。同时该方法也发现，在某些任务上进行微调可以让效果得到提升。该模型微调了XNLI和XQA之后，在XLM的基础上，XNLI提升了在15中语言上提升了1.8%，而在XQA上提升了5.5%。</p><h2 id="3-主要贡献"><a href="#3-主要贡献" class="headerlink" title="3. 主要贡献"></a>3. 主要贡献</h2><ol><li>提出了3个跨语言预训练任务，更好的获取语言无关编码</li><li>创建了一个新的跨语言QA数据集XQA</li><li>验证了微调加上语言预训练可以显著提升模型效果</li><li>在XNLI上实现了SOTA</li></ol><h2 id="4-模型实现"><a href="#4-模型实现" class="headerlink" title="4. 模型实现"></a>4. 模型实现</h2><ol><li>在实现上参照了XLM模型，使用BPE共用词表，下采样数据多的语言预料，避免目标语言的词被分为太多的字符级别。</li><li>预训练任务<ul><li>MLM(masked language model) Multilingual Bert</li><li>TLM(translation language model): XLM</li><li>跨语言的词语恢复(Cross-lingual Word Recovery): learn the underlying word alignments between two languages 使用注意力矩阵处理后的X作为input还原X<br>  <img src="https://i.loli.net/2020/04/14/dKLMqOsZuP7clmS.png" alt="Cross-lingual-word-recovery.png"></li><li>跨语言的同义句子分类(Cross-lingual Paraphrase Classification)使用两个不同语言的句子判断两个句子是否是相同的意思，获取两个语言句子层面的对应关系。同时在采样负例时采用两段式的采样方法，首先使用一个轻量级的随机采样方法获取是否是同一含义，然后利用这个模型寻找最相似但是不相等的负样例。该方法主要是使得训练任务难度变高。<br> <img src="https://i.loli.net/2020/04/14/3LFxfm6pNSkoMuH.png" alt="Cross-lingual-paraphrase-classfication.png"></li><li>在文档级别上MLM,句子是多语言的。因为跨语言的词级别的多语言较少且可能不通顺，所以需要使用句子组成一个连贯的文档<br> <img src="https://i.loli.net/2020/04/14/Qevo1JkBd75qUSP.png" alt="Cross-lingual-masked-language-model.png"></li></ul></li><li>跨语言微调(设目标任务是测试中文数据集)<ul><li>测试数据翻译（Translate Test）将中文的测试数据翻译成英文的测试数据，将问题转化成英文训练、英文测试的问题。</li><li>训练数据翻译（Translate Train）将英文的训练数据翻译成中文的训练数据，将问题转化成中文训练、中文测试的问题</li><li>跨语言测试（Cross-lingual Test），也就是直接将在英语训练集上训练得到的模型在中文上进行测试。</li><li>跨语言微调是通过将英语翻译成其他语言，在英语和其他语言上进行训练，然后再中文数据上进行测试</li></ul></li></ol><h2 id="5-实验细节"><a href="#5-实验细节" class="headerlink" title="5. 实验细节"></a>5. 实验细节</h2><ol><li>训练细节<ul><li>模型结构 12层16头1024个隐层的transformer</li><li>预训练详情 从XLM初始化（节约时间）</li></ul></li><li>数据<ol><li>XNLI：跨语言推理任务</li><li>XQA：新提出数据XQA,Cross-lingual Question Answering,三语数据集，只有英文有训练数据，判断问题和答案是否相关</li></ol></li></ol><h2 id="6-实验效果"><a href="#6-实验效果" class="headerlink" title="6. 实验效果"></a>6. 实验效果</h2><ol><li>XNLI结果:在TRANSLATE-TRAIN的XLM的基础上,多语言微调的整体提升1.8%,其中在使用多语言微调之后提升1.1%,Unicoder相对XLM提升0.7%。所以可以看出Unicoder对多语言的知识掌握能力更强<br><img src="https://i.loli.net/2020/04/14/WiP2mwD4sQq5SFr.png" alt="Unicoder-XNLI-result.png"></li><li>XQA结果:在TRANSLATE-TRAIN的XLM的基础上,多语言微调的整体提升5.5%,其中在使用多语言微调之后提升3.5%,Unicoder相对XLM提升2%<br> <img src="https://i.loli.net/2020/04/14/UNDbA9mfK2jWEdP.png" alt="Unicoder-XQA-result.png"></li><li>总体来说语言越多越好，但是在双语fine-tuning中Vietnamese和Urdu甚至相对单语是有害的</li></ol><h2 id="7-总结及启迪"><a href="#7-总结及启迪" class="headerlink" title="7. 总结及启迪"></a>7. 总结及启迪</h2><ol><li>作者提出了三种全新的预训练任务，三个任务对模型效果均有提升</li><li>提出了一种多语言预训练方案，相对只将原语言翻译效果有提升</li><li>总体而言，在微调阶段，语言越多效果越好</li><li>实践了预训练中多任务的作用，同样也实践了预训练任务的难度对结果影响(Cross-lingual Paraphrase Classification)</li><li>多语言微调是否可以看作是一种数据微调？该模型对于获取翻译之后多语言特征强，所以可以考虑对增强数据的增强捕捉能力？</li></ol><h2 id="参考文献"><a href="#参考文献" class="headerlink" title="参考文献"></a>参考文献</h2><ul><li><a href="https://zhuanlan.zhihu.com/p/86166445">机器推理系列第三弹：跨语言预训练，提高机器推理的迁移能力</a></li><li><a href="https://www.aclweb.org/anthology/D19-1252.pdf">Unicoder: A Universal Language Encoder by Pre-training with Multiple Cross-lingual Tasks</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> NLP </category>
          
      </categories>
      
      
        <tags>
            
            <tag> NLP </tag>
            
            <tag> 论文阅读 </tag>
            
            <tag> EMNLP 2019 </tag>
            
            <tag> 预训练模型 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Leetcode:297. 二叉树的序列化与反序列化</title>
      <link href="/2020/04/13/leetcode-297-er-cha-shu-de-xu-lie-hua-yu-fan-xu-lie-hua/"/>
      <url>/2020/04/13/leetcode-297-er-cha-shu-de-xu-lie-hua-yu-fan-xu-lie-hua/</url>
      
        <content type="html"><![CDATA[<h1 id="Leetcode-297-二叉树的序列化与反序列化"><a href="#Leetcode-297-二叉树的序列化与反序列化" class="headerlink" title="Leetcode:297. 二叉树的序列化与反序列化"></a><a href="https://leetcode-cn.com/problems/serialize-and-deserialize-binary-tree/">Leetcode:297. 二叉树的序列化与反序列化</a></h1><h2 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h2><pre><code>序列化是将一个数据结构或者对象转换为连续的比特位的操作，进而可以将转换后的数据存储在一个文件或者内存中，同时也可以通过网络传输到另一个计算机环境，采取相反方式重构得到原数据。请设计一个算法来实现二叉树的序列化与反序列化。这里不限定你的序列 / 反序列化算法执行逻辑，你只需要保证一个二叉树可以被序列化为一个字符串并且将这个字符串反序列化为原始的树结构。</code></pre><h3 id="示例"><a href="#示例" class="headerlink" title="示例:"></a>示例:</h3><pre><code>你可以将以下二叉树： 1/ \2   3    / \    4   5序列化为 &quot;[1,2,3,null,null,4,5]&quot;</code></pre><h3 id="提示"><a href="#提示" class="headerlink" title="提示:"></a>提示:</h3><pre><code>这与 LeetCode 目前使用的方式一致，详情请参阅 LeetCode 序列化二叉树的格式。你并非必须采取这种方式，你也可以采用其他的方法解决这个问题。</code></pre><h3 id="说明"><a href="#说明" class="headerlink" title="说明:"></a>说明:</h3><pre><code>不要使用类的成员 / 全局 / 静态变量来存储状态，你的序列化和反序列化算法应该是无状态的。</code></pre><h2 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h2><h3 id="思路1-BFS-迭代"><a href="#思路1-BFS-迭代" class="headerlink" title="思路1: BFS + 迭代"></a>思路1: BFS + 迭代</h3><p>使用队列进行BFS，记录每个节点进行迭代</p><h3 id="思路2-BFS-递归（TODO-）"><a href="#思路2-BFS-递归（TODO-）" class="headerlink" title="思路2: BFS + 递归（TODO:）"></a>思路2: BFS + 递归（TODO:）</h3><h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><h3 id="代码1"><a href="#代码1" class="headerlink" title="代码1"></a>代码1</h3><pre class=" language-Java"><code class="language-Java">public class Codec &#123;    // Encodes a tree to a single string.    public String serialize(TreeNode root) &#123;        Queue<TreeNode> queue = new LinkedList<>();        StringBuilder sb = new StringBuilder();        queue.add(root);        while (!queue.isEmpty())&#123;            TreeNode pre = queue.poll();            if (pre == null)&#123;                sb.append("n");                sb.append(",");                continue;            &#125;else&#123;                sb.append(String.valueOf(pre.val));                sb.append(",");            &#125;            queue.offer(pre.left);            queue.offer(pre.right);        &#125;        int neededLength = sb.length() - 1;        // strip speed        while(neededLength > 2 && sb.charAt(neededLength - 1) == 'n')&#123;            neededLength -= 2;        &#125;        sb.setLength(neededLength);        return sb.toString();    &#125;    // Decodes your encoded data to tree.    public TreeNode deserialize(String data) &#123;        if (data.equals("n"))&#123;            return null;        &#125;        String[] vals = data.split(",");        TreeNode root = new TreeNode(Integer.valueOf(vals[0]));        Queue<TreeNode> queue = new LinkedList<>();        queue.offer(root);        for(int i = 1; i < vals.length; i += 2)&#123;            if (queue.isEmpty())&#123;                break;            &#125;            TreeNode pre = queue.poll();            if (vals[i].equals("n"))&#123;                pre.left = null;            &#125;else&#123;                TreeNode left = new TreeNode(Integer.valueOf(vals[i]));                pre.left = left;                queue.offer(left);            &#125;            if (i + 1 >= vals.length)&#123;                break;            &#125;            if (vals[i + 1].equals("n"))&#123;                pre.right = null;            &#125;else&#123;                TreeNode right = new TreeNode(Integer.valueOf(vals[i + 1]));                pre.right = right;                queue.offer(right);            &#125;        &#125;        return root;    &#125;&#125;</code></pre><h2 id="复杂度分析"><a href="#复杂度分析" class="headerlink" title="复杂度分析"></a>复杂度分析</h2><h3 id="思路1时间复杂度"><a href="#思路1时间复杂度" class="headerlink" title="思路1时间复杂度"></a>思路1时间复杂度</h3><p>$O(n)$</p><h3 id="思路1空间复杂度"><a href="#思路1空间复杂度" class="headerlink" title="思路1空间复杂度"></a>思路1空间复杂度</h3><p>$O(n)$</p>]]></content>
      
      
      <categories>
          
          <category> Leetcode </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Leetcode </tag>
            
            <tag> Hard </tag>
            
            <tag> BFS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Leetcode:236. 二叉树的最近公共祖先</title>
      <link href="/2020/04/11/leetcode-236-er-cha-shu-de-zui-jin-gong-gong-zu-xian/"/>
      <url>/2020/04/11/leetcode-236-er-cha-shu-de-zui-jin-gong-gong-zu-xian/</url>
      
        <content type="html"><![CDATA[<h1 id="Leetcode-236-二叉树的最近公共祖先"><a href="#Leetcode-236-二叉树的最近公共祖先" class="headerlink" title="Leetcode: 236. 二叉树的最近公共祖先"></a><a href="https://leetcode-cn.com/problems/lowest-common-ancestor-of-a-binary-tree/">Leetcode: 236. 二叉树的最近公共祖先</a></h1><h2 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h2><pre><code>给定一个二叉树, 找到该树中两个指定节点的最近公共祖先。百度百科中最近公共祖先的定义为：“对于有根树 T 的两个结点 p、q，最近公共祖先表示为一个结点 x，满足 x 是 p、q 的祖先且 x 的深度尽可能大（一个节点也可以是它自己的祖先）。”例如，给定如下二叉树:  root = [3,5,1,6,2,0,8,null,null,7,4]</code></pre><h3 id="示例-1"><a href="#示例-1" class="headerlink" title="示例 1:"></a>示例 1:</h3><pre><code>输入: root = [3,5,1,6,2,0,8,null,null,7,4], p = 5, q = 1输出: 3解释: 节点 5 和节点 1 的最近公共祖先是节点 3。</code></pre><h3 id="示例-2"><a href="#示例-2" class="headerlink" title="示例 2:"></a>示例 2:</h3><pre><code>输入: root = [3,5,1,6,2,0,8,null,null,7,4], p = 5, q = 4输出: 5解释: 节点 5 和节点 4 的最近公共祖先是节点 5。因为根据定义最近公共祖先节点可以为节点本身。</code></pre><p> </p><h3 id="说明"><a href="#说明" class="headerlink" title="说明:"></a>说明:</h3><pre><code>所有节点的值都是唯一的。p、q 为不同节点且均存在于给定的二叉树中。</code></pre><h2 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h2><h3 id="思路1-后序遍历-递归"><a href="#思路1-后序遍历-递归" class="headerlink" title="思路1: 后序遍历+递归"></a>思路1: 后序遍历+递归</h3><p>使用三个计数器分别计数，通过后序遍历的方式计算每个节点的左子树，右子树以及本身是否包含p,q，如果有两个则表明该节点为最近公共祖先<br>&#x2F;&#x2F; TODO:其他思路</p><h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><pre class=" language-Java"><code class="language-Java">class Solution &#123;    public TreeNode lowestCommonAncestor(TreeNode root, TreeNode p, TreeNode q) &#123;        TreeNode result = new TreeNode(0);        commonHelper(root, p, q, result);        return result.left;    &#125;        private boolean commonHelper(TreeNode root, TreeNode p, TreeNode q, TreeNode result)&#123;        if (root == null)&#123;            return false;        &#125;                int left = commonHelper(root.left, p, q, result) ? 1: 0;        int right = commonHelper(root.right, p, q, result) ? 1: 0;        int mid = 0;        if (root == p || root == q)&#123;            mid = 1;        &#125;        if (mid + left + right >= 2)&#123;            System.out.println(root.val);            result.left = root;        &#125;        return (mid + left + right) > 0;    &#125;&#125;</code></pre><h2 id="复杂度分析"><a href="#复杂度分析" class="headerlink" title="复杂度分析"></a>复杂度分析</h2><h3 id="思路1时间复杂度"><a href="#思路1时间复杂度" class="headerlink" title="思路1时间复杂度"></a>思路1时间复杂度</h3><p>$O(n)$</p><h3 id="思路1空间复杂度"><a href="#思路1空间复杂度" class="headerlink" title="思路1空间复杂度"></a>思路1空间复杂度</h3><p>$O(n)$</p>]]></content>
      
      
      <categories>
          
          <category> Leetcode </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Leetcode </tag>
            
            <tag> Medium </tag>
            
            <tag> 二叉树 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Leetcode: 230. 二叉搜索树中第K小的元素</title>
      <link href="/2020/04/10/leetcode-230-er-cha-sou-suo-shu-zhong-di-k-xiao-de-yuan-su/"/>
      <url>/2020/04/10/leetcode-230-er-cha-sou-suo-shu-zhong-di-k-xiao-de-yuan-su/</url>
      
        <content type="html"><![CDATA[<h1 id="Leetcode-230-二叉搜索树中第K小的元素"><a href="#Leetcode-230-二叉搜索树中第K小的元素" class="headerlink" title="Leetcode: 230. 二叉搜索树中第K小的元素"></a><a href="https://leetcode-cn.com/explore/interview/card/top-interview-quesitons/269/tree/1165/">Leetcode: 230. 二叉搜索树中第K小的元素</a></h1><h2 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h2><pre><code>一个二叉搜索树，编写一个函数 kthSmallest 来查找其中第 k 个最小的元素。</code></pre><h3 id="说明："><a href="#说明：" class="headerlink" title="说明："></a>说明：</h3><pre><code>你可以假设 k 总是有效的，1 ≤ k ≤ 二叉搜索树元素个数。</code></pre><h3 id="示例-1"><a href="#示例-1" class="headerlink" title="示例 1:"></a>示例 1:</h3><pre><code>输入: root = [3,1,4,null,2], k = 13/ \1   4\   2输出: 1</code></pre><h3 id="示例-2"><a href="#示例-2" class="headerlink" title="示例 2:"></a>示例 2:</h3><pre><code>输入: root = [5,3,6,2,4,null,null,1], k = 3    5    / \    3   6    / \2   4/1输出: 3</code></pre><h3 id="进阶："><a href="#进阶：" class="headerlink" title="进阶："></a>进阶：</h3><pre><code>如果二叉搜索树经常被修改（插入/删除操作）并且你需要频繁地查找第 k 小的值，你将如何优化 kthSmallest 函数？</code></pre><h2 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h2><h3 id="思路1-中序遍历-剪枝-递归"><a href="#思路1-中序遍历-剪枝-递归" class="headerlink" title="思路1 中序遍历+剪枝+递归"></a>思路1 中序遍历+剪枝+递归</h3><p>直接递归使用中序遍历，然后通过设置一个计数器计算数在整个二叉搜索中排序的位置，到达第K小时返回结果（超过K直接返回）</p><h3 id="思路2-中序遍历-剪枝-迭代"><a href="#思路2-中序遍历-剪枝-迭代" class="headerlink" title="思路2 中序遍历+剪枝+迭代"></a>思路2 中序遍历+剪枝+迭代</h3><p>使用一个栈实现中序遍历迭代，通过出栈的数量找到第K个数</p><h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><h3 id="代码1"><a href="#代码1" class="headerlink" title="代码1"></a>代码1</h3><pre class=" language-Java"><code class="language-Java">class Solution &#123;    int numCount;    int result;        public int kthSmallest(TreeNode root, int k) &#123;        numCount = 0;        addSearchNum(root, k);        return result;    &#125;        private void addSearchNum(TreeNode root, int k)&#123;        if (root == null || numCount > k)&#123;            return;        &#125;        addSearchNum(root.left, k);        numCount ++;        if (numCount == k)&#123;            result = root.val;        &#125;        addSearchNum(root.right, k);    &#125;&#125;</code></pre><h3 id="代码2"><a href="#代码2" class="headerlink" title="代码2"></a>代码2</h3><pre class=" language-Java"><code class="language-Java">class Solution &#123;    public int kthSmallest(TreeNode root, int k) &#123;        Stack<TreeNode> stack = new Stack<>();        while(true)&#123;            while (root != null)&#123;                stack.push(root);                root = root.left;            &#125;            root = stack.pop();            k --;            if (k == 0) return root.val;            root = root.right;        &#125;    &#125;&#125;</code></pre><h3 id=""><a href="#" class="headerlink" title=""></a></h3><h2 id="复杂度分析"><a href="#复杂度分析" class="headerlink" title="复杂度分析"></a>复杂度分析</h2><h3 id="思路1时间复杂度"><a href="#思路1时间复杂度" class="headerlink" title="思路1时间复杂度"></a>思路1时间复杂度</h3><p>$O(N)$需要考虑为所有节点都在左子树</p><h3 id="思路1空间复杂度"><a href="#思路1空间复杂度" class="headerlink" title="思路1空间复杂度"></a>思路1空间复杂度</h3><p>$O(N)$可能会有左子树，会有栈的深度</p><h3 id="思路2时间复杂度"><a href="#思路2时间复杂度" class="headerlink" title="思路2时间复杂度"></a>思路2时间复杂度</h3><p>$O(N)$</p><h3 id="思路2空间复杂度"><a href="#思路2空间复杂度" class="headerlink" title="思路2空间复杂度"></a>思路2空间复杂度</h3><p>$O(N)$</p>]]></content>
      
      
      <categories>
          
          <category> Leetcode </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Leetcode </tag>
            
            <tag> Medium </tag>
            
            <tag> 二叉树 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Leetcode:380. 常数时间插入、删除和获取随机元素</title>
      <link href="/2020/04/09/leetcode-380-chang-shu-shi-jian-cha-ru-shan-chu-he-huo-qu-sui-ji-yuan-su/"/>
      <url>/2020/04/09/leetcode-380-chang-shu-shi-jian-cha-ru-shan-chu-he-huo-qu-sui-ji-yuan-su/</url>
      
        <content type="html"><![CDATA[<h1 id="Leetcode-380-常数时间插入、删除和获取随机元素"><a href="#Leetcode-380-常数时间插入、删除和获取随机元素" class="headerlink" title="Leetcode: 380. 常数时间插入、删除和获取随机元素"></a><a href="https://leetcode-cn.com/problems/insert-delete-getrandom-o1/">Leetcode: 380. 常数时间插入、删除和获取随机元素</a></h1><h2 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h2><pre><code>设计一个支持在平均 时间复杂度 O(1) 下，执行以下操作的数据结构。insert(val)：当元素 val 不存在时，向集合中插入该项。remove(val)：元素 val 存在时，从集合中移除该项。getRandom：随机返回现有集合中的一项。每个元素应该有相同的概率被返回。</code></pre><h3 id="示例"><a href="#示例" class="headerlink" title="示例 :"></a>示例 :</h3><pre><code>// 初始化一个空的集合。RandomizedSet randomSet = new RandomizedSet();// 向集合中插入 1 。返回 true 表示 1 被成功地插入。randomSet.insert(1);// 返回 false ，表示集合中不存在 2 。randomSet.remove(2);// 向集合中插入 2 。返回 true 。集合现在包含 [1,2] 。randomSet.insert(2);// getRandom 应随机返回 1 或 2 。randomSet.getRandom();// 从集合中移除 1 ，返回 true 。集合现在包含 [2] 。randomSet.remove(1);// 2 已在集合中，所以返回 false 。randomSet.insert(2);// 由于 2 是集合中唯一的数字，getRandom 总是返回 2 。randomSet.getRandom();</code></pre><h2 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h2><h3 id="思路1"><a href="#思路1" class="headerlink" title="思路1"></a>思路1</h3><p>首先满足插入和删除为O(1)的容器会想到哈希表，然后需要返回集合中的随机数，需要一个增长列表。同时需要满足插入和删除为O(1)可以直接将需要删除的数置于末尾，然后删除，插入不变。在插入和删除过程中需要同时更新哈希表和增长列表。</p><h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><h3 id="代码1"><a href="#代码1" class="headerlink" title="代码1"></a>代码1</h3><pre class=" language-Java"><code class="language-Java">class RandomizedSet &#123;    /** Initialize your data structure here. */    private HashMap<Integer, Integer> numMap;    private List<Integer> nums;    private Random random;        public RandomizedSet() &#123;        numMap = new HashMap<>();        nums = new ArrayList<>();        random = new Random();    &#125;        /** Inserts a value to the set. Returns true if the set did not already contain the specified element. */    public boolean insert(int val) &#123;        if (numMap.containsKey(val))&#123;            return false;        &#125;        numMap.put(val, nums.size());        nums.add(val);        return true;    &#125;        /** Removes a value from the set. Returns true if the set contained the specified element. */    public boolean remove(int val) &#123;        if (!numMap.containsKey(val))&#123;            return false;        &#125;        int getIndex = numMap.get(val);        int getNum = nums.get(nums.size() - 1);        numMap.put(getNum, getIndex);        nums.set(getIndex, getNum);        nums.remove(nums.size() - 1);        numMap.remove(val);        return true;    &#125;        /** Get a random element from the set. */    public int getRandom() &#123;        return nums.get(random.nextInt(nums.size()));    &#125;&#125;</code></pre><h2 id="复杂度分析"><a href="#复杂度分析" class="headerlink" title="复杂度分析"></a>复杂度分析</h2><h3 id="思路1时间复杂度"><a href="#思路1时间复杂度" class="headerlink" title="思路1时间复杂度"></a>思路1时间复杂度</h3><p>$O(1)$</p><h3 id="思路1空间复杂度"><a href="#思路1空间复杂度" class="headerlink" title="思路1空间复杂度"></a>思路1空间复杂度</h3><p>$O(n)$</p>]]></content>
      
      
      <categories>
          
          <category> Leetcode </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Leetcode </tag>
            
            <tag> Medium </tag>
            
            <tag> 哈希表 </tag>
            
            <tag> Collection </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Leetcode:454. 四数相加 II</title>
      <link href="/2020/04/08/leetcode-454-si-shu-xiang-jia-ii/"/>
      <url>/2020/04/08/leetcode-454-si-shu-xiang-jia-ii/</url>
      
        <content type="html"><![CDATA[<h1 id="Leetcode-454-四数相加II"><a href="#Leetcode-454-四数相加II" class="headerlink" title="Leetcode:454. 四数相加II"></a><a href="https://leetcode-cn.com/problems/4sum-ii">Leetcode:454. 四数相加II</a></h1><pre><code>给定四个包含整数的数组列表 A , B , C , D ,计算有多少个元组 (i, j, k, l) ，使得 A[i] + B[j] + C[k] + D[l] = 0。为了使问题简单化，所有的 A, B, C, D 具有相同的长度 N，且 0 ≤ N ≤ 500 。所有整数的范围在 -228 到 228 - 1 之间，最终结果不会超过 231 - 1 。</code></pre><h3 id="例如"><a href="#例如" class="headerlink" title="例如:"></a>例如:</h3><pre><code>输入:A = [ 1, 2]B = [-2,-1]C = [-1, 2]D = [ 0, 2]输出:2解释:两个元组如下:1. (0, 0, 0, 1) -&gt; A[0] + B[0] + C[0] + D[1] = 1 + (-2) + (-1) + 2 = 02. (1, 1, 0, 0) -&gt; A[1] + B[1] + C[0] + D[0] = 2 + (-1) + (-1) + 0 = 0</code></pre><h2 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h2><h3 id="思路1"><a href="#思路1" class="headerlink" title="思路1"></a>思路1</h3><p>two sum扩展，直接使用一个哈希表存储A、B列表之和个数，然后遍历满足所有数相交为0的C、D之和，得到最后的结果</p><h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><h3 id="代码1"><a href="#代码1" class="headerlink" title="代码1"></a>代码1</h3><pre class=" language-Java"><code class="language-Java">class Solution &#123;    public int fourSumCount(int[] A, int[] B, int[] C, int[] D) &#123;        if (A == null || A.length == 0 || B == null || B.length == 0 || C == null || C.length == 0 || D == null || D.length == 0)&#123;            return 0;        &#125;        Map<Integer, Integer> dictAB = new HashMap<>();        int result = 0;        for (int i = 0; i < A.length; i++)&#123;            for(int j = 0; j < B.length; j++)&#123;                int tempSum = A[i] + B[j];                if (!dictAB.containsKey(tempSum))&#123;                    dictAB.put(tempSum, 1);                &#125;else&#123;                    dictAB.put(A[i] + B[j], dictAB.get(tempSum) + 1);                &#125;            &#125;        &#125;                for(int i = 0; i < C.length; i++)&#123;            for(int j = 0; j < D.length; j++)&#123;                int tempSum = C[i] + D[j];                if (dictAB.containsKey(-tempSum))&#123;                    result += dictAB.get(-tempSum);                &#125;            &#125;        &#125;        return result;    &#125;&#125;</code></pre><h2 id="复杂度分析"><a href="#复杂度分析" class="headerlink" title="复杂度分析"></a>复杂度分析</h2><h3 id="思路1时间复杂度"><a href="#思路1时间复杂度" class="headerlink" title="思路1时间复杂度"></a>思路1时间复杂度</h3><p>$O(n^2)$</p><h3 id="思路1空间复杂度"><a href="#思路1空间复杂度" class="headerlink" title="思路1空间复杂度"></a>思路1空间复杂度</h3><p>$O(n^2)$</p>]]></content>
      
      
      <categories>
          
          <category> Leetcode </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Leetcode </tag>
            
            <tag> Medium </tag>
            
            <tag> 哈希表 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Leetcode:171. Excel表列序号</title>
      <link href="/2020/04/08/leetcode-171-excel-biao-lie-xu-hao/"/>
      <url>/2020/04/08/leetcode-171-excel-biao-lie-xu-hao/</url>
      
        <content type="html"><![CDATA[<h1 id="Leetcode-171-Excel表列序号"><a href="#Leetcode-171-Excel表列序号" class="headerlink" title="Leetcode: 171. Excel表列序号"></a><a href="https://leetcode-cn.com/problems/excel-sheet-column-number/">Leetcode: 171. Excel表列序号</a></h1><h2 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h2><pre><code>给定一个Excel表格中的列名称，返回其相应的列序号。</code></pre><h3 id="例如，"><a href="#例如，" class="headerlink" title="例如，"></a>例如，</h3><pre><code>A -&gt; 1B -&gt; 2C -&gt; 3...Z -&gt; 26AA -&gt; 27AB -&gt; 28 ...</code></pre><h3 id="示例-1"><a href="#示例-1" class="headerlink" title="示例 1:"></a>示例 1:</h3><pre><code>输入: &quot;A&quot;输出: 1</code></pre><h3 id="示例-2"><a href="#示例-2" class="headerlink" title="示例 2:"></a>示例 2:</h3><pre><code>输入: &quot;AB&quot;输出: 28</code></pre><h3 id="示例-3"><a href="#示例-3" class="headerlink" title="示例 3:"></a>示例 3:</h3><pre><code>输入: &quot;ZY&quot;输出: 701</code></pre><h2 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h2><h3 id="思路1"><a href="#思路1" class="headerlink" title="思路1"></a>思路1</h3><p>直接使用26进制思路遍历字符串即可</p><h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><h3 id="代码1"><a href="#代码1" class="headerlink" title="代码1"></a>代码1</h3><pre class=" language-Java"><code class="language-Java">class Solution &#123;    public int titleToNumber(String s) &#123;        if (s == null || s.length() == 0)&#123;            return 0;        &#125;        int result = 0;        for(int i = 0; i < s.length(); i++)&#123;            result = result * 26 + s.charAt(i) - 'A' + 1;        &#125;        return result;    &#125;&#125;</code></pre><h2 id="复杂度分析"><a href="#复杂度分析" class="headerlink" title="复杂度分析"></a>复杂度分析</h2><h3 id="思路1时间复杂度"><a href="#思路1时间复杂度" class="headerlink" title="思路1时间复杂度"></a>思路1时间复杂度</h3><p>$O(n)$</p><h3 id="思路1空间复杂度"><a href="#思路1空间复杂度" class="headerlink" title="思路1空间复杂度"></a>思路1空间复杂度</h3><p>$O(1)$</p>]]></content>
      
      
      <categories>
          
          <category> Leetcode </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Leetcode </tag>
            
            <tag> Easy </tag>
            
            <tag> 字符串 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Leetcode:328. 奇偶链表</title>
      <link href="/2020/04/08/leetcode-328-qi-ou-lian-biao/"/>
      <url>/2020/04/08/leetcode-328-qi-ou-lian-biao/</url>
      
        <content type="html"><![CDATA[<h1 id="Leetcode-328-奇偶链表"><a href="#Leetcode-328-奇偶链表" class="headerlink" title="Leetcode:328. 奇偶链表"></a><a href="https://leetcode-cn.com/problems/odd-even-linked-list">Leetcode:328. 奇偶链表</a></h1><h2 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h2><pre><code>给定一个单链表，把所有的奇数节点和偶数节点分别排在一起。请注意，这里的奇数节点和偶数节点指的是节点编号的奇偶性，而不是节点的值的奇偶性。请尝试使用原地算法完成。你的算法的空间复杂度应为 O(1)，时间复杂度应为 O(nodes)，nodes 为节点总数。</code></pre><h3 id="示例-1"><a href="#示例-1" class="headerlink" title="示例 1:"></a>示例 1:</h3><pre><code>输入: 1-&gt;2-&gt;3-&gt;4-&gt;5-&gt;NULL输出: 1-&gt;3-&gt;5-&gt;2-&gt;4-&gt;NULL</code></pre><h3 id="示例-2"><a href="#示例-2" class="headerlink" title="示例 2:"></a>示例 2:</h3><pre><code>输入: 2-&gt;1-&gt;3-&gt;5-&gt;6-&gt;4-&gt;7-&gt;NULL 输出: 2-&gt;3-&gt;6-&gt;7-&gt;1-&gt;5-&gt;4-&gt;NULL</code></pre><h3 id="说明"><a href="#说明" class="headerlink" title="说明:"></a>说明:</h3><pre><code>应当保持奇数节点和偶数节点的相对顺序。链表的第一个节点视为奇数节点，第二个节点视为偶数节点，以此类推。</code></pre><h2 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h2><h3 id="思路1"><a href="#思路1" class="headerlink" title="思路1"></a>思路1</h3><p>直接使用四个指针分别之前奇数节点起点、遍历；偶数节点、遍历；然后交替更换即可</p><h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><h3 id="代码1"><a href="#代码1" class="headerlink" title="代码1"></a>代码1</h3><pre class=" language-Java"><code class="language-Java">class Solution &#123;    public ListNode oddEvenList(ListNode head) &#123;        if (head == null || head.next == null)&#123;            return head;        &#125;        ListNode even = head.next;        ListNode evenPre = even;        ListNode oddEnd = head;        while(evenPre != null && evenPre.next != null)&#123;            oddEnd.next = evenPre.next;            oddEnd = oddEnd.next;            evenPre.next = oddEnd.next;            evenPre = evenPre.next;        &#125;        oddEnd.next = even;        return head;    &#125;&#125;</code></pre><h2 id="复杂度分析"><a href="#复杂度分析" class="headerlink" title="复杂度分析"></a>复杂度分析</h2><h3 id="思路1时间复杂度"><a href="#思路1时间复杂度" class="headerlink" title="思路1时间复杂度"></a>思路1时间复杂度</h3><p>$O(n)$</p><h3 id="思路2空间复杂度"><a href="#思路2空间复杂度" class="headerlink" title="思路2空间复杂度"></a>思路2空间复杂度</h3><p>$O(1)$</p>]]></content>
      
      
      <categories>
          
          <category> Leetcode </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Leetcode </tag>
            
            <tag> Medium </tag>
            
            <tag> 链表 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Leetcode:237. 删除链表中的节点</title>
      <link href="/2020/04/07/leetcode-237-shan-chu-lian-biao-zhong-de-jie-dian/"/>
      <url>/2020/04/07/leetcode-237-shan-chu-lian-biao-zhong-de-jie-dian/</url>
      
        <content type="html"><![CDATA[<h1 id="Leetcode-237-删除链表中的节点"><a href="#Leetcode-237-删除链表中的节点" class="headerlink" title="Leetcode: 237. 删除链表中的节点"></a><a href="https://leetcode-cn.com/problems/delete-node-in-a-linked-list">Leetcode: 237. 删除链表中的节点</a></h1><h2 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h2><pre><code>请编写一个函数，使其可以删除某个链表中给定的（非末尾）节点，你将只被给定要求被删除的节点。现有一个链表 -- head = [4,5,1,9]，它可以表示为:</code></pre><h2 id="示例-1"><a href="#示例-1" class="headerlink" title="示例 1:"></a>示例 1:</h2><pre><code>输入: head = [4,5,1,9], node = 5输出: [4,1,9]解释: 给定你链表中值为 5 的第二个节点，那么在调用了你的函数之后，该链表应变为 4 -&gt; 1 -&gt; 9.</code></pre><h3 id="示例-2"><a href="#示例-2" class="headerlink" title="示例 2:"></a>示例 2:</h3><pre><code>输入: head = [4,5,1,9], node = 1输出: [4,5,9]解释: 给定你链表中值为 1 的第三个节点，那么在调用了你的函数之后，该链表应变为 4 -&gt; 5 -&gt; 9.</code></pre><h3 id="说明"><a href="#说明" class="headerlink" title="说明:"></a>说明:</h3><pre><code>链表至少包含两个节点。链表中所有节点的值都是唯一的。给定的节点为非末尾节点并且一定是链表中的一个有效节点。不要从你的函数中返回任何结果。</code></pre><h2 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h2><h3 id="思路1"><a href="#思路1" class="headerlink" title="思路1"></a>思路1</h3><p>根据题目描述（不为最后一个节点）可以直接将该节点下一个节点的值赋给当前值，然后删除下一个节点</p><h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><h3 id="代码1"><a href="#代码1" class="headerlink" title="代码1"></a>代码1</h3><pre class=" language-Java"><code class="language-Java">class Solution &#123;    public void deleteNode(ListNode node) &#123;        if (node == null || node.next == null)&#123;            return;        &#125;                node.val = node.next.val;        node.next = node.next.next;    &#125;&#125;</code></pre><h2 id="复杂度分析"><a href="#复杂度分析" class="headerlink" title="复杂度分析"></a>复杂度分析</h2><h3 id="时间复杂度"><a href="#时间复杂度" class="headerlink" title="时间复杂度"></a>时间复杂度</h3><p>$O(1)$</p><h3 id="空间复杂度"><a href="#空间复杂度" class="headerlink" title="空间复杂度"></a>空间复杂度</h3><p>$O(1)$</p>]]></content>
      
      
      <categories>
          
          <category> Leetcode </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Leetcode </tag>
            
            <tag> Easy </tag>
            
            <tag> 链表 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Leetcode:234. 回文链表</title>
      <link href="/2020/04/07/leetcode-234-hui-wen-lian-biao/"/>
      <url>/2020/04/07/leetcode-234-hui-wen-lian-biao/</url>
      
        <content type="html"><![CDATA[<h1 id="Leetcode-234-回文链表"><a href="#Leetcode-234-回文链表" class="headerlink" title="Leetcode:234.回文链表"></a><a href="https://leetcode-cn.com/problems/palindrome-linked-list">Leetcode:234.回文链表</a></h1><h2 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h2><pre><code>请判断一个链表是否为回文链表。</code></pre><h3 id="示例-1"><a href="#示例-1" class="headerlink" title="示例 1:"></a>示例 1:</h3><pre><code>输入: 1-&gt;2输出: false</code></pre><h3 id="示例-2"><a href="#示例-2" class="headerlink" title="示例 2:"></a>示例 2:</h3><pre><code>输入: 1-&gt;2-&gt;2-&gt;1输出: true</code></pre><h3 id="进阶："><a href="#进阶：" class="headerlink" title="进阶："></a>进阶：</h3><pre><code>你能否用 O(n) 时间复杂度和 O(1) 空间复杂度解决此题？</code></pre><h2 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h2><h3 id="思路1-转化为数组再判断"><a href="#思路1-转化为数组再判断" class="headerlink" title="思路1:转化为数组再判断"></a>思路1:转化为数组再判断</h3><p>将链表使用一个列表存储，然后再判断数组是否是回文</p><h3 id="思路2-修改原链表，将后半部分链表反向"><a href="#思路2-修改原链表，将后半部分链表反向" class="headerlink" title="思路2: 修改原链表，将后半部分链表反向"></a>思路2: 修改原链表，将后半部分链表反向</h3><p>使用快慢指针得到链表中间位置，然后对后半部分链表进行反转然后比较判断是否是回文链表</p><h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><h3 id="代码1"><a href="#代码1" class="headerlink" title="代码1"></a>代码1</h3><pre class=" language-Java"><code class="language-Java">class Solution &#123;    public boolean isPalindrome(ListNode head) &#123;        if (head == null || head.next == null)&#123;            return true;        &#125;        ArrayList<Integer> getNums = new ArrayList<>();        ListNode pre = head;        while(pre != null)&#123;            getNums.add(pre.val);            pre = pre.next;        &#125;        int arraySize = getNums.size();        for(int i = 0; i < arraySize / 2; i++)&#123;            if (!getNums.get(i).equals(getNums.get(arraySize - i - 1)))&#123;                return false;            &#125;        &#125;        return true;    &#125;&#125;</code></pre><h3 id="代码2"><a href="#代码2" class="headerlink" title="代码2"></a>代码2</h3><pre class=" language-Java"><code class="language-Java">class Solution &#123;    public boolean isPalindrome(ListNode head) &#123;        if (head == null || head.next == null)&#123;            return true;        &#125;        ListNode fast = head, slow = head;        while (fast != null && fast.next != null)&#123;            fast = fast.next.next;            slow = slow.next;        &#125;        ListNode pre = null;        ListNode forward = slow.next;        while(slow != null)&#123;            slow.next = pre;            pre = slow;            slow = forward;            if (forward != null)&#123;                forward = forward.next;            &#125;        &#125;        forward = head;        while(pre != null)&#123;            if (forward.val != pre.val)&#123;                return false;            &#125;            pre = pre.next;            forward = forward.next;        &#125;        return true;    &#125;&#125;</code></pre><h2 id="复杂度分析"><a href="#复杂度分析" class="headerlink" title="复杂度分析"></a>复杂度分析</h2><h3 id="思路1时间复杂度"><a href="#思路1时间复杂度" class="headerlink" title="思路1时间复杂度"></a>思路1时间复杂度</h3><p>$O(n)$</p><h3 id="思路1空间复杂度"><a href="#思路1空间复杂度" class="headerlink" title="思路1空间复杂度"></a>思路1空间复杂度</h3><p>$O(n)$</p><h3 id="思路2时间复杂度"><a href="#思路2时间复杂度" class="headerlink" title="思路2时间复杂度"></a>思路2时间复杂度</h3><p>$O(n)$</p><h3 id="思路2空间复杂U盾"><a href="#思路2空间复杂U盾" class="headerlink" title="思路2空间复杂U盾"></a>思路2空间复杂U盾</h3><p>$O(1)$</p>]]></content>
      
      
      <categories>
          
          <category> Leetcode </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Leetcode </tag>
            
            <tag> Easy </tag>
            
            <tag> 链表 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Leetcode:206. 反转链表</title>
      <link href="/2020/04/07/leetcode-206-fan-zhuan-lian-biao/"/>
      <url>/2020/04/07/leetcode-206-fan-zhuan-lian-biao/</url>
      
        <content type="html"><![CDATA[<h1 id="Leetcode-206-反转链表"><a href="#Leetcode-206-反转链表" class="headerlink" title="Leetcode:206.反转链表"></a><a href="https://leetcode-cn.com/problems/reverse-linked-list/">Leetcode:206.反转链表</a></h1><h2 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h2><pre><code>反转一个单链表。</code></pre><h3 id="示例"><a href="#示例" class="headerlink" title="示例:"></a>示例:</h3><pre><code>输入: 1-&gt;2-&gt;3-&gt;4-&gt;5-&gt;NULL输出: 5-&gt;4-&gt;3-&gt;2-&gt;1-&gt;NULL进阶:你可以迭代或递归地反转链表。你能否用两种方法解决这道题？</code></pre><h2 id="思路1-迭代"><a href="#思路1-迭代" class="headerlink" title="思路1:迭代"></a>思路1:迭代</h2><p>使用三个指针分别指向之前，现在和将来的位置，然后遍历逆转即可</p><h2 id="思路2-递归"><a href="#思路2-递归" class="headerlink" title="思路2:递归"></a>思路2:递归</h2><p>需要考虑从尾指针开始，然后开始递归，即考虑从后开始。然后利用当前指针的下一个位置进行递归，然后逆转。</p><h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><h3 id="代码1"><a href="#代码1" class="headerlink" title="代码1"></a>代码1</h3><pre class=" language-Java"><code class="language-Java">class Solution &#123;    public ListNode reverseList(ListNode head) &#123;        if (head == null || head.next == null)&#123;            return head;        &#125;        ListNode pre = null;        ListNode now = head;        ListNode forward = head.next;        while(now != null)&#123;            now.next = pre;            pre = now;            now = forward;            if (forward != null)&#123;                forward = forward.next;            &#125;        &#125;        return pre;    &#125;&#125;</code></pre><h3 id="代码2"><a href="#代码2" class="headerlink" title="代码2"></a>代码2</h3><pre class=" language-Java"><code class="language-Java">class Solution2 &#123;    public ListNode reverseList(ListNode head) &#123;        if (head == null || head.next == null)&#123;            return head;        &#125;        ListNode pre = reverseList(head.next);        head.next.next = head;        head.next = null;        return pre;    &#125;&#125;</code></pre><h2 id="复杂度分析"><a href="#复杂度分析" class="headerlink" title="复杂度分析"></a>复杂度分析</h2><h3 id="思路1时间复杂度"><a href="#思路1时间复杂度" class="headerlink" title="思路1时间复杂度"></a>思路1时间复杂度</h3><p>$O(n)$</p><h3 id="思路1空间复杂度"><a href="#思路1空间复杂度" class="headerlink" title="思路1空间复杂度"></a>思路1空间复杂度</h3><p>$O(1)$</p><h3 id="思路2时间复杂度"><a href="#思路2时间复杂度" class="headerlink" title="思路2时间复杂度"></a>思路2时间复杂度</h3><p>$O(n)$</p><h3 id="思路2空间复杂度"><a href="#思路2空间复杂度" class="headerlink" title="思路2空间复杂度"></a>思路2空间复杂度</h3><p>$O(n)$会使用n层栈空间</p>]]></content>
      
      
      <categories>
          
          <category> Leetcode </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Leetcode </tag>
            
            <tag> Easy </tag>
            
            <tag> 链表 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Leetcode:160. 相交链表</title>
      <link href="/2020/04/06/leetcode-160-xiang-jiao-lian-biao/"/>
      <url>/2020/04/06/leetcode-160-xiang-jiao-lian-biao/</url>
      
        <content type="html"><![CDATA[<h1 id="Leetcode-160-相交链表"><a href="#Leetcode-160-相交链表" class="headerlink" title="[Leetcode:160.相交链表]"></a>[Leetcode:160.相交链表]</h1><h2 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h2><pre><code>编写一个程序，找到两个单链表相交的起始节点。如下面的两个链表：在节点 c1 开始相交。</code></pre><h3 id="示例-1："><a href="#示例-1：" class="headerlink" title="示例 1："></a>示例 1：</h3><pre><code>输入：intersectVal = 8, listA = [4,1,8,4,5], listB = [5,0,1,8,4,5], skipA = 2, skipB = 3输出：Reference of the node with value = 8输入解释：相交节点的值为 8 （注意，如果两个列表相交则不能为 0）。从各自的表头开始算起，链表 A 为 [4,1,8,4,5]，链表 B 为 [5,0,1,8,4,5]。在 A 中，相交节点前有 2 个节点；在 B 中，相交节点前有 3 个节点。</code></pre><h3 id="示例-2："><a href="#示例-2：" class="headerlink" title="示例 2："></a>示例 2：</h3><pre><code>输入：intersectVal = 2, listA = [0,9,1,2,4], listB = [3,2,4], skipA = 3, skipB = 1输出：Reference of the node with value = 2输入解释：相交节点的值为 2 （注意，如果两个列表相交则不能为 0）。从各自的表头开始算起，链表 A 为 [0,9,1,2,4]，链表 B 为 [3,2,4]。在 A 中，相交节点前有 3 个节点；在 B 中，相交节点前有 1 个节点。</code></pre><p> </p><h3 id="示例-3："><a href="#示例-3：" class="headerlink" title="示例 3："></a>示例 3：</h3><pre><code>输入：intersectVal = 0, listA = [2,6,4], listB = [1,5], skipA = 3, skipB = 2输出：null输入解释：从各自的表头开始算起，链表 A 为 [2,6,4]，链表 B 为 [1,5]。由于这两个链表不相交，所以 intersectVal 必须为 0，而 skipA 和 skipB 可以是任意值。解释：这两个链表不相交，因此返回 null。</code></pre><h3 id="注意："><a href="#注意：" class="headerlink" title="注意："></a>注意：</h3><pre><code>如果两个链表没有交点，返回 null.在返回结果后，两个链表仍须保持原有的结构。可假定整个链表结构中没有循环。程序尽量满足 O(n) 时间复杂度，且仅用 O(1) 内存。</code></pre><h2 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h2><h3 id="思路1"><a href="#思路1" class="headerlink" title="思路1"></a>思路1</h3><p>对链表的节点数量计数后分别遍历，然后长的链表先遍历完注定不相交的前段，然后开始同时遍历知道相同</p><h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><h3 id="代码1"><a href="#代码1" class="headerlink" title="代码1"></a>代码1</h3><pre class=" language-Java"><code class="language-Java">public class Solution &#123;    public ListNode getIntersectionNode(ListNode headA, ListNode headB) &#123;       if ((headA == null && headB != null) || (headA != null && headB == null))&#123;          return null;       &#125;        int countA = 0, countB = 0;        ListNode preA = headA, preB = headB;        while (preA != null)&#123;            preA = preA.next;            countA += 1;        &#125;        while (preB != null)&#123;            preB = preB.next;            countB += 1;        &#125;        preA = headA;        preB = headB;        while(countA > countB)&#123;            preA = preA.next;            countA--;        &#125;        while(countA < countB)&#123;            preB = preB.next;            countB--;        &#125;                while(preA != null)&#123;            if (preA == preB)&#123;                return preA;            &#125;            preA = preA.next;            preB = preB.next;        &#125;        return null;    &#125;&#125;</code></pre><h2 id="复杂度分析"><a href="#复杂度分析" class="headerlink" title="复杂度分析"></a>复杂度分析</h2><h3 id="代码1时间复杂度"><a href="#代码1时间复杂度" class="headerlink" title="代码1时间复杂度"></a>代码1时间复杂度</h3><p>$O(n)$</p><h3 id="代码1空间复杂度"><a href="#代码1空间复杂度" class="headerlink" title="代码1空间复杂度"></a>代码1空间复杂度</h3><p>$O(1)$</p>]]></content>
      
      
      <categories>
          
          <category> Leetcode </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Leetcode </tag>
            
            <tag> Easy </tag>
            
            <tag> 链表 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Leetcode:148. 排序链表</title>
      <link href="/2020/04/06/leetcode-148-pai-xu-lian-biao/"/>
      <url>/2020/04/06/leetcode-148-pai-xu-lian-biao/</url>
      
        <content type="html"><![CDATA[<p>#<a href="https://leetcode-cn.com/problems/sort-list/">Leetcode: 141.排序链表</a></p><h2 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h2><pre><code>在 O(n log n) 时间复杂度和常数级空间复杂度下，对链表进行排序。</code></pre><h3 id="示例-1"><a href="#示例-1" class="headerlink" title="示例 1:"></a>示例 1:</h3><pre><code>输入: 4-&gt;2-&gt;1-&gt;3输出: 1-&gt;2-&gt;3-&gt;4</code></pre><h3 id="示例-2"><a href="#示例-2" class="headerlink" title="示例 2:"></a>示例 2:</h3><pre><code>输入: -1-&gt;5-&gt;3-&gt;4-&gt;0输出: -1-&gt;0-&gt;3-&gt;4-&gt;5</code></pre><h2 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h2><h3 id="思路1"><a href="#思路1" class="headerlink" title="思路1"></a>思路1</h3><p>使用快排实现，值修改</p><h3 id="思路2"><a href="#思路2" class="headerlink" title="思路2"></a>思路2</h3><p>使用归并排序，实现平均复杂度$O(n)$,因为链表可以直接引用空间，所以可以不用额外的$O(nlogn)$空间，需要注意获取中间节点的快指针位置初始设置</p><h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><h3 id="思路1代码"><a href="#思路1代码" class="headerlink" title="思路1代码"></a>思路1代码</h3><pre class=" language-Java"><code class="language-Java">/** * Definition for singly-linked list. * public class ListNode &#123; *     int val; *     ListNode next; *     ListNode(int x) &#123; val = x; &#125; * &#125; */class Solution &#123;    public ListNode sortList(ListNode head) &#123;        if (head == null || head.next == null)&#123;            return head;        &#125;                quickSort(head, null);                return head;    &#125;        private void quickSort(ListNode head, ListNode end)&#123;        if (head != end)&#123;            ListNode midNode = getPartition(head, end);            quickSort(head, midNode);            quickSort(midNode.next, end);        &#125;    &#125;        private ListNode getPartition(ListNode head, ListNode end)&#123;        ListNode getNode = head;        int getNum = head.val;        ListNode pre = head.next;                while(pre != null)&#123;            if (pre == end)&#123;                break;            &#125;            if (pre.val < getNum)&#123;                getNode = getNode.next;                int tempNum = pre.val;                pre.val = getNode.val;                getNode.val = tempNum;            &#125;            pre = pre.next;        &#125;                int tempNum = getNode.val;        getNode.val = head.val;        head.val = tempNum;                return getNode;    &#125;&#125;</code></pre><h3 id="代码2"><a href="#代码2" class="headerlink" title="代码2"></a>代码2</h3><pre class=" language-Java"><code class="language-Java">/** * Definition for singly-linked list. * public class ListNode &#123; *     int val; *     ListNode next; *     ListNode(int x) &#123; val = x; &#125; * &#125; */class Solution &#123;    public ListNode sortList(ListNode head) &#123;        if (head == null || head.next == null)&#123;            return head;        &#125;                ListNode pre = head.next;        ListNode middle = head;        while (pre != null && pre.next != null)&#123;            pre = pre.next.next;            middle = middle.next;        &#125;                pre = middle.next;        middle.next = null;        ListNode left = sortList(head);        ListNode right = sortList(pre);                ListNode result = new ListNode(0);        ListNode temp = result;        while (left != null && right != null)&#123;            if (left.val < right.val)&#123;                temp.next = left;                left = left.next;            &#125;else&#123;                temp.next = right;                right = right.next;            &#125;            temp = temp.next;        &#125;        temp.next = right;        if (left != null)&#123;            temp.next = left;        &#125;                return result.next;    &#125;&#125;</code></pre><h2 id="复杂度分析"><a href="#复杂度分析" class="headerlink" title="复杂度分析"></a>复杂度分析</h2><h3 id="思路1时间复杂度"><a href="#思路1时间复杂度" class="headerlink" title="思路1时间复杂度"></a>思路1时间复杂度</h3><p>最坏$O(n^2)$，平均$O(nlogn)$</p><h3 id="思路1空间复杂度"><a href="#思路1空间复杂度" class="headerlink" title="思路1空间复杂度"></a>思路1空间复杂度</h3><p>$O(1)$</p><h3 id="思路2时间复杂度"><a href="#思路2时间复杂度" class="headerlink" title="思路2时间复杂度"></a>思路2时间复杂度</h3><p>$O(nlogn)$</p><h3 id="思路2空间复杂度"><a href="#思路2空间复杂度" class="headerlink" title="思路2空间复杂度"></a>思路2空间复杂度</h3><p>$O(1)$</p>]]></content>
      
      
      <categories>
          
          <category> Leetcode </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Leetcode </tag>
            
            <tag> Medium </tag>
            
            <tag> 快排 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Leetcode:141. 环形链表</title>
      <link href="/2020/04/06/leetcode-141-huan-xing-lian-biao/"/>
      <url>/2020/04/06/leetcode-141-huan-xing-lian-biao/</url>
      
        <content type="html"><![CDATA[<h1 id="Leetcode-141-环形链表"><a href="#Leetcode-141-环形链表" class="headerlink" title="Leetcode:141. 环形链表"></a><a href="https://leetcode-cn.com/problems/linked-list-cycle/">Leetcode:141. 环形链表</a></h1><h2 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h2><pre><code>给定一个链表，判断链表中是否有环。为了表示给定链表中的环，我们使用整数 pos 来表示链表尾连接到链表中的位置（索引从 0 开始）。 如果 pos 是 -1，则在该链表中没有环。</code></pre><h3 id="示例-1："><a href="#示例-1：" class="headerlink" title="示例 1："></a>示例 1：</h3><pre><code>输入：head = [3,2,0,-4], pos = 1输出：true解释：链表中有一个环，其尾部连接到第二个节点。</code></pre><h3 id="示例-2："><a href="#示例-2：" class="headerlink" title="示例 2："></a>示例 2：</h3><pre><code>输入：head = [1,2], pos = 0输出：true解释：链表中有一个环，其尾部连接到第一个节点。</code></pre><h3 id="示例-3："><a href="#示例-3：" class="headerlink" title="示例 3："></a>示例 3：</h3><pre><code>输入：head = [1], pos = -1输出：false解释：链表中没有环。</code></pre><h3 id="进阶："><a href="#进阶：" class="headerlink" title="进阶："></a>进阶：</h3><pre><code>你能用 O(1)（即，常量）内存解决此问题吗？</code></pre><h2 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h2><h3 id="思路1"><a href="#思路1" class="headerlink" title="思路1"></a>思路1</h3><p>快慢指针，使用快慢指针遍历链表看是否会有相交</p><h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><h3 id="代码1"><a href="#代码1" class="headerlink" title="代码1"></a>代码1</h3><pre class=" language-Java"><code class="language-Java">public class Solution &#123;    public boolean hasCycle(ListNode head) &#123;        if (head == null || head.next == null)&#123;            return false;        &#125;                ListNode fast = head;        ListNode slow = head;                do&#123;            slow = slow.next;            fast = fast.next != null ? fast.next.next : null;        &#125;        while (fast != null && slow != null && (fast != slow));        if (fast == slow && fast != null)&#123;            return true;        &#125;else&#123;            return false;        &#125;    &#125;&#125;</code></pre><h2 id="复杂度分析"><a href="#复杂度分析" class="headerlink" title="复杂度分析"></a>复杂度分析</h2><h3 id="思路1时间复杂度"><a href="#思路1时间复杂度" class="headerlink" title="思路1时间复杂度"></a>思路1时间复杂度</h3><p>$O(n)$</p><h3 id="思路1空间复杂度"><a href="#思路1空间复杂度" class="headerlink" title="思路1空间复杂度"></a>思路1空间复杂度</h3><p>$O(1)$</p>]]></content>
      
      
      <categories>
          
          <category> Leetcode </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Leetcode </tag>
            
            <tag> Easy </tag>
            
            <tag> 快慢指针 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Leetcode:138. 复制带随机指针的链表</title>
      <link href="/2020/04/06/leetcode-138-fu-zhi-dai-sui-ji-zhi-zhen-de-lian-biao/"/>
      <url>/2020/04/06/leetcode-138-fu-zhi-dai-sui-ji-zhi-zhen-de-lian-biao/</url>
      
        <content type="html"><![CDATA[<h1 id="Leetcode-138-复制带随机指针的链表"><a href="#Leetcode-138-复制带随机指针的链表" class="headerlink" title="Leetcode:138. 复制带随机指针的链表"></a><a href="https://leetcode-cn.com/problems/copy-list-with-random-pointer">Leetcode:138. 复制带随机指针的链表</a></h1><h2 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h2><pre><code>给定一个链表，每个节点包含一个额外增加的随机指针，该指针可以指向链表中的任何节点或空节点。要求返回这个链表的 深拷贝。 我们用一个由 n 个节点组成的链表来表示输入/输出中的链表。每个节点用一个 [val, random_index] 表示：val：一个表示 Node.val 的整数。random_index：随机指针指向的节点索引（范围从 0 到 n-1）；如果不指向任何节点，则为  null 。</code></pre><h3 id="示例-1："><a href="#示例-1：" class="headerlink" title="示例 1："></a>示例 1：</h3><pre><code>输入：head = [[7,null],[13,0],[11,4],[10,2],[1,0]]输出：[[7,null],[13,0],[11,4],[10,2],[1,0]]</code></pre><h3 id="示例-2："><a href="#示例-2：" class="headerlink" title="示例 2："></a>示例 2：</h3><pre><code>输入：head = [[1,1],[2,1]]输出：[[1,1],[2,1]]</code></pre><h3 id="示例-3："><a href="#示例-3：" class="headerlink" title="示例 3："></a>示例 3：</h3><pre><code>输入：head = [[3,null],[3,0],[3,null]]输出：[[3,null],[3,0],[3,null]]</code></pre><h3 id="示例-4："><a href="#示例-4：" class="headerlink" title="示例 4："></a>示例 4：</h3><pre><code>输入：head = []输出：[]解释：给定的链表为空（空指针），因此返回 null。</code></pre><h3 id="提示："><a href="#提示：" class="headerlink" title="提示："></a>提示：</h3><pre><code>-10000 &lt;= Node.val &lt;= 10000Node.random 为空（null）或指向链表中的节点。节点数目不超过 1000 。</code></pre><h2 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h2><p>&#x2F;&#x2F;TODO：其他思路</p><h3 id="思路1"><a href="#思路1" class="headerlink" title="思路1"></a>思路1</h3><p>直接在原来的链表位置旁复制，然后遍历分离</p><h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><pre class=" language-Java"><code class="language-Java">/*// Definition for a Node.class Node &#123;    int val;    Node next;    Node random;    public Node(int val) &#123;        this.val = val;        this.next = null;        this.random = null;    &#125;&#125;*/class Solution &#123;    public Node copyRandomList(Node head) &#123;        if (head == null)&#123;            return null;        &#125;                Node pre = head;                while(pre != null)&#123;            Node newNode = new Node(pre.val);            newNode.next = pre.next;            pre.next = newNode;            pre = pre.next.next;        &#125;                pre = head;                while(pre != null)&#123;            if (pre.next != null && pre.random != null)&#123;                pre.next.random = pre.random.next;            &#125; else &#123;                pre.next.random = null;            &#125;            pre = pre.next.next;        &#125;                Node origin = head;        pre = head.next;        Node result = head.next;                while(pre != null)&#123;            origin.next = origin.next.next;            if (pre.next == null)&#123;                pre.next = null;            &#125;else&#123;                pre.next = pre.next.next;            &#125;            origin = origin.next;            pre = pre.next;        &#125;                return result;    &#125;&#125;</code></pre><h2 id="复杂度分析"><a href="#复杂度分析" class="headerlink" title="复杂度分析"></a>复杂度分析</h2><h3 id="思路1时间复杂度"><a href="#思路1时间复杂度" class="headerlink" title="思路1时间复杂度"></a>思路1时间复杂度</h3><p>$O(n)$</p><h3 id="思路1空间复杂度分析"><a href="#思路1空间复杂度分析" class="headerlink" title="思路1空间复杂度分析"></a>思路1空间复杂度分析</h3><p>$O(1)$如果不算结果空间</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Leetcode:150. 逆波兰表达式求值</title>
      <link href="/2020/04/05/leetcode-150-ni-bo-lan-biao-da-shi-qiu-zhi/"/>
      <url>/2020/04/05/leetcode-150-ni-bo-lan-biao-da-shi-qiu-zhi/</url>
      
        <content type="html"><![CDATA[<h1 id="Leetcode-150-逆波兰表达式求值"><a href="#Leetcode-150-逆波兰表达式求值" class="headerlink" title="Leetcode:150. 逆波兰表达式求值"></a><a href="https://leetcode-cn.com/problems/evaluate-reverse-polish-notation/">Leetcode:150. 逆波兰表达式求值</a></h1><h2 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h2><pre><code>根据逆波兰表示法，求表达式的值。有效的运算符包括 +, -, *, / 。每个运算对象可以是整数，也可以是另一个逆波兰表达式。</code></pre><h3 id="说明："><a href="#说明：" class="headerlink" title="说明："></a>说明：</h3><pre><code>整数除法只保留整数部分。给定逆波兰表达式总是有效的。换句话说，表达式总会得出有效数值且不存在除数为 0 的情况。</code></pre><h3 id="示例-1："><a href="#示例-1：" class="headerlink" title="示例 1："></a>示例 1：</h3><pre><code>输入: [&quot;2&quot;, &quot;1&quot;, &quot;+&quot;, &quot;3&quot;, &quot;*&quot;]输出: 9解释: ((2 + 1) * 3) = 9</code></pre><h3 id="示例-2："><a href="#示例-2：" class="headerlink" title="示例 2："></a>示例 2：</h3><pre><code>输入: [&quot;4&quot;, &quot;13&quot;, &quot;5&quot;, &quot;/&quot;, &quot;+&quot;]输出: 6解释: (4 + (13 / 5)) = 6</code></pre><h3 id="示例-3："><a href="#示例-3：" class="headerlink" title="示例 3："></a>示例 3：</h3><pre><code>输入: [&quot;10&quot;, &quot;6&quot;, &quot;9&quot;, &quot;3&quot;, &quot;+&quot;, &quot;-11&quot;, &quot;*&quot;, &quot;/&quot;, &quot;*&quot;, &quot;17&quot;, &quot;+&quot;, &quot;5&quot;, &quot;+&quot;]输出: 22解释: ((10 * (6 / ((9 + 3) * -11))) + 17) + 5= ((10 * (6 / (12 * -11))) + 17) + 5= ((10 * (6 / -132)) + 17) + 5= ((10 * 0) + 17) + 5= (0 + 17) + 5= 17 + 5= 22</code></pre><h2 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h2><p>使用栈解决，需要注意数字先进后出问题</p><h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><pre class=" language-Java"><code class="language-Java">class Solution &#123;    public int evalRPN(String[] tokens) &#123;        if (tokens == null || tokens.length == 0)&#123;            return 0;        &#125;        Stack<Integer> stack = new Stack<>();        int num1 = 0;        int num2 = 0;        for(String token: tokens)&#123;            if (token.equals("+") || token.equals("-") || token.equals("*") || token.equals("/"))&#123;                num1 = stack.pop();                num2 = stack.pop();                switch(token)&#123;                    case "+":                        stack.push(num1 + num2);                        break;                    case "-":                        stack.push(num2 - num1);                        break;                    case "*":                        stack.push(num2 * num1);                        break;                    case "/":                        stack.push(num2 / num1);                &#125;            &#125; else &#123;                stack.push(Integer.valueOf(token));            &#125;        &#125;        return stack.pop();    &#125;&#125;</code></pre><h2 id="复杂度分析"><a href="#复杂度分析" class="headerlink" title="复杂度分析"></a>复杂度分析</h2><h3 id="时间复杂度"><a href="#时间复杂度" class="headerlink" title="时间复杂度"></a>时间复杂度</h3><p>$O(n)$</p><h3 id="空间复杂度"><a href="#空间复杂度" class="headerlink" title="空间复杂度"></a>空间复杂度</h3><p>$O(n)$</p>]]></content>
      
      
      <categories>
          
          <category> Leetcode </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Leetcode </tag>
            
            <tag> Medium </tag>
            
            <tag> 栈 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Leetcode:341. 扁平化嵌套列表迭代器</title>
      <link href="/2020/04/05/leetcode-341-bian-ping-hua-qian-tao-lie-biao-die-dai-qi/"/>
      <url>/2020/04/05/leetcode-341-bian-ping-hua-qian-tao-lie-biao-die-dai-qi/</url>
      
        <content type="html"><![CDATA[<h1 id="Leetcode-341-扁平化嵌套列表迭代器"><a href="#Leetcode-341-扁平化嵌套列表迭代器" class="headerlink" title="Leetcode:341. 扁平化嵌套列表迭代器"></a><a href="https://leetcode-cn.com/problems/flatten-nested-list-iterator/">Leetcode:341. 扁平化嵌套列表迭代器</a></h1><h2 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h2><pre><code>给你一个嵌套的整型列表。请你设计一个迭代器，使其能够遍历这个整型列表中的所有整数。列表中的每一项或者为一个整数，或者是另一个列表。其中列表的元素也可能是整数或是其他列表。</code></pre><h3 id="示例-1"><a href="#示例-1" class="headerlink" title="示例 1:"></a>示例 1:</h3><pre><code>输入: [[1,1],2,[1,1]]输出: [1,1,2,1,1]解释: 通过重复调用 next 直到 hasNext 返回 false，next 返回的元素的顺序应该是: [1,1,2,1,1]。</code></pre><h3 id="示例-2"><a href="#示例-2" class="headerlink" title="示例 2:"></a>示例 2:</h3><pre><code>输入: [1,[4,[6]]]输出: [1,4,6]解释: 通过重复调用 next 直到 hasNext 返回 false，next 返回的元素的顺序应该是: [1,4,6]。</code></pre><h2 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h2><p>使用深度优先遍历获取递归的数字</p><h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><pre class=" language-Java"><code class="language-Java">/** * // This is the interface that allows for creating nested lists. * // You should not implement it, or speculate about its implementation * public interface NestedInteger &#123; * *     // @return true if this NestedInteger holds a single integer, rather than a nested list. *     public boolean isInteger(); * *     // @return the single integer that this NestedInteger holds, if it holds a single integer *     // Return null if this NestedInteger holds a nested list *     public Integer getInteger(); * *     // @return the nested list that this NestedInteger holds, if it holds a nested list *     // Return null if this NestedInteger holds a single integer *     public List<NestedInteger> getList(); * &#125; */public class NestedIterator implements Iterator<Integer> &#123;        Queue<Integer> queue;    public NestedIterator(List<NestedInteger> nestedList) &#123;        queue = new LinkedList<Integer>();        for(NestedInteger node: nestedList)&#123;            DFS(node);        &#125;    &#125;    @Override    public Integer next() &#123;        return queue.poll();    &#125;    @Override    public boolean hasNext() &#123;        return !queue.isEmpty();    &#125;        private void DFS(NestedInteger node)&#123;        if (node.isInteger())&#123;            queue.offer(node.getInteger());        &#125; else &#123;            for(NestedInteger sonNode: node.getList())&#123;                DFS(sonNode);            &#125;        &#125;    &#125;&#125;/** * Your NestedIterator object will be instantiated and called as such: * NestedIterator i = new NestedIterator(nestedList); * while (i.hasNext()) v[f()] = i.next(); */</code></pre><h2 id="复杂度分析"><a href="#复杂度分析" class="headerlink" title="复杂度分析"></a>复杂度分析</h2><h3 id="时间复杂度"><a href="#时间复杂度" class="headerlink" title="时间复杂度"></a>时间复杂度</h3><p>$O(n)$,n为元素个数</p><h3 id="空间复杂度"><a href="#空间复杂度" class="headerlink" title="空间复杂度"></a>空间复杂度</h3><p>$O(n)$</p>]]></content>
      
      
      <categories>
          
          <category> Leetcode </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Leetcode </tag>
            
            <tag> Medium </tag>
            
            <tag> DFS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Leetcode:227. 基本计算器 II</title>
      <link href="/2020/04/04/leetcode-227-ji-ben-ji-suan-qi-ii/"/>
      <url>/2020/04/04/leetcode-227-ji-ben-ji-suan-qi-ii/</url>
      
        <content type="html"><![CDATA[<h1 id="Leetcode-227-基本计算器-II"><a href="#Leetcode-227-基本计算器-II" class="headerlink" title="Leetcode 227. 基本计算器 II"></a><a href="https://leetcode-cn.com/problems/basic-calculator-ii/">Leetcode 227. 基本计算器 II</a></h1><h2 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h2><pre><code>实现一个基本的计算器来计算一个简单的字符串表达式的值。字符串表达式仅包含非负整数，+， - ，*，/ 四种运算符和空格  。 整数除法仅保留整数部分。</code></pre><h3 id="示例-1"><a href="#示例-1" class="headerlink" title="示例 1:"></a>示例 1:</h3><pre><code>输入: &quot;3+2*2&quot;输出: 7</code></pre><h3 id="示例-2"><a href="#示例-2" class="headerlink" title="示例 2:"></a>示例 2:</h3><pre><code>输入: &quot; 3/2 &quot;输出: 1</code></pre><h3 id="示例-3"><a href="#示例-3" class="headerlink" title="示例 3:"></a>示例 3:</h3><pre><code>输入: &quot; 3+5 / 2 &quot;输出: 5</code></pre><p>说明：<br>    你可以假设所给定的表达式都是有效的。<br>    请不要使用内置的库函数 eval。</p><h2 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h2><h3 id="思路1：栈"><a href="#思路1：栈" class="headerlink" title="思路1：栈"></a>思路1：栈</h3><p>使用一个栈存储数字，然后使用一个符号记录延后记录运算符，初始为+，最后出栈相加即可得到最后的结果</p><h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><h3 id="代码1"><a href="#代码1" class="headerlink" title="代码1"></a>代码1</h3><pre class=" language-Java"><code class="language-Java">class Solution &#123;    public int calculate(String s) &#123;        if (s == null || s.length() == 0)&#123;            return 0;        &#125;                int result = 0;        int tempNum = 0;        char tempOp = '+';        int getNum = 0;        Stack<Integer> stack = new Stack<>();                for(int i = 0; i < s.length(); i++)&#123;            char ch = s.charAt(i);            if (ch >= '0' && ch <= '9')&#123;                tempNum = tempNum * 10 + ch - '0';            &#125;             if ((ch != ' ' && (ch < '0' || ch  > '9')) || i == s.length() - 1)&#123;                switch(tempOp)&#123;                    case '+':                        stack.push(tempNum);                        break;                    case '-':                        stack.push(-tempNum);                        break;                    case '*':                        getNum = stack.peek() * tempNum;                        stack.pop();                        stack.push(getNum);                        break;                    case '/':                        getNum = stack.peek() / tempNum;                        stack.pop();                        stack.push(getNum);                        break;                &#125;                tempNum = 0;                tempOp = ch;            &#125;        &#125;        while(!stack.isEmpty())&#123;            result += stack.pop();        &#125;        return result;    &#125;&#125;</code></pre><h2 id="复杂度分析"><a href="#复杂度分析" class="headerlink" title="复杂度分析"></a>复杂度分析</h2><h3 id="时间复杂度"><a href="#时间复杂度" class="headerlink" title="时间复杂度"></a>时间复杂度</h3><p>$O(n)$</p><h3 id="空间复杂度"><a href="#空间复杂度" class="headerlink" title="空间复杂度"></a>空间复杂度</h3><p>$O(n)$</p>]]></content>
      
      
      <categories>
          
          <category> Leetcode </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Leetcode </tag>
            
            <tag> Medium </tag>
            
            <tag> 栈 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Leetcode:239. 滑动窗口最大值</title>
      <link href="/2020/04/03/leetcode-239-hua-dong-chuang-kou-zui-da-zhi/"/>
      <url>/2020/04/03/leetcode-239-hua-dong-chuang-kou-zui-da-zhi/</url>
      
        <content type="html"><![CDATA[<h1 id="Leetcode-239-滑动窗口最大值"><a href="#Leetcode-239-滑动窗口最大值" class="headerlink" title="Leetcode: 239. 滑动窗口最大值"></a><a href="https://leetcode-cn.com/problems/sliding-window-maximum/">Leetcode: 239. 滑动窗口最大值</a></h1><h2 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h2><pre><code>给定一个数组 nums，有一个大小为 k 的滑动窗口从数组的最左侧移动到数组的最右侧。你只可以看到在滑动窗口内的 k 个数字。滑动窗口每次只向右移动一位。返回滑动窗口中的最大值。 进阶：你能在线性时间复杂度内解决此题吗？</code></pre><h3 id="示例"><a href="#示例" class="headerlink" title="示例:"></a>示例:</h3><pre><code>输入: nums = [1,3,-1,-3,5,3,6,7], 和 k = 3输出: [3,3,5,5,6,7] 解释: 滑动窗口的位置                最大值---------------               -----[1  3  -1] -3  5  3  6  7       31 [3  -1  -3] 5  3  6  7       31  3 [-1  -3  5] 3  6  7       51  3  -1 [-3  5  3] 6  7       51  3  -1  -3 [5  3  6] 7       61  3  -1  -3  5 [3  6  7]      7</code></pre><h3 id="提示："><a href="#提示：" class="headerlink" title="提示："></a>提示：</h3><pre><code>1 &lt;= nums.length &lt;= 10^5-10^4 &lt;= nums[i] &lt;= 10^41 &lt;= k &lt;= nums.length</code></pre><h2 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h2><h3 id="思路1：优先级队列"><a href="#思路1：优先级队列" class="headerlink" title="思路1：优先级队列"></a>思路1：优先级队列</h3><p>使用优先级队列存储一个k的最大堆，大于k时每次去除前面的第k个元素</p><h3 id="思路2：动态规划"><a href="#思路2：动态规划" class="headerlink" title="思路2：动态规划"></a>思路2：动态规划</h3><p>将原数组设置为k个一个单元，然后分别求从左至当前位置的最大值（不超过k单元内）和从右至左，这样可以直接求两个边界最大值即可</p><h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><h3 id="代码1"><a href="#代码1" class="headerlink" title="代码1"></a>代码1</h3><pre class=" language-Java"><code class="language-Java">class Solution &#123;    public int[] maxSlidingWindow(int[] nums, int k) &#123;        if (nums == null || nums.length == 0)&#123;            return nums;        &#125;                PriorityQueue<Integer> pq = new  PriorityQueue<Integer>(Collections.reverseOrder());        int[] result = new int[nums.length - k + 1];                for(int i = 0; i < nums.length; i++)&#123;            if (i >= k) pq.remove(nums[i - k]);            pq.offer(nums[i]);            if (i + 1 >= k) result[i + 1 - k] = pq.peek();        &#125;                return result;    &#125;&#125;</code></pre><h3 id="代码2"><a href="#代码2" class="headerlink" title="代码2"></a>代码2</h3><pre class=" language-Java"><code class="language-Java">class Solution &#123;    public int[] maxSlidingWindow(int[] nums, int k) &#123;        if (nums == null || nums.length == 0)&#123;            return nums;        &#125;                int n = nums.length;        int[] leftDPs = new int[n];        int[] rightDPs = new int[n];        leftDPs[0] = nums[0];        rightDPs[n - 1] = nums[n - 1];        int[] result = new int[n - k + 1];                for(int i = 1; i < n; i++)&#123;            if (i % k != 0)&#123;                leftDPs[i] = Math.max(nums[i], leftDPs[i - 1]);            &#125; else &#123;                leftDPs[i] = nums[i];            &#125;                        int rightIndex = n - i - 1;            if (rightIndex % k != 0)&#123;                rightDPs[rightIndex] = Math.max(nums[rightIndex], rightDPs[rightIndex + 1]);            &#125;else &#123;                rightDPs[rightIndex] = nums[rightIndex];            &#125;        &#125;        for(int i = 0; i < n - k + 1; i++)&#123;            result[i] = Math.max(rightDPs[i], leftDPs[i + k - 1]);        &#125;        return result;    &#125;&#125;</code></pre><h2 id="复杂度分析"><a href="#复杂度分析" class="headerlink" title="复杂度分析"></a>复杂度分析</h2><h3 id="思路1时间复杂度"><a href="#思路1时间复杂度" class="headerlink" title="思路1时间复杂度"></a>思路1时间复杂度</h3><p>$O(nlogk)$</p><h3 id="思路1空间复杂度"><a href="#思路1空间复杂度" class="headerlink" title="思路1空间复杂度"></a>思路1空间复杂度</h3><p>$O(n)$</p><h3 id="思路2时间复杂度"><a href="#思路2时间复杂度" class="headerlink" title="思路2时间复杂度"></a>思路2时间复杂度</h3><p>$O(n)$</p><h3 id="思路2空间复杂度"><a href="#思路2空间复杂度" class="headerlink" title="思路2空间复杂度"></a>思路2空间复杂度</h3><p>$O(n)$</p>]]></content>
      
      
      <categories>
          
          <category> Leetcode </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Leetcode </tag>
            
            <tag> Hard </tag>
            
            <tag> 优先级队列 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Leetcode:347. 前 K 个高频元素</title>
      <link href="/2020/04/01/leetcode-347-qian-k-ge-gao-pin-yuan-su/"/>
      <url>/2020/04/01/leetcode-347-qian-k-ge-gao-pin-yuan-su/</url>
      
        <content type="html"><![CDATA[<h1 id="Leetcode-347-前-K-个高频元素"><a href="#Leetcode-347-前-K-个高频元素" class="headerlink" title="Leetcode:347. 前 K 个高频元素"></a><a href="https://leetcode-cn.com/problems/top-k-frequent-elements/">Leetcode:347. 前 K 个高频元素</a></h1><h2 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h2><pre><code>给定一个非空的整数数组，返回其中出现频率前 k 高的元素。</code></pre><h3 id="示例-1"><a href="#示例-1" class="headerlink" title="示例 1:"></a>示例 1:</h3><pre><code>输入: nums = [1,1,1,2,2,3], k = 2输出: [1,2]</code></pre><h3 id="示例-2"><a href="#示例-2" class="headerlink" title="示例 2:"></a>示例 2:</h3><pre><code>输入: nums = [1], k = 1输出: [1]</code></pre><h3 id="说明："><a href="#说明：" class="headerlink" title="说明："></a>说明：</h3><pre><code>你可以假设给定的 k 总是合理的，且 1 ≤ k ≤ 数组中不相同的元素的个数。你的算法的时间复杂度必须优于 O(n log n) , n 是数组的大小</code></pre><h2 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h2><h3 id="思路1"><a href="#思路1" class="headerlink" title="思路1"></a>思路1</h3><p>维护一个大小为K的最小堆，根据数字出现次数排序</p><h3 id="思路2"><a href="#思路2" class="headerlink" title="思路2"></a>思路2</h3><p>使用桶排序，维护一个出现次数的二维数组</p><h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><h3 id="代码1"><a href="#代码1" class="headerlink" title="代码1"></a>代码1</h3><pre class=" language-Java"><code class="language-Java">class Solution &#123;    public List<Integer> topKFrequent(int[] nums, int k) &#123;        Map<Integer, Integer> map = new HashMap<Integer, Integer>();        for(int num: nums)&#123;            if (!map.containsKey(num))&#123;                map.put(num, 1);            &#125; else&#123;                map.put(num, map.get(num) + 1);            &#125;        &#125;        PriorityQueue<Integer> pq =                new PriorityQueue<Integer>((n1, n2) -> map.get(n1) - map.get(n2));        for(int num: map.keySet())&#123;            pq.add(num);            if (pq.size() > k)&#123;                pq.poll();            &#125;        &#125;        List<Integer> maxQueue = new ArrayList<>();        while (pq.size() != 0)&#123;            maxQueue.add(pq.poll());        &#125;        Collections.reverse(maxQueue);        return maxQueue;    &#125;&#125;</code></pre><h3 id="代码2"><a href="#代码2" class="headerlink" title="代码2"></a>代码2</h3><pre class=" language-Java"><code class="language-Java">class Solution &#123;    public List<Integer> topKFrequent(int[] nums, int k) &#123;        Map<Integer, Integer> map = new HashMap<Integer, Integer>();        for(int num: nums)&#123;            if (!map.containsKey(num))&#123;                map.put(num, 1);            &#125; else&#123;                map.put(num, map.get(num) + 1);            &#125;        &#125;                List<Integer>[] sizeCount = new List[nums.length];                for(int num: map.keySet())&#123;            int getCount = map.get(num) - 1;            if (sizeCount[getCount] == null)&#123;                sizeCount[getCount] = new ArrayList<Integer>();            &#125;            sizeCount[getCount].add(num);        &#125;                List<Integer> maxQueue = new ArrayList<>();        for(int i = nums.length - 1; i >= 0 && maxQueue.size() < k; i--)&#123;            if (sizeCount[i] == null)&#123;                continue;            &#125;else &#123;                maxQueue.addAll(sizeCount[i]);            &#125;        &#125;        return maxQueue;    &#125;&#125;</code></pre><h2 id="复杂度分析"><a href="#复杂度分析" class="headerlink" title="复杂度分析"></a>复杂度分析</h2><h3 id="思路1时间复杂度"><a href="#思路1时间复杂度" class="headerlink" title="思路1时间复杂度"></a>思路1时间复杂度</h3><p>$O(nlogk)$</p><h3 id="思路1空间复杂度"><a href="#思路1空间复杂度" class="headerlink" title="思路1空间复杂度"></a>思路1空间复杂度</h3><p>$O(n)$</p><h3 id="思路1时间复杂度-1"><a href="#思路1时间复杂度-1" class="headerlink" title="思路1时间复杂度"></a>思路1时间复杂度</h3><p>$O(n)$</p><h3 id="思路2空间复杂度"><a href="#思路2空间复杂度" class="headerlink" title="思路2空间复杂度"></a>思路2空间复杂度</h3><p>$O(n)$</p>]]></content>
      
      
      <categories>
          
          <category> Leetcode </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Leetcode </tag>
            
            <tag> Medium </tag>
            
            <tag> 优先队列 </tag>
            
            <tag> 桶排序 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Leetcode:378. 有序矩阵中第K小的元素</title>
      <link href="/2020/03/31/leetcode-378-you-xu-ju-zhen-zhong-di-k-xiao-de-yuan-su/"/>
      <url>/2020/03/31/leetcode-378-you-xu-ju-zhen-zhong-di-k-xiao-de-yuan-su/</url>
      
        <content type="html"><![CDATA[<h1 id="Leetcode-378-有序矩阵中第K小的元素"><a href="#Leetcode-378-有序矩阵中第K小的元素" class="headerlink" title="Leetcode:378. 有序矩阵中第K小的元素"></a><a href="https://leetcode-cn.com/problems/kth-smallest-element-in-a-sorted-matrix/">Leetcode:378. 有序矩阵中第K小的元素</a></h1><h2 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h2><pre><code>给定一个 n x n 矩阵，其中每行和每列元素均按升序排序，找到矩阵中第k小的元素。请注意，它是排序后的第k小元素，而不是第k个元素。</code></pre><h3 id="示例"><a href="#示例" class="headerlink" title="示例:"></a>示例:</h3><pre><code>matrix = [[ 1,  5,  9],[10, 11, 13],[12, 13, 15]],k = 8,</code></pre><p>返回 13。</p><h3 id="说明"><a href="#说明" class="headerlink" title="说明:"></a>说明:</h3><pre><code>你可以假设 k 的值永远是有效的, 1 ≤ k ≤ n2 。</code></pre><h2 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h2><h3 id="思路1：二分法"><a href="#思路1：二分法" class="headerlink" title="思路1：二分法"></a>思路1：二分法</h3><p>使用两个哨兵分别记录最大值和最小值（可以取到第k个值的区间），然后计算中间值的大小，根据这个中间值计算第k个值在二分区间中的位置，或者是大于多少个矩阵中的值，若比k大则属于前半区间，若小于等于k则处于后半区间，等于由于可能中间值不是矩阵中的值所以不能直接返回</p><h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><h3 id="代码1"><a href="#代码1" class="headerlink" title="代码1"></a>代码1</h3><pre class=" language-Java"><code class="language-Java">class Solution &#123;    public int kthSmallest(int[][] matrix, int k) &#123;        if (matrix == null || matrix.length == 0 || matrix[0].length == 0)&#123;            throw new RuntimeException("matrix is empty!");        &#125;        int rowSize = matrix.length;        int colSize = matrix[0].length;        if (k > colSize * rowSize)&#123;            throw new RuntimeException("matrix is less than k!");        &#125;                int left = matrix[0][0];        int right = matrix[matrix.length - 1][matrix[0].length - 1];        int count = -1;                while (left < right)&#123;            int mid = (left + right) / 2;            count = getCount(matrix, mid, rowSize, colSize);            if (count < k)&#123;                left = mid + 1;            &#125;else&#123;                right = mid;            &#125;        &#125;        return right;    &#125;        private int getCount(int[][] matrix,int mid,int rowSize,int colSize)&#123;        int rowIndex = rowSize - 1;        int colIndex = 0;        int count = 0;                while (rowIndex >= 0 && colIndex < colSize)&#123;            if (matrix[rowIndex][colIndex] <= mid)&#123;                count += rowIndex + 1;                colIndex ++;            &#125;else&#123;                rowIndex --;            &#125;        &#125;        return count;    &#125;&#125;</code></pre><h2 id="复杂度分析"><a href="#复杂度分析" class="headerlink" title="复杂度分析"></a>复杂度分析</h2><h3 id="时间复杂度"><a href="#时间复杂度" class="headerlink" title="时间复杂度"></a>时间复杂度</h3><p>$O(nlogn * log (max -min))$log(max - min)是因为有中间值逼近的过程</p><h3 id="空间复杂度"><a href="#空间复杂度" class="headerlink" title="空间复杂度"></a>空间复杂度</h3><p>$O(1)$</p>]]></content>
      
      
      <categories>
          
          <category> Leetcode </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Leetcode </tag>
            
            <tag> Medium </tag>
            
            <tag> 二分法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Leetcode:295. 数据流的中位数</title>
      <link href="/2020/03/30/leetcode-295-shu-ju-liu-de-zhong-wei-shu/"/>
      <url>/2020/03/30/leetcode-295-shu-ju-liu-de-zhong-wei-shu/</url>
      
        <content type="html"><![CDATA[<h1 id="Leetcode-295-数据流的中位数"><a href="#Leetcode-295-数据流的中位数" class="headerlink" title="Leetcode:295. 数据流的中位数"></a><a href="https://leetcode-cn.com/problems/find-median-from-data-stream/">Leetcode:295. 数据流的中位数</a></h1><h2 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h2><pre><code>中位数是有序列表中间的数。如果列表长度是偶数，中位数则是中间两个数的平均值。例如，[2,3,4] 的中位数是 3[2,3] 的中位数是 (2 + 3) / 2 = 2.5设计一个支持以下两种操作的数据结构：void addNum(int num) - 从数据流中添加一个整数到数据结构中。double findMedian() - 返回目前所有元素的中位数。</code></pre><h3 id="示例："><a href="#示例：" class="headerlink" title="示例："></a>示例：</h3><pre><code>addNum(1)addNum(2)findMedian() -&gt; 1.5addNum(3) findMedian() -&gt; 2</code></pre><p>进阶:<br>    如果数据流中所有整数都在 0 到 100 范围内，你将如何优化你的算法？<br>    如果数据流中 99% 的整数都在 0 到 100 范围内，你将如何优化你的算法？</p><h2 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h2><h3 id="思路1：借用插入排序方法，每次插入后保持有序"><a href="#思路1：借用插入排序方法，每次插入后保持有序" class="headerlink" title="思路1：借用插入排序方法，每次插入后保持有序"></a>思路1：借用插入排序方法，每次插入后保持有序</h3><p>使用插入排序思路，每次插入新的数据后数据保持有序，这样时间复杂度主要来自于插入的O(n)<br>&#x2F;&#x2F; TODO:其他思路</p><h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><h3 id="代码1：插入排序思路"><a href="#代码1：插入排序思路" class="headerlink" title="代码1：插入排序思路"></a>代码1：插入排序思路</h3><pre class=" language-Java"><code class="language-Java">class MedianFinder &#123;    private List<Integer> list;    /** initialize your data structure here. */    public MedianFinder() &#123;        list = new ArrayList<>();    &#125;        public void addNum(int num) &#123;        if (list.isEmpty())&#123;            list.add(num);            return;        &#125;        int insertIndex = 0;        for(; insertIndex < list.size(); insertIndex++)&#123;            if(list.get(insertIndex) > num)&#123;                break;            &#125;        &#125;        list.add(insertIndex, num);    &#125;        public double findMedian() &#123;        if (list.size() % 2 != 0)&#123;            return list.get(list.size() / 2);        &#125; else &#123;            return 1.0 * (list.get(list.size() / 2 - 1) + list.get(list.size() / 2)) / 2;        &#125;    &#125;&#125;</code></pre><h2 id="复杂度分析"><a href="#复杂度分析" class="headerlink" title="复杂度分析"></a>复杂度分析</h2><h3 id="代码1时间复杂度"><a href="#代码1时间复杂度" class="headerlink" title="代码1时间复杂度"></a>代码1时间复杂度</h3><p>主要是插入排序的时间每次为O(n)</p><h3 id="代码1空间复杂度"><a href="#代码1空间复杂度" class="headerlink" title="代码1空间复杂度"></a>代码1空间复杂度</h3><p>$O(n)$</p>]]></content>
      
      
      <categories>
          
          <category> Leetcode </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Leetcode </tag>
            
            <tag> Hard </tag>
            
            <tag> 插入排序 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Leetcode:215. 数组中的第K个最大元素</title>
      <link href="/2020/03/29/leetcode-215-shu-zu-zhong-de-di-k-ge-zui-da-yuan-su/"/>
      <url>/2020/03/29/leetcode-215-shu-zu-zhong-de-di-k-ge-zui-da-yuan-su/</url>
      
        <content type="html"><![CDATA[<h1 id="215-数组中的第K个最大元素"><a href="#215-数组中的第K个最大元素" class="headerlink" title="215. 数组中的第K个最大元素"></a><a href="https://leetcode-cn.com/problems/kth-largest-element-in-an-array/">215. 数组中的第K个最大元素</a></h1><h2 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h2><pre><code>在未排序的数组中找到第 k 个最大的元素。请注意，你需要找的是数组排序后的第 k 个最大的元素，而不是第 k 个不同的元素。</code></pre><h3 id="示例-1"><a href="#示例-1" class="headerlink" title="示例 1:"></a>示例 1:</h3><pre><code>输入: [3,2,1,5,6,4] 和 k = 2输出: 5</code></pre><h3 id="示例-2"><a href="#示例-2" class="headerlink" title="示例 2:"></a>示例 2:</h3><pre><code>输入: [3,2,3,1,2,4,5,5,6] 和 k = 4输出: 4</code></pre><h3 id="说明"><a href="#说明" class="headerlink" title="说明:"></a>说明:</h3><pre><code>你可以假设 k 总是有效的，且 1 ≤ k ≤ 数组的长度。</code></pre><h2 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h2><p>采用快排的获取主元排序索引，更新到符合K大的位置</p><h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><h3 id="代码1"><a href="#代码1" class="headerlink" title="代码1"></a>代码1</h3><pre class=" language-Java"><code class="language-Java">class Solution &#123;    public int findKthLargest(int[] nums, int k) &#123;        if (nums == null || nums.length < k)&#123;            return -1;        &#125;        int result = -1;        int start = 0;        int end = nums.length - 1;        result = getIndex(nums, start, end);        while (result != k - 1)&#123;            if (result > k - 1)&#123;                end = result;                result = getIndex(nums, start, end - 1);            &#125; else if(result < k - 1)&#123;                start = result;                result = getIndex(nums, start + 1, end);            &#125;        &#125;        if (result == k - 1)&#123;            return nums[k - 1];        &#125;else &#123;            return -1;        &#125;    &#125;        private int getIndex(int[] nums, int s, int e)&#123;        int getNum = nums[s];        int getIndex = s;        swap(nums, s, e);                for(int i = s; i < e; i++)&#123;            if (nums[i] > getNum)&#123;                swap(nums, getIndex, i);                getIndex ++;            &#125;        &#125;        swap(nums, getIndex, e);        return getIndex;    &#125;        private void swap(int[] nums, int i, int j)&#123;        int temp = nums[i];        nums[i] = nums[j];        nums[j] = temp;    &#125;&#125;</code></pre><p>&#x2F;&#x2F; TODO:其他思路</p><h2 id="复杂度分析"><a href="#复杂度分析" class="headerlink" title="复杂度分析"></a>复杂度分析</h2><h3 id="时间复杂度"><a href="#时间复杂度" class="headerlink" title="时间复杂度"></a>时间复杂度</h3><p>平均$O(n)$,最坏$(n^2)$</p><h3 id="空间复杂度"><a href="#空间复杂度" class="headerlink" title="空间复杂度"></a>空间复杂度</h3><p>$O(1)$</p>]]></content>
      
      
      <categories>
          
          <category> Leetcode </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Leetcode </tag>
            
            <tag> Medium </tag>
            
            <tag> 快排 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Leetcode:155. 最小栈</title>
      <link href="/2020/03/28/leetcode-155-zui-xiao-zhan/"/>
      <url>/2020/03/28/leetcode-155-zui-xiao-zhan/</url>
      
        <content type="html"><![CDATA[<h1 id="Leetcode-155-最小栈"><a href="#Leetcode-155-最小栈" class="headerlink" title="Leetcode:155. 最小栈"></a><a href="https://leetcode-cn.com/problems/min-stack/">Leetcode:155. 最小栈</a></h1><h2 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h2><pre><code>设计一个支持 push，pop，top 操作，并能在常数时间内检索到最小元素的栈。push(x) -- 将元素 x 推入栈中。pop() -- 删除栈顶的元素。top() -- 获取栈顶元素。getMin() -- 检索栈中的最小元素。</code></pre><h3 id="示例"><a href="#示例" class="headerlink" title="示例:"></a>示例:</h3><pre><code>MinStack minStack = new MinStack();minStack.push(-2);minStack.push(0);minStack.push(-3);minStack.getMin();   --&gt; 返回 -3.minStack.pop();minStack.top();      --&gt; 返回 0.minStack.getMin();   --&gt; 返回 -2.</code></pre><h2 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h2><h3 id="思路1"><a href="#思路1" class="headerlink" title="思路1"></a>思路1</h3><p>主要还是栈，只是在栈的基础上获取栈中最小值，所以可以直接构建一个辅助栈，每次入栈时都记录当前位置下栈的最小数，出栈时只需要一起出即可</p><h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><h3 id="代码1"><a href="#代码1" class="headerlink" title="代码1"></a>代码1</h3><pre class=" language-Java"><code class="language-Java">class MinStack &#123;    /** initialize your data structure here. */    private Stack<Integer> stack;    private Stack<Integer> stackHelper;        public MinStack() &#123;        stack = new Stack<>();        stackHelper = new Stack<>();    &#125;        public void push(int x) &#123;        stack.add(x);        if (stackHelper.isEmpty() || x < stackHelper.peek())&#123;            stackHelper.add(x);        &#125;else &#123;            stackHelper.add(stackHelper.peek());        &#125;    &#125;        public void pop() &#123;        if (!stack.isEmpty())&#123;            stack.pop();            stackHelper.pop();        &#125; else &#123;            throw new RuntimeException("Stack is empty!");        &#125;    &#125;        public int top() &#123;        if (!stack.isEmpty())&#123;            return stack.peek();        &#125; else &#123;            throw new RuntimeException("Stack is empty!");        &#125;    &#125;        public int getMin() &#123;        if (!stackHelper.isEmpty())&#123;            return stackHelper.peek();        &#125; else &#123;            throw new RuntimeException("Stack is empty!");        &#125;    &#125;&#125;</code></pre><h2 id="复杂度分析"><a href="#复杂度分析" class="headerlink" title="复杂度分析"></a>复杂度分析</h2><h3 id="思路1时间复杂度"><a href="#思路1时间复杂度" class="headerlink" title="思路1时间复杂度"></a>思路1时间复杂度</h3><p>$O(1)$</p><h3 id="思路1空间复杂度"><a href="#思路1空间复杂度" class="headerlink" title="思路1空间复杂度"></a>思路1空间复杂度</h3><p>$O(n)$</p>]]></content>
      
      
      <categories>
          
          <category> Leetcode </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Leetcode </tag>
            
            <tag> Easy </tag>
            
            <tag> 栈 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Leetcode:238. 除自身以外数组的乘积</title>
      <link href="/2020/03/28/leetcode-238-chu-zi-shen-yi-wai-shu-zu-de-cheng-ji/"/>
      <url>/2020/03/28/leetcode-238-chu-zi-shen-yi-wai-shu-zu-de-cheng-ji/</url>
      
        <content type="html"><![CDATA[<h1 id="Leetcode-238-除自身以外数组的乘积"><a href="#Leetcode-238-除自身以外数组的乘积" class="headerlink" title="Leetcode: 238. 除自身以外数组的乘积"></a><a href="https://leetcode-cn.com/problems/product-of-array-except-self/">Leetcode: 238. 除自身以外数组的乘积</a></h1><h2 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h2><pre><code>给你一个长度为 n 的整数数组 nums，其中 n &gt; 1，返回输出数组 output ，其中 output[i] 等于 nums 中除 nums[i] 之外其余各元素的乘积。</code></pre><h3 id="示例"><a href="#示例" class="headerlink" title="示例:"></a>示例:</h3><pre><code>输入: [1,2,3,4]输出: [24,12,8,6]提示：题目数据保证数组之中任意元素的全部前缀元素和后缀（甚至是整个数组）的乘积都在 32 位整数范围内。说明: 请不要使用除法，且在 O(n) 时间复杂度内完成此题。</code></pre><h3 id="进阶："><a href="#进阶：" class="headerlink" title="进阶："></a>进阶：</h3><p>你可以在常数空间复杂度内完成这个题目吗？（ 出于对空间复杂度分析的目的，输出数组不被视为额外空间。）</p><h2 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h2><h3 id="思路1：分别进行左右乘法"><a href="#思路1：分别进行左右乘法" class="headerlink" title="思路1：分别进行左右乘法"></a>思路1：分别进行左右乘法</h3><p>对所有位置的结果分为左边乘和右边乘，使用一个临时变量记录左乘(右乘)积，带入到相应位置，详情见代码</p><h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><h3 id="思路1代码"><a href="#思路1代码" class="headerlink" title="思路1代码"></a>思路1代码</h3><pre class=" language-Java"><code class="language-Java">class Solution &#123;    public int[] productExceptSelf(int[] nums) &#123;        int[] result = new int[nums.length];        for(int i = 0; i < result.length; i++)&#123;            result[i] = 1;        &#125;        int tempResult = 1;        for(int i = 0; i < result.length - 1; i++)&#123;            tempResult *= nums[i];            result[i+1] *= tempResult;        &#125;        tempResult = 1;        for(int i = result.length - 1; i > 0; i--)&#123;            tempResult *= nums[i];            result[i - 1] *= tempResult;        &#125;        return result;    &#125;&#125;</code></pre><h2 id="复杂度分析"><a href="#复杂度分析" class="headerlink" title="复杂度分析"></a>复杂度分析</h2><h3 id="思路1时间复杂度"><a href="#思路1时间复杂度" class="headerlink" title="思路1时间复杂度"></a>思路1时间复杂度</h3><p>$O(N)$</p><h3 id="思路2空间复杂度"><a href="#思路2空间复杂度" class="headerlink" title="思路2空间复杂度"></a>思路2空间复杂度</h3><p>$O(1)$除去结果空间以外</p>]]></content>
      
      
      <categories>
          
          <category> Leetcode </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Leetcode </tag>
            
            <tag> Medium </tag>
            
            <tag> 数组 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Leetcode:334. 递增的三元子序列</title>
      <link href="/2020/03/27/leetcode-334-di-zeng-de-san-yuan-zi-xu-lie/"/>
      <url>/2020/03/27/leetcode-334-di-zeng-de-san-yuan-zi-xu-lie/</url>
      
        <content type="html"><![CDATA[<h1 id="334-递增的三元子序列"><a href="#334-递增的三元子序列" class="headerlink" title="334. 递增的三元子序列"></a><a href="https://leetcode-cn.com/problems/increasing-triplet-subsequence/">334. 递增的三元子序列</a></h1><h2 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h2><pre><code>给定一个未排序的数组，判断这个数组中是否存在长度为 3 的递增子序列。数学表达式如下:如果存在这样的 i, j, k,  且满足 0 ≤ i &lt; j &lt; k ≤ n-1，使得 arr[i] &lt; arr[j] &lt; arr[k] ，返回 true ; 否则返回 false 。说明: 要求算法的时间复杂度为 O(n)，空间复杂度为 O(1) 。</code></pre><h3 id="示例-1"><a href="#示例-1" class="headerlink" title="示例 1:"></a>示例 1:</h3><pre><code>输入: [1,2,3,4,5]输出: true</code></pre><h3 id="示例-2"><a href="#示例-2" class="headerlink" title="示例 2:"></a>示例 2:</h3><pre><code>输入: [5,4,3,2,1]输出: false</code></pre><h2 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h2><h3 id="思路1：DP"><a href="#思路1：DP" class="headerlink" title="思路1：DP"></a>思路1：DP</h3><p>使用状态方程记录数组每个位置的最大递增序列大小，状态转移方程为$dps[i] &#x3D; max(dps[i], dps[j] + 1 if nums[j] &lt; nums[i]) j \isin [0, i)</p><h3 id="思路2：加入两个哨兵元素"><a href="#思路2：加入两个哨兵元素" class="headerlink" title="思路2：加入两个哨兵元素"></a>思路2：加入两个哨兵元素</h3><p>使用两个哨兵元素记录值，即记录两个最小的数</p><h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><h3 id="代码1"><a href="#代码1" class="headerlink" title="代码1"></a>代码1</h3><pre class=" language-Java"><code class="language-Java">class Solution &#123;    public boolean increasingTriplet(int[] nums) &#123;        if (nums == null || nums.length < 3)&#123;            return false;        &#125;        int[] dps = new int[nums.length];        for(int i = 1; i < nums.length; i++)&#123;            for(int j = 0; j < i; j++)&#123;                if (nums[i] > nums[j])&#123;                    dps[i] = Math.max(dps[i], dps[j] + 1);                    if (dps[i] == 2)&#123;                        return true;                    &#125;                &#125;            &#125;        &#125;        return false;    &#125;&#125;</code></pre><h3 id="代码2"><a href="#代码2" class="headerlink" title="代码2"></a>代码2</h3><pre class=" language-Java"><code class="language-Java">class Solution &#123;    public boolean increasingTriplet(int[] nums) &#123;        if (nums == null || nums.length < 3)&#123;            return false;        &#125;        int max1 = Integer.MAX_VALUE;        int max2 = Integer.MAX_VALUE;        for(int num: nums)&#123;            if (num <= max1)&#123;                max1 = num;            &#125; else if (num <= max2)&#123;                max2 = num;            &#125; else &#123;                return true;            &#125;        &#125;        return false;    &#125;&#125;</code></pre><h2 id="复杂度分析"><a href="#复杂度分析" class="headerlink" title="复杂度分析"></a>复杂度分析</h2><h3 id="思路1时间复杂度"><a href="#思路1时间复杂度" class="headerlink" title="思路1时间复杂度"></a>思路1时间复杂度</h3><p>$O(n^2)$</p><h3 id="思路1空间复杂度"><a href="#思路1空间复杂度" class="headerlink" title="思路1空间复杂度"></a>思路1空间复杂度</h3><p>$O(n)$</p><h3 id="思路2时间复杂度"><a href="#思路2时间复杂度" class="headerlink" title="思路2时间复杂度"></a>思路2时间复杂度</h3><p>$O(n)$</p><h3 id="思路2空间复杂度"><a href="#思路2空间复杂度" class="headerlink" title="思路2空间复杂度"></a>思路2空间复杂度</h3><p>$O(1)$</p>]]></content>
      
      
      <categories>
          
          <category> Leetcode </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Leetcode </tag>
            
            <tag> Medium </tag>
            
            <tag> DP </tag>
            
            <tag> 数组 </tag>
            
            <tag> 哨兵 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Leetcode:350. 两个数组的交集 II</title>
      <link href="/2020/03/27/leetcode-350-liang-ge-shu-zu-de-jiao-ji-ii/"/>
      <url>/2020/03/27/leetcode-350-liang-ge-shu-zu-de-jiao-ji-ii/</url>
      
        <content type="html"><![CDATA[<h1 id="350-两个数组的交集-II"><a href="#350-两个数组的交集-II" class="headerlink" title="350. 两个数组的交集 II"></a><a href="https://leetcode-cn.com/problems/intersection-of-two-arrays-ii/">350. 两个数组的交集 II</a></h1><h2 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h2><pre><code>给定两个数组，编写一个函数来计算它们的交集。</code></pre><h3 id="示例-1"><a href="#示例-1" class="headerlink" title="示例 1:"></a>示例 1:</h3><pre><code>输入: nums1 = [1,2,2,1], nums2 = [2,2]输出: [2,2]</code></pre><h3 id="示例-2"><a href="#示例-2" class="headerlink" title="示例 2:"></a>示例 2:</h3><pre><code>输入: nums1 = [4,9,5], nums2 = [9,4,9,8,4]输出: [4,9]</code></pre><h3 id="说明："><a href="#说明：" class="headerlink" title="说明："></a>说明：</h3><pre><code>输出结果中每个元素出现的次数，应与元素在两个数组中出现的次数一致。我们可以不考虑输出结果的顺序。</code></pre><h3 id="进阶"><a href="#进阶" class="headerlink" title="进阶:"></a>进阶:</h3><pre><code>如果给定的数组已经排好序呢？你将如何优化你的算法？如果 nums1 的大小比 nums2 小很多，哪种方法更优？如果 nums2 的元素存储在磁盘上，磁盘内存是有限的，并且你不能一次加载所有的元素到内存中，你该怎么办？</code></pre><h2 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h2><h3 id="思路1-两个数组排序后使用两个指针遍历比较"><a href="#思路1-两个数组排序后使用两个指针遍历比较" class="headerlink" title="思路1: 两个数组排序后使用两个指针遍历比较"></a>思路1: 两个数组排序后使用两个指针遍历比较</h3><p>对两个数组分别排序，然后使用一个哨兵分别计数，若两位置相等则加入，否则按照排序递增</p><h3 id="思路2-使用Hash计数"><a href="#思路2-使用Hash计数" class="headerlink" title="思路2: 使用Hash计数"></a>思路2: 使用Hash计数</h3><p>对一个数组hash计数，然后使用另外一个等相等加入</p><h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><h3 id="代码1"><a href="#代码1" class="headerlink" title="代码1"></a>代码1</h3><pre class=" language-Java"><code class="language-Java">class Solution &#123;    public int[] intersect(int[] nums1, int[] nums2) &#123;        List<Integer> result = new ArrayList<>();        Arrays.sort(nums1);        Arrays.sort(nums2);                int aIndex = 0;        int bIndex = 0;        while(aIndex < nums1.length && bIndex < nums2.length)&#123;            if (nums1[aIndex] == nums2[bIndex])&#123;                result.add(nums1[aIndex]);                aIndex ++;                bIndex ++;            &#125; else if(nums1[aIndex] < nums2[bIndex])&#123;                aIndex ++;            &#125; else &#123;                bIndex ++;            &#125;        &#125;        int[] intResult = new int[result.size()];        for(int i = 0; i < result.size(); i++)&#123;            intResult[i] = result.get(i);        &#125;        return intResult;    &#125;&#125;</code></pre><h3 id="代码2"><a href="#代码2" class="headerlink" title="代码2"></a>代码2</h3><pre class=" language-Java"><code class="language-Java">class Solution &#123;    public int[] intersect(int[] nums1, int[] nums2) &#123;        List<Integer> result = new ArrayList<>();        Map<Integer, Integer> hashMap = new HashMap<>();        for(int num: nums1)&#123;            if (!hashMap.containsKey(num))&#123;                hashMap.put(num, 0);            &#125;            hashMap.put(num, hashMap.get(num) + 1);        &#125;        for(int num: nums2)&#123;            if (hashMap.containsKey(num) && hashMap.get(num) > 0)&#123;                result.add(num);                hashMap.put(num, hashMap.get(num) - 1);            &#125;        &#125;        int[] intResult = new int[result.size()];        for(int i = 0; i < result.size(); i++)&#123;            intResult[i] = result.get(i);        &#125;        return intResult;    &#125;&#125;</code></pre><h2 id="复杂度分析"><a href="#复杂度分析" class="headerlink" title="复杂度分析"></a>复杂度分析</h2><h3 id="思路1时间复杂度"><a href="#思路1时间复杂度" class="headerlink" title="思路1时间复杂度"></a>思路1时间复杂度</h3><p>$O(nlog(n))$</p><h3 id="思路1空间复杂度"><a href="#思路1空间复杂度" class="headerlink" title="思路1空间复杂度"></a>思路1空间复杂度</h3><p>$O(n)$</p><h3 id="思路1时间复杂度-1"><a href="#思路1时间复杂度-1" class="headerlink" title="思路1时间复杂度"></a>思路1时间复杂度</h3><p>$O(n)$</p><h3 id="思路1空间复杂度-1"><a href="#思路1空间复杂度-1" class="headerlink" title="思路1空间复杂度"></a>思路1空间复杂度</h3><p>$O(n)$</p>]]></content>
      
      
      <categories>
          
          <category> Leetcode </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Leetcode </tag>
            
            <tag> 排序 </tag>
            
            <tag> Easy </tag>
            
            <tag> 数组 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Leetcode:384.打乱数组</title>
      <link href="/2020/03/27/leetcode-384-da-luan-shu-zu/"/>
      <url>/2020/03/27/leetcode-384-da-luan-shu-zu/</url>
      
        <content type="html"><![CDATA[<h1 id="Leetcode-384-打乱数组"><a href="#Leetcode-384-打乱数组" class="headerlink" title="Leetcode: 384.打乱数组"></a><a href="https://leetcode-cn.com/problems/shuffle-an-array/">Leetcode: 384.打乱数组</a></h1><h2 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h2><p>打乱一个没有重复元素的数组。</p><h3 id="示例"><a href="#示例" class="headerlink" title="示例:"></a>示例:</h3><pre><code>// 以数字集合 1, 2 和 3 初始化数组。int[] nums = &#123;1,2,3&#125;;Solution solution = new Solution(nums);// 打乱数组 [1,2,3] 并返回结果。任何 [1,2,3]的排列返回的概率应该相同。solution.shuffle();// 重设数组到它的初始状态[1,2,3]。solution.reset();// 随机返回数组[1,2,3]打乱后的结果。solution.shuffle();</code></pre><h2 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h2><h3 id="思路1：复制数组-移除"><a href="#思路1：复制数组-移除" class="headerlink" title="思路1：复制数组+移除"></a>思路1：复制数组+移除</h3><p>复制一个新数组，然后随机置入数组，将置入数组的数移除</p><h3 id="思路2：Fisher–Yates-shuffle"><a href="#思路2：Fisher–Yates-shuffle" class="headerlink" title="思路2：Fisher–Yates shuffle"></a>思路2：Fisher–Yates shuffle</h3><p>遍历数组，随机化得到一个从当前位置到最后位置的数进行交换，该方法产生n!种可能，但是如果采用随机产生两个随机数则是错的，其产生的可能性为$n^n$,简单证明为n!可能不能被$n^n$整除</p><h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><h3 id="代码1-复制数组-移除"><a href="#代码1-复制数组-移除" class="headerlink" title="代码1: 复制数组+移除"></a>代码1: 复制数组+移除</h3><pre class=" language-Java"><code class="language-Java">class Solution &#123;    private int[] nums;    private int[] origins;        private Random rand = new Random();        public Solution(int[] nums) &#123;        this.nums = nums;        origins = this.nums.clone();    &#125;        /** Resets the array to its original configuration and return it. */    public int[] reset() &#123;        this.nums = this.origins;        this.origins = this.origins.clone();        return this.nums;    &#125;        /** Returns a random shuffling of the array. */    public int[] shuffle() &#123;        List<Integer> copyList = new ArrayList<>();        for(int num: this.nums)&#123;            copyList.add(num);        &#125;        for(int i = 0; i < this.nums.length; i++)&#123;            int removeIndex = rand.nextInt(copyList.size());            this.nums[i] = copyList.get(removeIndex);            copyList.remove(removeIndex);        &#125;        return this.nums;    &#125;&#125;</code></pre><h3 id="代码2"><a href="#代码2" class="headerlink" title="代码2"></a>代码2</h3><pre class=" language-Java"><code class="language-Java">class Solution &#123;    private int[] nums;    private int[] origins;        private Random rand = new Random();        public Solution(int[] nums) &#123;        this.nums = nums;        origins = this.nums.clone();    &#125;        /** Resets the array to its original configuration and return it. */    public int[] reset() &#123;        this.nums = this.origins;        this.origins = this.origins.clone();        return this.nums;    &#125;        /** Returns a random shuffling of the array. */    public int[] shuffle() &#123;        for(int i = 0; i < this.nums.length; i++)&#123;            int swapIndex = rand.nextInt(this.nums.length - i) + i;            int temp = this.nums[i];            this.nums[i] = this.nums[swapIndex];            this.nums[swapIndex] = temp;        &#125;        return this.nums;    &#125;&#125;</code></pre><h2 id="复杂度分析"><a href="#复杂度分析" class="headerlink" title="复杂度分析"></a>复杂度分析</h2><h3 id="思路1时间复杂度"><a href="#思路1时间复杂度" class="headerlink" title="思路1时间复杂度"></a>思路1时间复杂度</h3><p>$O(n^2)$</p><h3 id="思路1空间复杂度"><a href="#思路1空间复杂度" class="headerlink" title="思路1空间复杂度"></a>思路1空间复杂度</h3><p>$O(n)$</p><h3 id="思路2时间复杂度"><a href="#思路2时间复杂度" class="headerlink" title="思路2时间复杂度"></a>思路2时间复杂度</h3><p>$O(n)$没有了移除操作</p><h3 id="思路1空间复杂度-1"><a href="#思路1空间复杂度-1" class="headerlink" title="思路1空间复杂度"></a>思路1空间复杂度</h3><p>$O(n)$</p>]]></content>
      
      
      <categories>
          
          <category> Leetcode </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Leetcode </tag>
            
            <tag> Medium </tag>
            
            <tag> 数组 </tag>
            
            <tag> 随机数 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Leetcode:283. 移动零</title>
      <link href="/2020/03/26/leetcode-283-yi-dong-ling/"/>
      <url>/2020/03/26/leetcode-283-yi-dong-ling/</url>
      
        <content type="html"><![CDATA[<h1 id="Leetcode-283-移动零"><a href="#Leetcode-283-移动零" class="headerlink" title="Leetcode:283. 移动零"></a><a href="https://leetcode-cn.com/problems/move-zeroes/">Leetcode:283. 移动零</a></h1><h2 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h2><pre><code>给定一个数组 nums，编写一个函数将所有 0 移动到数组的末尾，同时保持非零元素的相对顺序。</code></pre><h3 id="示例"><a href="#示例" class="headerlink" title="示例:"></a>示例:</h3><pre><code>输入: [0,1,0,3,12]输出: [1,3,12,0,0]</code></pre><h3 id="说明"><a href="#说明" class="headerlink" title="说明:"></a>说明:</h3><pre><code>必须在原数组上操作，不能拷贝额外的数组。尽量减少操作次数。</code></pre><h2 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h2><h3 id="思路1-直接使用非零计数"><a href="#思路1-直接使用非零计数" class="headerlink" title="思路1: 直接使用非零计数"></a>思路1: 直接使用非零计数</h3><p>直接使用遍历加非零计数进行替换操作，然后对最后为零的填零</p><h3 id="思路2-非零计数-替换"><a href="#思路2-非零计数-替换" class="headerlink" title="思路2: 非零计数+替换"></a>思路2: 非零计数+替换</h3><p>思路1方法若在大量零的情况下需要遍历两次，所以可以考虑使用两个指针交换数据</p><h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><h3 id="代码1"><a href="#代码1" class="headerlink" title="代码1"></a>代码1</h3><pre class=" language-Java"><code class="language-Java">class Solution &#123;    public void moveZeroes(int[] nums) &#123;        if (nums == null || nums.length == 0)&#123;            return;        &#125;        int notZeroIndex = 0;        for(int i = 0; i < nums.length; i++)&#123;            if (nums[i] != 0)&#123;                nums[notZeroIndex++] = nums[i];            &#125;        &#125;        for(int i = notZeroIndex; i < nums.length; i++)&#123;            nums[i] = 0;        &#125;    &#125;&#125;</code></pre><h3 id="代码2：双指针-交换"><a href="#代码2：双指针-交换" class="headerlink" title="代码2：双指针+交换"></a>代码2：双指针+交换</h3><pre class=" language-Java"><code class="language-Java">class Solution &#123;    public void moveZeroes(int[] nums) &#123;        if (nums == null || nums.length == 0)&#123;            return;        &#125;        int notZeroIndex = 0;        for(int i = 0; i < nums.length; i++)&#123;            if(nums[i] != 0)&#123;                swap(nums, i, notZeroIndex++);            &#125;        &#125;    &#125;        private void swap(int[] nums, int i, int j)&#123;        if (i == j)&#123;            return;        &#125;        nums[i] = nums[i] + nums[j];        nums[j] = nums[i] - nums[j];        nums[i] = nums[i] - nums[j];    &#125;&#125;</code></pre><h2 id="复杂度分析"><a href="#复杂度分析" class="headerlink" title="复杂度分析"></a>复杂度分析</h2><h3 id="思路1：直接使用非零计数"><a href="#思路1：直接使用非零计数" class="headerlink" title="思路1：直接使用非零计数"></a>思路1：直接使用非零计数</h3><h4 id="时间复杂度"><a href="#时间复杂度" class="headerlink" title="时间复杂度"></a>时间复杂度</h4><p>$O(n)$</p><h4 id="空间复杂度"><a href="#空间复杂度" class="headerlink" title="空间复杂度"></a>空间复杂度</h4><p>$O(1)$</p><h3 id="思路2"><a href="#思路2" class="headerlink" title="思路2"></a>思路2</h3><p>同上，但是时间复杂度在最坏情况下要比思路1优</p>]]></content>
      
      
      <categories>
          
          <category> Leetcode </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Leetcode </tag>
            
            <tag> Easy </tag>
            
            <tag> 数组 </tag>
            
            <tag> 遍历 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Leetcode:217. 存在重复元素</title>
      <link href="/2020/03/26/leetcode-217-cun-zai-chong-fu-yuan-su/"/>
      <url>/2020/03/26/leetcode-217-cun-zai-chong-fu-yuan-su/</url>
      
        <content type="html"><![CDATA[<h1 id="Leetcode-217-存在重复元素"><a href="#Leetcode-217-存在重复元素" class="headerlink" title="Leetcode:217. 存在重复元素"></a><a href="https://leetcode-cn.com/problems/contains-duplicate/">Leetcode:217. 存在重复元素</a></h1><h2 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h2><pre><code>给定一个整数数组，判断是否存在重复元素。如果任何值在数组中出现至少两次，函数返回 true。如果数组中每个元素都不相同，则返回 false。</code></pre><h3 id="示例-1"><a href="#示例-1" class="headerlink" title="示例 1:"></a>示例 1:</h3><pre><code>输入: [1,2,3,1]输出: true</code></pre><h3 id="示例-2"><a href="#示例-2" class="headerlink" title="示例 2:"></a>示例 2:</h3><pre><code>输入: [1,2,3,4]输出: false</code></pre><h3 id="示例-3"><a href="#示例-3" class="headerlink" title="示例 3:"></a>示例 3:</h3><pre><code>输入: [1,1,1,3,3,4,3,2,4,2]输出: true</code></pre><h2 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h2><h3 id="思路1-直接使用Hash"><a href="#思路1-直接使用Hash" class="headerlink" title="思路1: 直接使用Hash"></a>思路1: 直接使用Hash</h3><p>使用hashset对数据计数，若重复出现则直接返回true</p><h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><h3 id="代码１：直接使用Hash"><a href="#代码１：直接使用Hash" class="headerlink" title="代码１：直接使用Hash"></a>代码１：直接使用Hash</h3><pre class=" language-Java"><code class="language-Java">class Solution &#123;    public boolean containsDuplicate(int[] nums) &#123;        if (nums == null || nums.length == 0)&#123;            return false;        &#125;        Set<Integer> set = new HashSet<>();        for(int num: nums)&#123;            if (set.contains(num))&#123;                return true;            &#125; else&#123;                set.add(num);            &#125;        &#125;        return false;    &#125;&#125;</code></pre><h2 id="复杂度分析"><a href="#复杂度分析" class="headerlink" title="复杂度分析"></a>复杂度分析</h2><h3 id="时间复杂度"><a href="#时间复杂度" class="headerlink" title="时间复杂度"></a>时间复杂度</h3><p>$O(n)$</p><h3 id="空间复杂度"><a href="#空间复杂度" class="headerlink" title="空间复杂度"></a>空间复杂度</h3><p>$O(n)$</p>]]></content>
      
      
      <categories>
          
          <category> Leetcode </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Leetcode </tag>
            
            <tag> Easy </tag>
            
            <tag> Hash </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Leetcode:189. 旋转数组</title>
      <link href="/2020/03/25/leetcode-189-xuan-zhuan-shu-zu/"/>
      <url>/2020/03/25/leetcode-189-xuan-zhuan-shu-zu/</url>
      
        <content type="html"><![CDATA[<h1 id="Leetcode-189-旋转数组"><a href="#Leetcode-189-旋转数组" class="headerlink" title="Leetcode:189. 旋转数组"></a><a href="https://leetcode-cn.com/problems/rotate-array/">Leetcode:189. 旋转数组</a></h1><h2 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h2><pre><code>给定一个数组，将数组中的元素向右移动 k 个位置，其中 k 是非负数。</code></pre><h3 id="示例-1"><a href="#示例-1" class="headerlink" title="示例 1:"></a>示例 1:</h3><pre><code>输入: [1,2,3,4,5,6,7] 和 k = 3输出: [5,6,7,1,2,3,4]解释:向右旋转 1 步: [7,1,2,3,4,5,6]向右旋转 2 步: [6,7,1,2,3,4,5]向右旋转 3 步: [5,6,7,1,2,3,4]</code></pre><h3 id="示例-2"><a href="#示例-2" class="headerlink" title="示例 2:"></a>示例 2:</h3><pre><code>输入: [-1,-100,3,99] 和 k = 2输出: [3,99,-1,-100]解释: 向右旋转 1 步: [99,-1,-100,3]向右旋转 2 步: [3,99,-1,-100]</code></pre><h3 id="说明"><a href="#说明" class="headerlink" title="说明:"></a>说明:</h3><pre><code>尽可能想出更多的解决方案，至少有三种不同的方法可以解决这个问题。要求使用空间复杂度为 O(1) 的 原地 算法。</code></pre><h2 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h2><h3 id="思路1-三次反转数组"><a href="#思路1-三次反转数组" class="headerlink" title="思路1: 三次反转数组"></a>思路1: 三次反转数组</h3><p>可以看作是首先将整个数组旋转，然后前k个元素反转，后nums.length - k个元素反转</p><h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><h3 id="代码1-三次反转数组"><a href="#代码1-三次反转数组" class="headerlink" title="代码1: 三次反转数组"></a>代码1: 三次反转数组</h3><pre class=" language-Java"><code class="language-Java">public class Solution &#123;    public void rotate(int[] nums, int k)&#123;        k = k % nums.length;        if (k == 0)&#123;            return;        &#125;        reverse(nums, 0, nums.length - 1);        reverse(nums, 0, k-1);        reverse(nums, k, nums.length - 1);    &#125;    private void reverse(int[] nums, int startIndex, int endIndex)&#123;        while(startIndex < endIndex)&#123;            int temp = nums[startIndex];            nums[startIndex++] = nums[endIndex];            nums[endIndex--] = temp;        &#125;    &#125;&#125;</code></pre><h2 id="复杂度分析"><a href="#复杂度分析" class="headerlink" title="复杂度分析"></a>复杂度分析</h2><h3 id="时间复杂度"><a href="#时间复杂度" class="headerlink" title="时间复杂度"></a>时间复杂度</h3><p>$O(n)$</p><h3 id="空间复杂度"><a href="#空间复杂度" class="headerlink" title="空间复杂度"></a>空间复杂度</h3><p>$O(1)$</p>]]></content>
      
      
      <categories>
          
          <category> Leetcode </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Leetcode </tag>
            
            <tag> Easy </tag>
            
            <tag> 数组 </tag>
            
            <tag> 反转 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Leetcode:152. 乘积最大子数组</title>
      <link href="/2020/03/24/leetcode-152-cheng-ji-zui-da-zi-shu-zu/"/>
      <url>/2020/03/24/leetcode-152-cheng-ji-zui-da-zi-shu-zu/</url>
      
        <content type="html"><![CDATA[<h1 id="乘积最大子数组"><a href="#乘积最大子数组" class="headerlink" title="乘积最大子数组"></a><a href="https://leetcode-cn.com/problems/maximum-product-subarray/">乘积最大子数组</a></h1><h2 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h2><pre><code>给你一个整数数组 nums ，请你找出数组中乘积最大的连续子数组（该子数组中至少包含一个数字）。</code></pre><h3 id="示例-1"><a href="#示例-1" class="headerlink" title="示例 1:"></a>示例 1:</h3><pre><code>输入: [2,3,-2,4]输出: 6解释: 子数组 [2,3] 有最大乘积 6。</code></pre><h3 id="示例-2"><a href="#示例-2" class="headerlink" title="示例 2:"></a>示例 2:</h3><pre><code>输入: [-2,0,-1]输出: 0解释: 结果不能为 2, 因为 [-2,-1] 不是子数组。</code></pre><h2 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h2><p>可以维护两个DP,表示最大值和最小值（因为数据中包含正负),转移方程为$maxDP[i+1] &#x3D; max(nums[i+1], maxDP[i+1]*nums[i+1], minDP[i+1]*nums[i+1])$以及$minDP[i+1] &#x3D; min(nums[i+1], maxDP[i+1]*nums[i+1], minDP[i+1]*nums[i+1])$,由于只涉及DP的两个状态值，所以去除掉所有状态的存储，只存储上一状态即可。</p><h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><pre class=" language-Java"><code class="language-Java">class Solution &#123;    public int maxProduct(int[] nums) &#123;        int result = nums[0];        int maxNum = 1;        int minNum = 1;        for(int i = 0; i < nums.length; i++)&#123;            if (nums[i] < 0)&#123;                maxNum = maxNum + minNum;                minNum = maxNum - minNum;                maxNum = maxNum - minNum;            &#125;            maxNum = nums[i] > maxNum * nums[i] ? nums[i]: maxNum * nums[i];            minNum = nums[i] < minNum * nums[i] ? nums[i]: minNum * nums[i];            if(result < maxNum)&#123;                result = maxNum;            &#125;        &#125;        return result;    &#125;&#125;</code></pre><h2 id="复杂度分析"><a href="#复杂度分析" class="headerlink" title="复杂度分析"></a>复杂度分析</h2><h3 id="时间复杂度"><a href="#时间复杂度" class="headerlink" title="时间复杂度"></a>时间复杂度</h3><p>$O(n)$</p><h3 id="空间复杂度"><a href="#空间复杂度" class="headerlink" title="空间复杂度"></a>空间复杂度</h3><p>$O(1)$</p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>可以使用多个DP过程存储中间可能状态</p>]]></content>
      
      
      <categories>
          
          <category> Leetcode </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Leetcode </tag>
            
            <tag> Medium </tag>
            
            <tag> DP </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Leetcode:344. 反转字符串</title>
      <link href="/2020/03/24/leetcode-344-fan-zhuan-zi-fu-chuan/"/>
      <url>/2020/03/24/leetcode-344-fan-zhuan-zi-fu-chuan/</url>
      
        <content type="html"><![CDATA[<h1 id="Leetcode-344-反转字符串"><a href="#Leetcode-344-反转字符串" class="headerlink" title="Leetcode:344. 反转字符串"></a><a href="https://leetcode-cn.com/explore/interview/card/top-interview-quesitons/275/string/1144/">Leetcode:344. 反转字符串</a></h1><h2 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h2><pre><code>编写一个函数，其作用是将输入的字符串反转过来。输入字符串以字符数组 char[] 的形式给出。不要给另外的数组分配额外的空间，你必须原地修改输入数组、使用 O(1) 的额外空间解决这一问题。你可以假设数组中的所有字符都是 ASCII 码表中的可打印字符。</code></pre><h3 id="示例-1："><a href="#示例-1：" class="headerlink" title="示例 1："></a>示例 1：</h3><pre><code>输入：[&quot;h&quot;,&quot;e&quot;,&quot;l&quot;,&quot;l&quot;,&quot;o&quot;]输出：[&quot;o&quot;,&quot;l&quot;,&quot;l&quot;,&quot;e&quot;,&quot;h&quot;]</code></pre><h3 id="示例-2："><a href="#示例-2：" class="headerlink" title="示例 2："></a>示例 2：</h3><pre><code>输入：[&quot;H&quot;,&quot;a&quot;,&quot;n&quot;,&quot;n&quot;,&quot;a&quot;,&quot;h&quot;]输出：[&quot;h&quot;,&quot;a&quot;,&quot;n&quot;,&quot;n&quot;,&quot;a&quot;,&quot;H&quot;]</code></pre><h2 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h2><p>直接使用前后指针swap</p><h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><pre class=" language-Java"><code class="language-Java">class Solution &#123;    public void reverseString(char[] s) &#123;        if(s == null || s.length == 0)&#123;            return;        &#125;        int left = 0;        int right = s.length - 1;        while (left < right)&#123;            char temp = s[left];            s[left++] = s[right];            s[right--] = temp;        &#125;    &#125;&#125;</code></pre><h2 id="复杂度分析"><a href="#复杂度分析" class="headerlink" title="复杂度分析"></a>复杂度分析</h2><h3 id="时间复杂度"><a href="#时间复杂度" class="headerlink" title="时间复杂度"></a>时间复杂度</h3><p>$O(n)$</p><h3 id="空间复杂度"><a href="#空间复杂度" class="headerlink" title="空间复杂度"></a>空间复杂度</h3><p>$O(1)$</p>]]></content>
      
      
      <categories>
          
          <category> Leetcode </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Leetcode </tag>
            
            <tag> Easy </tag>
            
            <tag> 字符串 </tag>
            
            <tag> 双指针 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Leetcode:387. 字符串中的第一个唯一字符</title>
      <link href="/2020/03/23/leetcode-387-zi-fu-chuan-zhong-de-di-yi-ge-wei-yi-zi-fu/"/>
      <url>/2020/03/23/leetcode-387-zi-fu-chuan-zhong-de-di-yi-ge-wei-yi-zi-fu/</url>
      
        <content type="html"><![CDATA[<h1 id="Leetcode-387-字符串中的第一个唯一字符"><a href="#Leetcode-387-字符串中的第一个唯一字符" class="headerlink" title="Leetcode:387. 字符串中的第一个唯一字符"></a><a href="https://leetcode-cn.com/problems/first-unique-character-in-a-string/">Leetcode:387. 字符串中的第一个唯一字符</a></h1><h2 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h2><pre><code>给定一个字符串，找到它的第一个不重复的字符，并返回它的索引。如果不存在，则返回 -1。</code></pre><h3 id="案例"><a href="#案例" class="headerlink" title="案例:"></a>案例:</h3><pre><code>s = &quot;leetcode&quot;返回 0.s = &quot;loveleetcode&quot;,返回 2. 注意事项：您可以假定该字符串只包含小写字母。</code></pre><h2 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h2><h3 id="思路：数组-字典"><a href="#思路：数组-字典" class="headerlink" title="思路：数组 字典"></a>思路：数组 字典</h3><p>直接使用数组对字母计数二次遍历</p><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><pre class=" language-Java"><code class="language-Java">class Solution &#123;    public int firstUniqChar(String s) &#123;        if (s == null || s.length() == 0)&#123;            return -1;        &#125;        int[] chDict = new int[26];        for(int i = 0; i < s.length(); i++)&#123;            chDict[s.charAt(i) - 'a'] += 1;        &#125;        for(int i = 0; i < s.length(); i++)&#123;            if(chDict[s.charAt(i) - 'a'] == 1)&#123;                return i;            &#125;        &#125;        return -1;    &#125;&#125;</code></pre>]]></content>
      
      
      <categories>
          
          <category> Leetcode </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Leetcode </tag>
            
            <tag> Easy </tag>
            
            <tag> 数组 </tag>
            
            <tag> Map </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Leetcode:242. 有效的字母异位词</title>
      <link href="/2020/03/22/leetcode-242-you-xiao-de-zi-mu-yi-wei-ci/"/>
      <url>/2020/03/22/leetcode-242-you-xiao-de-zi-mu-yi-wei-ci/</url>
      
        <content type="html"><![CDATA[<h1 id="Leetcode-242-有效的字母异位词"><a href="#Leetcode-242-有效的字母异位词" class="headerlink" title="Leetcode:242. 有效的字母异位词"></a><a href="https://leetcode-cn.com/problems/valid-anagram/">Leetcode:242. 有效的字母异位词</a></h1><h2 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h2><pre><code>给定两个字符串 s 和 t ，编写一个函数来判断 t 是否是 s 的字母异位词。</code></pre><h3 id="示例-1"><a href="#示例-1" class="headerlink" title="示例 1:"></a>示例 1:</h3><pre><code>输入: s = &quot;anagram&quot;, t = &quot;nagaram&quot;输出: true示例 2:输入: s = &quot;rat&quot;, t = &quot;car&quot;输出: false说明:你可以假设字符串只包含小写字母。</code></pre><h3 id="进阶"><a href="#进阶" class="headerlink" title="进阶:"></a>进阶:</h3><pre><code>如果输入字符串包含 unicode 字符怎么办？你能否调整你的解法来应对这种情况？</code></pre><h2 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h2><h3 id="思路1-哈希表"><a href="#思路1-哈希表" class="headerlink" title="思路1: 哈希表"></a>思路1: 哈希表</h3><p>直接使用哈希表计数，先计算s的每个字母个数相加，然后计算t中个数相减</p><h3 id="思路2：数组-计数"><a href="#思路2：数组-计数" class="headerlink" title="思路2：数组+计数"></a>思路2：数组+计数</h3><p>鉴于只有26个字母，所以可以只用一个数组计数，解法可同上，但是常数空间消耗更少</p><h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><h3 id="代码1：哈希表"><a href="#代码1：哈希表" class="headerlink" title="代码1：哈希表"></a>代码1：哈希表</h3><pre class=" language-Java"><code class="language-Java">class Solution &#123;    public boolean isAnagram(String s, String t) &#123;        if ((s == null && t != null) || (s != null && t == null) || s.length() != t.length()) &#123;            return false;        &#125;        Map<Character, Integer> chMap = new HashMap<>();        for(char ch: s.toCharArray())&#123;            if (!chMap.containsKey(ch))&#123;                chMap.put(ch, 1);            &#125;            chMap.put(ch, chMap.get(ch) + 1);        &#125;        for(char ch: t.toCharArray())&#123;            if(!chMap.containsKey(ch) || chMap.get(ch) != 0)&#123;                return false;            &#125; else&#123;                chMap.put(ch, chMap.get(ch) - 1);            &#125;        &#125;        return true;    &#125;&#125;</code></pre><h3 id="代码2：数组-计数"><a href="#代码2：数组-计数" class="headerlink" title="代码2：数组+计数"></a>代码2：数组+计数</h3><pre class=" language-Java"><code class="language-Java">class Solution &#123;    public boolean isAnagram(String s, String t) &#123;        if ((s == null && t != null) || (s != null && t == null) || s.length() != t.length()) &#123;            return false;        &#125;        int[] count = new int[26];        for(int i=0; i < s.length(); i++)&#123;            count[s.charAt(i) - 'a'] += 1;            count[t.charAt(i) - 'a'] -= 1;        &#125;        for(int i=0; i < 26; i++)&#123;            if(count[i] != 0)&#123;                return false;            &#125;        &#125;        return true;    &#125;&#125;</code></pre><h2 id="复杂度分析"><a href="#复杂度分析" class="headerlink" title="复杂度分析"></a>复杂度分析</h2><h3 id="时间复杂度"><a href="#时间复杂度" class="headerlink" title="时间复杂度"></a>时间复杂度</h3><p>n</p><h3 id="空间复杂度"><a href="#空间复杂度" class="headerlink" title="空间复杂度"></a>空间复杂度</h3><p>1,常数</p>]]></content>
      
      
      <categories>
          
          <category> Leetcode </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Leetcode </tag>
            
            <tag> easy </tag>
            
            <tag> Map </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Leetcode 212: 单词搜索II</title>
      <link href="/2020/03/21/leetcode-212-dan-ci-sou-suo-ii/"/>
      <url>/2020/03/21/leetcode-212-dan-ci-sou-suo-ii/</url>
      
        <content type="html"><![CDATA[<h1 id="Leetcode-212-单词搜索II"><a href="#Leetcode-212-单词搜索II" class="headerlink" title="Leetcode 212: 单词搜索II"></a><a href="https://leetcode-cn.com/problems/word-search-ii/">Leetcode 212: 单词搜索II</a></h1><h2 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h2><pre><code>给定一个二维网格 board 和一个字典中的单词列表 words，找出所有同时在二维网格和字典中出现的单词。单词必须按照字母顺序，通过相邻的单元格内的字母构成，其中“相邻”单元格是那些水平相邻或垂直相邻的单元格。同一个单元格内的字母在一个单词中不允许被重复使用。</code></pre><h3 id="示例"><a href="#示例" class="headerlink" title="示例:"></a>示例:</h3><pre><code>输入: words = [&quot;oath&quot;,&quot;pea&quot;,&quot;eat&quot;,&quot;rain&quot;] and board =[[&#39;o&#39;,&#39;a&#39;,&#39;a&#39;,&#39;n&#39;],[&#39;e&#39;,&#39;t&#39;,&#39;a&#39;,&#39;e&#39;],[&#39;i&#39;,&#39;h&#39;,&#39;k&#39;,&#39;r&#39;],[&#39;i&#39;,&#39;f&#39;,&#39;l&#39;,&#39;v&#39;]]输出: [&quot;eat&quot;,&quot;oath&quot;]说明:你可以假设所有输入都由小写字母 a-z 组成。</code></pre><h3 id="提示"><a href="#提示" class="headerlink" title="提示:"></a>提示:</h3><pre><code>你需要优化回溯算法以通过更大数据量的测试。你能否早点停止回溯？如果当前单词不存在于所有单词的前缀中，则可以立即停止回溯。什么样的数据结构可以有效地执行这样的操作？散列表是否可行？为什么？ 前缀树如何？如果你想学习如何实现一个基本的前缀树，请先查看这个问题： 实现Trie（前缀树）。</code></pre><h2 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h2><h3 id="思路1-回溯-DFS"><a href="#思路1-回溯-DFS" class="headerlink" title="思路1: 回溯+DFS"></a>思路1: 回溯+DFS</h3><p>直接使用回溯+DFS判断每个单词是否存在，需要注意一个单词不能使用两次以上一个字符。</p><h3 id="思路2-前缀树-回溯减枝"><a href="#思路2-前缀树-回溯减枝" class="headerlink" title="思路2: 前缀树+回溯减枝"></a>思路2: 前缀树+回溯减枝</h3><p>对所有的单词建立节点，然后回溯board中每个可能的单词，裁剪掉不能满足前缀树的路径</p><h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><h3 id="代码1-回溯-DFS"><a href="#代码1-回溯-DFS" class="headerlink" title="代码1: 回溯+DFS"></a>代码1: 回溯+DFS</h3><pre class=" language-Java"><code class="language-Java">public class Solution &#123;    public List<String> findWords(char[][] board, String[] words) &#123;        List<String> result = new LinkedList<>();        if (words.length == 0 || board.length == 0 || board[0].length == 0)&#123;            return result;        &#125;        for(String word: words)&#123;            if(hasWord(word, board)) &#123;                result.add(word);            &#125;        &#125;        return result;    &#125;    private boolean hasWord(String s, char[][] board)&#123;        boolean canFind = false;        for(int i = 0; i < board.length; i++)&#123;            for(int j = 0; j < board[0].length; j++)&#123;                if (s.charAt(0) == board[i][j] && wordDFS(s, board, 0, i, j)) &#123;                    canFind = true;                    break;                &#125;            &#125;            if (canFind)&#123;                break;            &#125;        &#125;        return canFind;    &#125;    private boolean wordDFS(String s, char[][] board, int startIndex, int i, int j)&#123;        if (startIndex == s.length() - 1)&#123;            return true;        &#125;        boolean canFind = false;        char temp = s.charAt(startIndex);        char getCh = s.charAt(startIndex + 1);        board[i][j] = '$';        if(canGetCh(getCh, board, i + 1, j))&#123;            canFind = canFind || wordDFS(s, board, startIndex+1, i+1, j);            if (canFind)&#123;                board[i][j] = temp;            &#125;        &#125;        if (!canFind && canGetCh(getCh, board, i -1, j))&#123;            canFind = canFind || wordDFS(s, board, startIndex+1, i-1, j);            if (canFind)&#123;                board[i][j] = temp;            &#125;        &#125;        if (!canFind && canGetCh(getCh, board, i, j+1))&#123;            canFind = canFind || wordDFS(s, board, startIndex+1, i, j+1);            if (canFind)&#123;                board[i][j] = temp;            &#125;        &#125;        if (!canFind && canGetCh(getCh, board, i, j-1))&#123;            canFind = canFind || wordDFS(s, board, startIndex+1, i, j-1);            if (canFind)&#123;                board[i][j] = temp;            &#125;        &#125;        board[i][j] = temp;        return canFind;    &#125;    private boolean canGetCh(char getCh, char[][] board, int i, int j)&#123;        if (i < 0 || i >= board.length || j < 0 || j >= board[0].length)&#123;            return false;        &#125;        return board[i][j] == getCh;    &#125;&#125;</code></pre><h2 id="复杂度分析"><a href="#复杂度分析" class="headerlink" title="复杂度分析"></a>复杂度分析</h2><h3 id="思路1-时间复杂度"><a href="#思路1-时间复杂度" class="headerlink" title="思路1:时间复杂度"></a>思路1:时间复杂度</h3><p>只超过14%</p><h3 id="思路2-空间复杂度"><a href="#思路2-空间复杂度" class="headerlink" title="思路2:空间复杂度"></a>思路2:空间复杂度</h3><p>&#x2F;&#x2F;TODO</p>]]></content>
      
      
      <categories>
          
          <category> Leetcode </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Leetcode </tag>
            
            <tag> Medium </tag>
            
            <tag> 回溯 </tag>
            
            <tag> 前缀树 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Leetcode 208:实现Trie(前缀树)</title>
      <link href="/2020/03/20/leetcode-208-shi-xian-trie-qian-zhui-shu/"/>
      <url>/2020/03/20/leetcode-208-shi-xian-trie-qian-zhui-shu/</url>
      
        <content type="html"><![CDATA[<h1 id="Leetcode-208-实现Trie-前缀树"><a href="#Leetcode-208-实现Trie-前缀树" class="headerlink" title="Leetcode 208:实现Trie(前缀树)"></a><a href="https://leetcode-cn.com/problems/implement-trie-prefix-tree/">Leetcode 208:实现Trie(前缀树)</a></h1><h2 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h2><pre><code>实现一个 Trie (前缀树)，包含 insert, search, 和 startsWith 这三个操作。</code></pre><h3 id="示例"><a href="#示例" class="headerlink" title="示例:"></a>示例:</h3><pre><code>Trie trie = new Trie();trie.insert(&quot;apple&quot;);trie.search(&quot;apple&quot;);   // 返回 truetrie.search(&quot;app&quot;);     // 返回 falsetrie.startsWith(&quot;app&quot;); // 返回 truetrie.insert(&quot;app&quot;);   trie.search(&quot;app&quot;);     // 返回 true</code></pre><h3 id="说明"><a href="#说明" class="headerlink" title="说明:"></a>说明:</h3><pre><code>你可以假设所有的输入都是由小写字母 a-z 构成的。保证所有输入均为非空字符串。</code></pre><h2 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h2><h3 id="思路1-前缀树基本实现"><a href="#思路1-前缀树基本实现" class="headerlink" title="思路1: 前缀树基本实现"></a>思路1: 前缀树基本实现</h3><p>主要是使用前缀树的基本概念，将前缀字母连接到下一个后缀节点,以及标记好结束节点</p><h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><h3 id="思路1代码"><a href="#思路1代码" class="headerlink" title="思路1代码"></a>思路1代码</h3><pre class=" language-Java"><code class="language-Java">class Trie &#123;    private final int alphaSize = 26;    private Trie[] children = new Trie[alphaSize];    private boolean isEnd = false;    /** Initialize your data structure here. */    public Trie() &#123;    &#125;    /** Inserts a word into the trie. */    public void insert(String word) &#123;        Trie temp = this;        for(var ch: word.toCharArray())&#123;            if (temp.children[ch - 'a'] == null)&#123;                temp.children[ch - 'a'] = new Trie();            &#125;            temp = temp.children[ch - 'a'];        &#125;        temp.isEnd=true;    &#125;    /** Returns if the word is in the trie. */    public boolean search(String word) &#123;        Trie temp = this;        for(var ch: word.toCharArray())&#123;            if (temp.children[ch - 'a'] == null)&#123;                return false;            &#125;            temp = temp.children[ch - 'a'];        &#125;        return temp.isEnd;    &#125;    /** Returns if there is any word in the trie that starts with the given prefix. */    public boolean startsWith(String prefix) &#123;        Trie temp = this;        for(var ch: prefix.toCharArray())&#123;            if (temp.children[ch - 'a'] == null)&#123;                return false;            &#125;            temp = temp.children[ch - 'a'];        &#125;        return true;    &#125;&#125;</code></pre><h2 id="复杂度分析"><a href="#复杂度分析" class="headerlink" title="复杂度分析"></a>复杂度分析</h2><h3 id="时间复杂度"><a href="#时间复杂度" class="headerlink" title="时间复杂度"></a>时间复杂度</h3><p>$n$均可看作是链表的查找插入</p><h3 id="空间复杂度"><a href="#空间复杂度" class="headerlink" title="空间复杂度"></a>空间复杂度</h3><p>$n$</p>]]></content>
      
      
      <categories>
          
          <category> Leetcode </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Leetcode </tag>
            
            <tag> Medium </tag>
            
            <tag> 字符串 </tag>
            
            <tag> 树 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Leetcode 140: 单词切分II</title>
      <link href="/2020/03/19/leetcode-140-dan-ci-qie-fen-ii/"/>
      <url>/2020/03/19/leetcode-140-dan-ci-qie-fen-ii/</url>
      
        <content type="html"><![CDATA[<h1 id="Leetcode-140-单词切分II"><a href="#Leetcode-140-单词切分II" class="headerlink" title="Leetcode 140: 单词切分II"></a><a href="https://leetcode-cn.com/problems/word-break-ii/">Leetcode 140: 单词切分II</a></h1><h2 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h2><pre><code>给定一个非空字符串 s 和一个包含非空单词列表的字典 wordDict，在字符串中增加空格来构建一个句子，使得句子中所有的单词都在词典中。返回所有这些可能的句子。</code></pre><h3 id="说明："><a href="#说明：" class="headerlink" title="说明："></a>说明：</h3><pre><code>分隔时可以重复使用字典中的单词。你可以假设字典中没有重复的单词。</code></pre><h3 id="示例-1："><a href="#示例-1：" class="headerlink" title="示例 1："></a>示例 1：</h3><pre><code>输入:s = &quot;catsanddog&quot;wordDict = [&quot;cat&quot;, &quot;cats&quot;, &quot;and&quot;, &quot;sand&quot;, &quot;dog&quot;]输出:[&quot;cats and dog&quot;,&quot;cat sand dog&quot;]</code></pre><h3 id="示例-2："><a href="#示例-2：" class="headerlink" title="示例 2："></a>示例 2：</h3><pre><code>输入:s = &quot;pineapplepenapple&quot;wordDict = [&quot;apple&quot;, &quot;pen&quot;, &quot;applepen&quot;, &quot;pine&quot;, &quot;pineapple&quot;]输出:[&quot;pine apple pen apple&quot;,&quot;pineapple pen apple&quot;,&quot;pine applepen apple&quot;]解释: 注意你可以重复使用字典中的单词。</code></pre><h3 id="示例-3："><a href="#示例-3：" class="headerlink" title="示例 3："></a>示例 3：</h3><pre><code>输入:s = &quot;catsandog&quot;wordDict = [&quot;cats&quot;, &quot;dog&quot;, &quot;sand&quot;, &quot;and&quot;, &quot;cat&quot;]输出:[]</code></pre><h2 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h2><h3 id="思路1：DP-回溯"><a href="#思路1：DP-回溯" class="headerlink" title="思路1：DP+回溯"></a>思路1：DP+回溯</h3><p>即利用中等难度的dp单词切分获取到可能的子序列，根据是否可以整体切分以及切分标记回溯这些字序列获取最终的结果</p><h3 id="思路2-记忆回溯"><a href="#思路2-记忆回溯" class="headerlink" title="思路2: 记忆回溯"></a>思路2: 记忆回溯</h3><p>将每个位置i记为以他为起点，到最后结果的可能切分，最后递归求解。将每个位置记为(i, list<str>),减少无用的后缀计算，以空间换时间</p><h3 id="思路3：DP-直接记录"><a href="#思路3：DP-直接记录" class="headerlink" title="思路3：DP+直接记录"></a>思路3：DP+直接记录</h3><p>将每个位置直接记录可能的前缀串，最后得到记录的全单词切分前缀串。但是在leetcode上会出现内存分配过大而超时的现象，故意需要增加判断是否可以完全完成单词切分</p><h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><h3 id="代码1-DP-回溯"><a href="#代码1-DP-回溯" class="headerlink" title="代码1: DP+回溯"></a>代码1: DP+回溯</h3><pre class=" language-Java"><code class="language-Java">class Solution &#123;    public List<String> wordBreak(String s, List<String> wordDict) &#123;        List<String> result = new LinkedList<>();        if (s == null || s.length() == 0 || wordDict.size() == 0)&#123;            return result;        &#125;        Set<String> hashSet = new HashSet<>(wordDict);        boolean[] dps = new boolean[s.length() + 1];        dps[0] = true;        for(int end=1; end < s.length() + 1; end++)&#123;            for(int start=0; start < end; start++) &#123;                if(dps[start] && hashSet.contains(s.substring(start, end))) &#123;                    dps[end] = true;                    break;                &#125;            &#125;        &#125;        if (!dps[s.length()]) &#123;            return result;        &#125;        List<String> temp = new LinkedList<>();        wordBreakHelper(s, hashSet, s.length(), dps, temp, result);        return result;    &#125;    private void wordBreakHelper(String s, Set<String> hashSet, int endIndex, boolean[] dps, List<String> temp, List<String> result) &#123;        if (endIndex == 0) &#123;            StringBuilder sb = new StringBuilder();            for(int i = temp.size() - 1; i >= 0; i--)&#123;                if (i != temp.size() - 1) &#123;                    sb.append(" ");                &#125;                sb.append(temp.get(i));            &#125;            result.add(sb.toString());        &#125;        for(int i=endIndex - 1; i >= 0; i--) &#123;            if (dps[i] && hashSet.contains(s.substring(i, endIndex)))&#123;                temp.add(s.substring(i, endIndex));                wordBreakHelper(s, hashSet, i, dps, temp, result);                temp.remove(temp.size() - 1);            &#125;        &#125;    &#125;&#125;</code></pre><h3 id="代码2-记忆回溯"><a href="#代码2-记忆回溯" class="headerlink" title="代码2: 记忆回溯"></a>代码2: 记忆回溯</h3><pre class=" language-Java"><code class="language-Java">public class Solution2 &#123;    Map<Integer, List<String>> hashMap = new HashMap<>();    public List<String> wordBreak(String s, List<String> wordDict)&#123;        List<String> result = new LinkedList<>();        if (s == null || s.length() == 0 || wordDict.size() == 0)&#123;            return result;        &#125;        return wordBreakHelper(s, new HashSet<>(wordDict), 0);    &#125;    private List<String> wordBreakHelper(String s, Set<String> hashSet, int startIndex) &#123;        if (hashMap.containsKey(startIndex)) &#123;            return hashMap.get(startIndex);        &#125;        List<String> temp = new LinkedList<>();        // 标记是否可以完全切分        if (startIndex == s.length()) &#123;            temp.add("");        &#125;        for(int end=startIndex+1; end <= s.length(); end++)&#123;            if(hashSet.contains(s.substring(startIndex, end)))&#123;                List<String> list = wordBreakHelper(s, hashSet, end);                for(var l: list)&#123;                    if (l.equals(""))&#123;                        temp.add(s.substring(startIndex, end));                    &#125; else&#123;                        temp.add(s.substring(startIndex, end) + " " + l);                    &#125;                &#125;            &#125;        &#125;        hashMap.put(startIndex, temp);        return temp;    &#125;&#125;</code></pre><h3 id="代码3-DP-直接记录"><a href="#代码3-DP-直接记录" class="headerlink" title="代码3: DP+直接记录"></a>代码3: DP+直接记录</h3><pre class=" language-Java"><code class="language-Java">public class Solution3 &#123;    public List<String> wordBreak(String s, List<String> wordDict) &#123;        if (s == null || s.length() == 0 || wordDict.size() == 0 || !canWordBreak(s, wordDict))&#123;            return new LinkedList<String>();        &#125;        Set<String> hashSet = new HashSet<>(wordDict);        List<String>[] dps = new LinkedList[s.length() + 1];        List<String> zero = new LinkedList<>();        zero.add("");        dps[0] = zero;        for(int end=1; end <= s.length(); end++)&#123;            List<String> temp = new LinkedList<>();            for(int start=0; start < end; start++)&#123;                if (dps[start].size() > 0 && hashSet.contains(s.substring(start, end)))&#123;                    for(var l: dps[start])&#123;                        temp.add(l + (l.equals("") ? "" : " ") + s.substring(start, end));                    &#125;                &#125;            &#125;            dps[end] = temp;        &#125;        return dps[s.length()];    &#125;    public boolean canWordBreak(String s, List<String> wordDict) &#123;        if (s == null || s.length() == 0) &#123;            return true;        &#125; else if(wordDict.size() == 0) &#123;            return false;        &#125;        Set<String> hashSet = new HashSet<>(wordDict);        boolean[] dps = new boolean[s.length() + 1];        dps[0] = true;        for(int end = 1; end < s.length() + 1; end++) &#123;            for(int start=0; start < end; start++) &#123;                if (dps[start] && hashSet.contains(s.substring(start, end))) &#123;                    dps[end] = true;                    break;                &#125;            &#125;        &#125;        return dps[s.length()];    &#125;&#125;</code></pre><h2 id="复杂度分析"><a href="#复杂度分析" class="headerlink" title="复杂度分析"></a>复杂度分析</h2><h3 id="思路1时间复杂度"><a href="#思路1时间复杂度" class="headerlink" title="思路1时间复杂度"></a>思路1时间复杂度</h3><p>相当于减枝之后$n^n$？</p><h3 id="思路1空间复杂度"><a href="#思路1空间复杂度" class="headerlink" title="思路1空间复杂度"></a>思路1空间复杂度</h3><p>$n$</p><h3 id="思路2时间复杂度"><a href="#思路2时间复杂度" class="headerlink" title="思路2时间复杂度"></a>思路2时间复杂度</h3><p>$n^3$</p><h3 id="思路2空间复杂度"><a href="#思路2空间复杂度" class="headerlink" title="思路2空间复杂度"></a>思路2空间复杂度</h3><p>$n^2$，相当于每次都清除</p><h3 id="思路3时间复杂度"><a href="#思路3时间复杂度" class="headerlink" title="思路3时间复杂度"></a>思路3时间复杂度</h3><p>$n^3$</p><h3 id="思路3空间复杂度"><a href="#思路3空间复杂度" class="headerlink" title="思路3空间复杂度"></a>思路3空间复杂度</h3><p>$n^3$</p>]]></content>
      
      
      <categories>
          
          <category> Leetcode </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Hard </tag>
            
            <tag> 回溯 </tag>
            
            <tag> DP </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Leetcode 139: 单词切分</title>
      <link href="/2020/03/19/leetcode-139-dan-ci-qie-fen/"/>
      <url>/2020/03/19/leetcode-139-dan-ci-qie-fen/</url>
      
        <content type="html"><![CDATA[<h1 id="Leetcode-139-单词切分"><a href="#Leetcode-139-单词切分" class="headerlink" title="Leetcode 139: 单词切分"></a><a href="https://leetcode-cn.com/problems/word-break/">Leetcode 139: 单词切分</a></h1><h2 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h2><p>给定一个非空字符串 s 和一个包含非空单词列表的字典 wordDict，判定 s 是否可以被空格拆分为一个或多个在字典中出现的单词。</p><h3 id="说明："><a href="#说明：" class="headerlink" title="说明："></a>说明：</h3><pre><code>拆分时可以重复使用字典中的单词。你可以假设字典中没有重复的单词。</code></pre><h3 id="示例-1："><a href="#示例-1：" class="headerlink" title="示例 1："></a>示例 1：</h3><pre><code>输入: s = &quot;leetcode&quot;, wordDict = [&quot;leet&quot;, &quot;code&quot;]输出: true解释: 返回 true 因为 &quot;leetcode&quot; 可以被拆分成 &quot;leet code&quot;。</code></pre><h3 id="示例-2："><a href="#示例-2：" class="headerlink" title="示例 2："></a>示例 2：</h3><pre><code>输入: s = &quot;applepenapple&quot;, wordDict = [&quot;apple&quot;, &quot;pen&quot;]输出: true解释: 返回 true 因为 &quot;applepenapple&quot; 可以被拆分成 &quot;apple pen apple&quot;。    注意你可以重复使用字典中的单词。</code></pre><h3 id="示例-3："><a href="#示例-3：" class="headerlink" title="示例 3："></a>示例 3：</h3><pre><code>输入: s = &quot;catsandog&quot;, wordDict = [&quot;cats&quot;, &quot;dog&quot;, &quot;sand&quot;, &quot;and&quot;, &quot;cat&quot;]输出: false</code></pre><h2 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h2><h3 id="思路1：暴力遍历（时间爆表）"><a href="#思路1：暴力遍历（时间爆表）" class="headerlink" title="思路1：暴力遍历（时间爆表）"></a>思路1：暴力遍历（时间爆表）</h3><p>检查每一个前缀的子字符串回溯实现</p><h3 id="思路2：记忆化可切分后缀"><a href="#思路2：记忆化可切分后缀" class="headerlink" title="思路2：记忆化可切分后缀"></a>思路2：记忆化可切分后缀</h3><p>记录一个回溯记忆数组，若该后缀可切分则综合到最后可切分，这样可以大幅减少调用函数次数</p><h3 id="思路3-BFS实现"><a href="#思路3-BFS实现" class="headerlink" title="思路3: BFS实现"></a>思路3: BFS实现</h3><p>使用广度优先遍历实现，相当于将可到达相同的前缀节点合并，不进行相同的后续操作，减少函数调用次数。</p><h3 id="思路4-DP实现"><a href="#思路4-DP实现" class="headerlink" title="思路4: DP实现"></a>思路4: DP实现</h3><p>第j个位置可根据可形成前缀的位置进行计算，若其前缀为i,则若s.sub(i, j)在字典中则第j个位置为可拼接，最后一个位置即为最后是否可切分结果。</p><h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><h3 id="代码1"><a href="#代码1" class="headerlink" title="代码1"></a>代码1</h3><pre class=" language-Java"><code class="language-Java">public class Solution &#123;    public boolean wordBreak(String s, List<String> wordDict) &#123;        if (s == null || s.length() == 0) &#123;            return true;        &#125; else if (wordDict.size() == 0) &#123;            return false;        &#125;        HashSet<String> hashSet = new HashSet<>(wordDict);        return wordBreakHelper(s, 0, hashSet);    &#125;    private boolean wordBreakHelper(String s, int startIndex, HashSet<String> hashSet) &#123;        if (startIndex >= s.length()) &#123;            return true;        &#125;        boolean hasMatch = false;        for(var neededStr: hashSet) &#123;//            System.out.println(s.substring(startIndex, startIndex + neededStr.length()));            if (startIndex + neededStr.length() <= s.length() && s.substring(startIndex, startIndex + neededStr.length()).equalsIgnoreCase(neededStr)) &#123;                hasMatch = hasMatch || wordBreakHelper(s, startIndex + neededStr.length(), hashSet);                if (hasMatch) &#123;                    break;                &#125;            &#125;        &#125;        return hasMatch;    &#125;&#125;</code></pre><h3 id="代码2"><a href="#代码2" class="headerlink" title="代码2"></a>代码2</h3><pre class=" language-Java"><code class="language-Java">public class Solution2 &#123;    public boolean wordBreak(String s, List<String> wordDict) &#123;        if (s == null || s.length() == 0) &#123;            return true;        &#125; else if (wordDict.size() == 0) &#123;            return false;        &#125;        HashSet<String> hashSet = new HashSet<>(wordDict);        return wordBreakHelper(s, 0, hashSet, new Boolean[s.length()]);    &#125;    private boolean wordBreakHelper(String neededStr, int startIndex, HashSet<String> hashSet, Boolean[] hasMatch) &#123;        if (startIndex == neededStr.length()) &#123;            return true;        &#125;        if (hasMatch[startIndex] != null) &#123;            return hasMatch[startIndex];        &#125;        for(int i=startIndex + 1; i <= neededStr.length(); i++) &#123;            if (hashSet.contains(neededStr.substring(startIndex, i)) && wordBreakHelper(neededStr, i, hashSet, hasMatch)) &#123;                return hasMatch[startIndex] = true;            &#125;        &#125;        return hasMatch[startIndex] = false;    &#125;&#125;</code></pre><h3 id="代码3：BFS-（队列实现）"><a href="#代码3：BFS-（队列实现）" class="headerlink" title="代码3：BFS （队列实现）"></a>代码3：BFS （队列实现）</h3><pre class=" language-Java"><code class="language-Java">public class Solution3 &#123;    public boolean wordBreak(String s, List<String> wordDict) &#123;        if (s == null || s.length() == 0) &#123;            return true;        &#125; else if(wordDict.size() == 0) &#123;            return false;        &#125;        Set<String> hashSet = new HashSet<>(wordDict);        Queue<Integer> queue = new LinkedList<>();        boolean[] hasSeen = new boolean[s.length()];        queue.add(0);        while (!queue.isEmpty()) &#123;            int startIndex = queue.remove();            if (!hasSeen[startIndex]) &#123;                for(int endIndex = startIndex + 1; endIndex <= s.length(); endIndex++) &#123;                    if (hashSet.contains(s.substring(startIndex, endIndex))) &#123;                        queue.add(endIndex);                        if (endIndex == s.length()) &#123;                            return true;                        &#125;                    &#125;                &#125;                hasSeen[startIndex] = true;            &#125;        &#125;        return false;    &#125;&#125;</code></pre><h3 id="代码4-DP实现"><a href="#代码4-DP实现" class="headerlink" title="代码4: DP实现"></a>代码4: DP实现</h3><pre class=" language-Java"><code class="language-Java">public class Solution4 &#123;    public boolean wordBreak(String s, List<String> wordDict) &#123;        if (s == null || s.length() == 0) &#123;            return true;        &#125; else if(wordDict.size() == 0) &#123;            return false;        &#125;        Set<String> hashSet = new HashSet<>(wordDict);        boolean[] dps = new boolean[s.length() + 1];        dps[0] = true;        for(int end = 1; end < s.length() + 1; end++) &#123;            for(int start=0; start < end; start++) &#123;                if (dps[start] && hashSet.contains(s.substring(start, end))) &#123;                    dps[end] = true;                    break;                &#125;            &#125;        &#125;        return dps[s.length()];    &#125;&#125;</code></pre><h2 id="复杂度分析"><a href="#复杂度分析" class="headerlink" title="复杂度分析"></a>复杂度分析</h2><h3 id="思路1：时间复杂度"><a href="#思路1：时间复杂度" class="headerlink" title="思路1：时间复杂度"></a>思路1：时间复杂度</h3><p>$n^n$</p><h3 id="思路1-空间复杂度"><a href="#思路1-空间复杂度" class="headerlink" title="思路1: 空间复杂度"></a>思路1: 空间复杂度</h3><p>$n$</p><h3 id="思路2-时间复杂度"><a href="#思路2-时间复杂度" class="headerlink" title="思路2: 时间复杂度"></a>思路2: 时间复杂度</h3><p>$n^2$</p><h3 id="思路2：空间复杂度"><a href="#思路2：空间复杂度" class="headerlink" title="思路2：空间复杂度"></a>思路2：空间复杂度</h3><p>$n$</p><h3 id="思路3-时间复杂度"><a href="#思路3-时间复杂度" class="headerlink" title="思路3: 时间复杂度"></a>思路3: 时间复杂度</h3><p>$n^2$</p><h3 id="思路3：空间复杂度"><a href="#思路3：空间复杂度" class="headerlink" title="思路3：空间复杂度"></a>思路3：空间复杂度</h3><p>$n$</p><h3 id="思路4-时间复杂度"><a href="#思路4-时间复杂度" class="headerlink" title="思路4: 时间复杂度"></a>思路4: 时间复杂度</h3><p>$n^2$</p><h3 id="思路4：空间复杂度"><a href="#思路4：空间复杂度" class="headerlink" title="思路4：空间复杂度"></a>思路4：空间复杂度</h3><p>$n$</p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>重点在于如何将重复或者非必需的步骤省略</p>]]></content>
      
      
      <categories>
          
          <category> Leetcode </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Leetcode </tag>
            
            <tag> Medium </tag>
            
            <tag> BFS </tag>
            
            <tag> 回溯 </tag>
            
            <tag> DP </tag>
            
            <tag> 标记 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Leetcode 131: 分割回文串</title>
      <link href="/2020/03/17/leetcode-131-fen-ge-hui-wen-chuan/"/>
      <url>/2020/03/17/leetcode-131-fen-ge-hui-wen-chuan/</url>
      
        <content type="html"><![CDATA[<h1 id="Leetcode-131-分割回文串"><a href="#Leetcode-131-分割回文串" class="headerlink" title="Leetcode 131: 分割回文串"></a>Leetcode 131: 分割回文串</h1><h2 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h2><p>给定一个字符串 s，将 s 分割成一些子串，使每个子串都是回文串。<br>返回 s 所有可能的分割方案。</p><h3 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h3><pre><code>输入: &quot;aab&quot;输出:[    [&quot;aa&quot;,&quot;b&quot;],    [&quot;a&quot;,&quot;a&quot;,&quot;b&quot;]]</code></pre><h2 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h2><h3 id="思路1：-回溯-判断"><a href="#思路1：-回溯-判断" class="headerlink" title="思路1： 回溯+判断"></a>思路1： 回溯+判断</h3><p>即利用回溯思路不断增加是回文前缀字符串组的后续可能回文串</p><h3 id="思路1：代码"><a href="#思路1：代码" class="headerlink" title="思路1：代码"></a>思路1：代码</h3><pre class=" language-Java"><code class="language-Java">class Solution &#123;    public List<List<String>> partition(String s) &#123;        List<List<String>> result = new LinkedList<>();        if (s.length() == 0) &#123;            return result;        &#125;        List<String> temp = new LinkedList<>();        partitionHelper(result, s, 0, temp);        return result;    &#125;        private boolean canReverse(String s, int i, int j) &#123;        if (i >= j) &#123;            return true;        &#125;        if (s.charAt(i++) == s.charAt(j--)) &#123;            return canReverse(s, i, j);        &#125; else &#123;            return false;        &#125;    &#125;        private void partitionHelper(List<List<String>> res, String s, int startIndex, List<String> temp) &#123;        int size = s.length();        if (size <= startIndex) &#123;            res.add(new LinkedList<String>(temp));            return;        &#125;        for(int i = startIndex; i < size; i++) &#123;            if (canReverse(s, startIndex, i)) &#123;                temp.add(s.substring(startIndex, i + 1));                partitionHelper(res, s, i + 1, temp);                temp.remove(temp.size() - 1);            &#125;        &#125;    &#125;&#125;</code></pre><h3 id="思路2：回溯-动态规划优化"><a href="#思路2：回溯-动态规划优化" class="headerlink" title="思路2：回溯+动态规划优化"></a>思路2：回溯+动态规划优化</h3><p>空间换时间，将判断是否是回文看成是一个动态规划，直接使用$n^2$算法求取，之后直接$1$调取</p><h3 id="思路2-代码"><a href="#思路2-代码" class="headerlink" title="思路2: 代码"></a>思路2: 代码</h3><pre class=" language-Java"><code class="language-Java">public class Solution &#123;    public List<List<String>> partition(String s) &#123;        List<List<String>> res = new LinkedList<List<String>>();        if (s.length() == 0) &#123;            return res;        &#125;        int size = s.length();        boolean[][] dps = new boolean[size][size];        for(int right = 0; right < size; right++) &#123;            for(int left = 0; left <= right; left++) &#123;                if (s.charAt(left) == s.charAt(right) && (right - left <= 2 || dps[left + 1][right - 1])) &#123;                    dps[left][right] = true;                &#125;            &#125;        &#125;        List<String> temp = new LinkedList<>();        partitionHelper(res, s, 0, temp, dps);        return res;    &#125;    private void partitionHelper(List<List<String>> res, String s, int startIndex, List<String> temp, boolean[][] dps) &#123;        int size = s.length();        if (startIndex >= size) &#123;            res.add(new LinkedList<>(temp));            return;        &#125;        for(int i = startIndex; i < size; i++) &#123;            if (dps[startIndex][i]) &#123;                temp.add(s.substring(startIndex, i + 1));                partitionHelper(res, s, i + 1, temp, dps);                temp.remove(temp.size() - 1);            &#125;        &#125;    &#125;&#125;</code></pre><h2 id="复杂度分析"><a href="#复杂度分析" class="headerlink" title="复杂度分析"></a>复杂度分析</h2><h3 id="思路1"><a href="#思路1" class="headerlink" title="思路1"></a>思路1</h3><h4 id="时间复杂度"><a href="#时间复杂度" class="headerlink" title="时间复杂度"></a>时间复杂度</h4><p>$n*2^n?$</p><h4 id="空间复杂度"><a href="#空间复杂度" class="headerlink" title="空间复杂度"></a>空间复杂度</h4><p>$n*2^n?$</p><h3 id="思路2"><a href="#思路2" class="headerlink" title="思路2"></a>思路2</h3><h4 id="时间复杂度-1"><a href="#时间复杂度-1" class="headerlink" title="时间复杂度"></a>时间复杂度</h4><p>$2^n + n^2$</p><h4 id="空间复杂度-1"><a href="#空间复杂度-1" class="headerlink" title="空间复杂度"></a>空间复杂度</h4><p>$n * 2^n + n^2$</p>]]></content>
      
      
      <categories>
          
          <category> Leetcode </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Leetcode </tag>
            
            <tag> Middle </tag>
            
            <tag> 回溯 </tag>
            
            <tag> DFS </tag>
            
            <tag> 动态规划 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Leetcode 25:验证回文串</title>
      <link href="/2020/03/12/leetcode-25-yan-zheng-hui-wen-chuan/"/>
      <url>/2020/03/12/leetcode-25-yan-zheng-hui-wen-chuan/</url>
      
        <content type="html"><![CDATA[<h1 id="Leetcode-25-验证回文串"><a href="#Leetcode-25-验证回文串" class="headerlink" title="Leetcode 25:验证回文串"></a><a href="https://leetcode-cn.com/problems/valid-palindrome/">Leetcode 25:验证回文串</a></h1><h2 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h2><p>给定一个字符串，验证它是否是回文串，只考虑字母和数字字符，可以忽略字母的大小写。</p><p>说明：本题中，我们将空字符串定义为有效的回文串。</p><h3 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h3><h4 id="示例-1"><a href="#示例-1" class="headerlink" title="示例 1:"></a>示例 1:</h4><pre><code>输入: &quot;A man, a plan, a canal: Panama&quot;输出: true</code></pre><h4 id="示例-2"><a href="#示例-2" class="headerlink" title="示例 2:"></a>示例 2:</h4><pre><code>输入: &quot;race a car&quot;输出: false</code></pre><h2 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h2><h3 id="思路1：双指针"><a href="#思路1：双指针" class="headerlink" title="思路1：双指针"></a>思路1：双指针</h3><p>使用头尾指针进行匹配，如头尾指针指向的字符不同则判为错,注意边界处理即可</p><h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><h3 id="思路1"><a href="#思路1" class="headerlink" title="思路1"></a>思路1</h3><pre class=" language-Java"><code class="language-Java">class Solution &#123;    public boolean isPalindrome(String s) &#123;        if (s == null || s.length() == 0) &#123;            return true;        &#125;        s = s.toLowerCase();        int low_index = 0;        int high_index= s.length() - 1;        boolean result = true;        while (true) &#123;            while (high_index > low_index  && !isAlpha(s.charAt(low_index))) &#123;                low_index ++;            &#125;            while (high_index > low_index && !isAlpha(s.charAt(high_index))) &#123;                high_index --;            &#125;            if (high_index <= low_index) &#123;                break;            &#125;            else if (high_index > low_index && isAlpha(s.charAt(low_index)) && isAlpha(s.charAt(high_index)) && s.charAt(high_index) != s.charAt(low_index)) &#123;                result = false;                break;            &#125;            else&#123;                high_index --;                low_index++;            &#125;        &#125;        return result;    &#125;    private boolean isAlpha(char ch) &#123;        if ((ch >= '0' && ch <= '9') || (ch  >= 'a' && ch <= 'z')) &#123;            return true;        &#125; else&#123;            return false;        &#125;    &#125;&#125;</code></pre><h2 id="算法复杂度分析"><a href="#算法复杂度分析" class="headerlink" title="算法复杂度分析"></a>算法复杂度分析</h2><h3 id="思路1-1"><a href="#思路1-1" class="headerlink" title="思路1"></a>思路1</h3><h4 id="时间复杂度"><a href="#时间复杂度" class="headerlink" title="时间复杂度"></a>时间复杂度</h4><p>n</p><h4 id="空间复杂度"><a href="#空间复杂度" class="headerlink" title="空间复杂度"></a>空间复杂度</h4><p>1</p>]]></content>
      
      
      <categories>
          
          <category> Leetcode </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Leetcode </tag>
            
            <tag> Easy </tag>
            
            <tag> 双指针 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Leetcode 887:鸡蛋掉落</title>
      <link href="/2020/03/09/leetcode-887-ji-dan-diao-luo/"/>
      <url>/2020/03/09/leetcode-887-ji-dan-diao-luo/</url>
      
        <content type="html"><![CDATA[<h1 id="Leetcode-887-鸡蛋掉落"><a href="#Leetcode-887-鸡蛋掉落" class="headerlink" title="Leetcode 887:鸡蛋掉落"></a><a href="https://leetcode-cn.com/problems/super-egg-drop/">Leetcode 887:鸡蛋掉落</a></h1><h2 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h2><p>你将获得 K 个鸡蛋，并可以使用一栋从 1 到 N  共有 N 层楼的建筑。</p><p>每个蛋的功能都是一样的，如果一个蛋碎了，你就不能再把它掉下去。</p><p>你知道存在楼层 F ，满足 0 &lt;&#x3D; F &lt;&#x3D; N 任何从高于 F 的楼层落下的鸡蛋都会碎，从 F 楼层或比它低的楼层落下的鸡蛋都不会破。</p><p>每次移动，你可以取一个鸡蛋（如果你有完整的鸡蛋）并把它从任一楼层 X 扔下（满足 1 &lt;&#x3D; X &lt;&#x3D; N）。</p><p>你的目标是确切地知道 F 的值是多少。</p><p>无论 F 的初始值如何，你确定 F 的值的最小移动次数是多少？</p><p>来源：力扣（LeetCode）<br>链接：<a href="https://leetcode-cn.com/problems/super-egg-drop">https://leetcode-cn.com/problems/super-egg-drop</a><br>著作权归领扣网络所有。商业转载请联系官方授权，非商业转载请注明出处。</p><h3 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h3><h4 id="示例-1："><a href="#示例-1：" class="headerlink" title="示例 1："></a>示例 1：</h4><pre><code>输入：K = 1, N = 2输出：2解释：鸡蛋从 1 楼掉落。如果它碎了，我们肯定知道 F = 0 。否则，鸡蛋从 2 楼掉落。如果它碎了，我们肯定知道 F = 1 。如果它没碎，那么我们肯定知道 F = 2 。因此，在最坏的情况下我们需要移动 2 次以确定 F 是多少。</code></pre><h4 id="示例-2："><a href="#示例-2：" class="headerlink" title="示例 2："></a>示例 2：</h4><pre><code>输入：K = 2, N = 6输出：3示例 3：输入：K = 3, N = 14输出：4</code></pre><h4 id="提示："><a href="#提示：" class="headerlink" title="提示："></a>提示：</h4><pre><code>1 &lt;= K &lt;= 1001 &lt;= N &lt;= 10000</code></pre><h2 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h2><h3 id="思路1：基本二维DP-二分搜索"><a href="#思路1：基本二维DP-二分搜索" class="headerlink" title="思路1：基本二维DP + 二分搜索"></a>思路1：基本二维DP + 二分搜索</h3><p>直接二维DP计算最少的步骤，根据从x层掉落一个鸡蛋得到，则该情况下的状态转移方程为$DP[K][N] &#x3D; max(DP[K][N-x], DP[K-1][x-1]) + 1$,从而可得到整体的状态转移方程$DP[K][N] &#x3D; min(max(DP[K][N-x], DP[K-1][x-1])) + 1 x \isin [1, N]$,同时在dp过程中，前一个函数随x单调递减，后面单调递增，所以可以直接求是两个函数最接近的值作为候选求最小（可用两函数比相交（非整数，或者理解为值域相交，在相同定义域内））。所以该过程可用二分法求解。</p><h3 id="思路2：二维DP-逆向思维（根据步骤数和鸡蛋数求楼数）"><a href="#思路2：二维DP-逆向思维（根据步骤数和鸡蛋数求楼数）" class="headerlink" title="思路2：二维DP + 逆向思维（根据步骤数和鸡蛋数求楼数）"></a>思路2：二维DP + 逆向思维（根据步骤数和鸡蛋数求楼数）</h3><p>可理解为有3元的方程，在一定程度上可根据两元求第3个未知变量，根据题设可以得到一个楼层数与鸡蛋数和步骤的关系，即在特定步骤和鸡蛋数下最多可以测的层数。所以可以得到递推式M为步骤数，K为鸡蛋数，所以状态转移方程为$DP[M][K] &#x3D; DP[M-1][K-1] + DP[M-1][K] + 1$，该方法考虑的是每增加一步，鸡蛋数增加或减少一个，加1相当于在当前层进行操作。状态初始化是可利用任何一个鸡蛋可探明层数为M层，任何1步K个鸡蛋都只能探明1层，在这个过程中K已知，所以可得到一个可定范围</p><h3 id="思路3：-逆向思维-推导函数-二分搜索"><a href="#思路3：-逆向思维-推导函数-二分搜索" class="headerlink" title="思路3： 逆向思维+推导函数 + 二分搜索"></a>思路3： 逆向思维+推导函数 + 二分搜索</h3><p>使用思路2进而推导出通项公式$f(k,n) &#x3D; \frac{n(n-1)…(n-k)}{k!} + \frac{n(n-1)(n-2)}{3!} + \frac{n(n-1)}{2!} + n$,<a href="https://leetcode.com/problems/super-egg-drop/discuss/181702/Clear-C%2B%2B-codeRuntime-0-msO(1)-spacewith-explation.No-DPWhat-we-need-is-mathematical-thought!">推导过程</a></p><h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><h3 id="思路1代码"><a href="#思路1代码" class="headerlink" title="思路1代码"></a>思路1代码</h3><pre class=" language-Java"><code class="language-Java">public class Solution &#123;    public int superEggDrop(int K, int N) &#123;        return eggDropHelper(K, N);    &#125;    private static Map<String, Integer> eggDPs = new HashMap();    private String hasHelper(int K, int N) &#123;        return Integer.toString(K) + "," + Integer.toString(N);    &#125;    private int eggDropHelper(int K, int N) &#123;        if (!eggDPs.containsKey(hasHelper(K, N))) &#123;            int result = 0;            if (K == 1 || N == 0 || N == 1) &#123;                result = N;            &#125; else &#123;                int low = 1;                int high = N;                while (low + 1 < high) &#123;                    int mid = (low + high) / 2;                    int r1 = eggDropHelper(K, N - mid);                    int r2 = eggDropHelper(K - 1, mid - 1);                    if (r1 > r2) &#123;                        low = mid;                    &#125; else if (r1 < r2) &#123;                        high = mid;                    &#125; else &#123;                        low = high = mid;                    &#125;                &#125;                result = 1 + Math.min(Math.max(eggDropHelper(K, N - low), eggDropHelper(K - 1, low - 1)),                        Math.max(eggDropHelper(K, N-high), eggDropHelper(K - 1, high - 1)));            &#125;            eggDPs.put(hasHelper(K, N), result);        &#125;        return eggDPs.get(hasHelper(K, N));    &#125;&#125;</code></pre><h3 id="思路2代码"><a href="#思路2代码" class="headerlink" title="思路2代码"></a>思路2代码</h3><pre class=" language-Java"><code class="language-Java">public class Solution2 &#123;    public int superEggDrop(int K, int N) &#123;        int ans = 0;        int[] dps = new int[K + 1];        for (int i = 0; i < K + 1; i ++) &#123;            dps[i] = 0;        &#125;        while (dps[K] < N) &#123;            for(int i = K; i > 0; i--) &#123;                dps[i] = 1 + dps[i - 1] + dps[i];            &#125;            ans ++;        &#125;        return ans;    &#125;&#125;</code></pre><h3 id="思路3代码"><a href="#思路3代码" class="headerlink" title="思路3代码"></a>思路3代码</h3><pre class=" language-Java"><code class="language-Java">public class Solution3 &#123;    public int superEggDrop(int K, int N) &#123;        int low = 1;        int high = N;        while (low < high) &#123;            int mid = (low + high) / 2;            if (eggHelper(mid, K, N) < N) &#123;                low = mid + 1;            &#125; else &#123;                high = mid;            &#125;        &#125;        return low;    &#125;    private int eggHelper(int mid, int K, int N) &#123;        int result = 0;        int r = 1;        for (int i = 1; i <= K; i++) &#123;            r *= mid - i + 1;            r /= i;            result += r;            if (result > N) break;        &#125;        return result;    &#125;&#125;</code></pre><h2 id="算法复杂度分析"><a href="#算法复杂度分析" class="headerlink" title="算法复杂度分析"></a>算法复杂度分析</h2><h3 id="思路1"><a href="#思路1" class="headerlink" title="思路1"></a>思路1</h3><h4 id="时间复杂度"><a href="#时间复杂度" class="headerlink" title="时间复杂度"></a>时间复杂度</h4><p>kNlog(N)</p><h4 id="空间复杂度"><a href="#空间复杂度" class="headerlink" title="空间复杂度"></a>空间复杂度</h4><p>N * N</p><h3 id="思路2"><a href="#思路2" class="headerlink" title="思路2"></a>思路2</h3><h4 id="时间复杂度-1"><a href="#时间复杂度-1" class="headerlink" title="时间复杂度"></a>时间复杂度</h4><p>Klog(N)</p><h4 id="空间复杂度-1"><a href="#空间复杂度-1" class="headerlink" title="空间复杂度"></a>空间复杂度</h4><p>N</p><h3 id="思路3"><a href="#思路3" class="headerlink" title="思路3"></a>思路3</h3><h4 id="时间复杂度-2"><a href="#时间复杂度-2" class="headerlink" title="时间复杂度"></a>时间复杂度</h4><p>Klog(N)</p><h4 id="空间复杂度-2"><a href="#空间复杂度-2" class="headerlink" title="空间复杂度"></a>空间复杂度</h4><p>1</p>]]></content>
      
      
      <categories>
          
          <category> Leetcode </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Leetcode </tag>
            
            <tag> Hard </tag>
            
            <tag> DP </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Leetcode:169. 多数元素</title>
      <link href="/2020/03/05/leetcode-169-duo-shu-yuan-su/"/>
      <url>/2020/03/05/leetcode-169-duo-shu-yuan-su/</url>
      
        <content type="html"><![CDATA[<h1 id="多数元素"><a href="#多数元素" class="headerlink" title="多数元素"></a><a href="https://leetcode-cn.com/problems/majority-element/">多数元素</a></h1><h2 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h2><p>给定一个大小为 n 的数组，找到其中的多数元素。多数元素是指在数组中出现次数大于 ⌊ n&#x2F;2 ⌋ 的元素。</p><p>你可以假设数组是非空的，并且给定的数组总是存在多数元素。</p><h2 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h2><pre><code>示例1：    输入: [3,2,3]    输出: 3示例2:    输入: [2,2,1,1,1,2,2]    输出: 2</code></pre><h2 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h2><h3 id="思路1：hash"><a href="#思路1：hash" class="headerlink" title="思路1：hash"></a>思路1：hash</h3><p>使用hash表存储&lt;num, numCount&gt;数与数出现次数，如果数超过⌊ n&#x2F;2 ⌋，则该数为众数</p><h3 id="思路2-Boyer-Moore-投票算法"><a href="#思路2-Boyer-Moore-投票算法" class="headerlink" title="思路2: Boyer-Moore 投票算法"></a>思路2: Boyer-Moore 投票算法</h3><p>直接使用计数标记，记录好候选的最多元素，然后因为多数元素超过一半，所以可以不断使用count计数完成候选元素替换、增加、减小。</p><h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><h3 id="思路2"><a href="#思路2" class="headerlink" title="思路2"></a>思路2</h3><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">majorityElement</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> nums<span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> result <span class="token operator">=</span> nums<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> count <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> nums<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">==</span> result<span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>                count <span class="token operator">++</span><span class="token punctuation">;</span>            <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span> <span class="token keyword">else</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>                count <span class="token operator">--</span><span class="token punctuation">;</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>count <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>                    result <span class="token operator">=</span> nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>                    count <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>                <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>            <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> result<span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><h2 id="复杂度分析"><a href="#复杂度分析" class="headerlink" title="复杂度分析"></a>复杂度分析</h2><h3 id="时间复杂度"><a href="#时间复杂度" class="headerlink" title="时间复杂度"></a>时间复杂度</h3><p>思路1和思路2都是n</p><h3 id="空间复杂度"><a href="#空间复杂度" class="headerlink" title="空间复杂度"></a>空间复杂度</h3><p>思路1会额外有n的字典，思路2不占用新的空间</p>]]></content>
      
      
      <categories>
          
          <category> Leetcode </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Leetcode </tag>
            
            <tag> Easy </tag>
            
            <tag> 数组 </tag>
            
            <tag> 计数 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Leetcode 240:搜索二维矩阵II</title>
      <link href="/2020/03/05/leetcode-240/"/>
      <url>/2020/03/05/leetcode-240/</url>
      
        <content type="html"><![CDATA[<h1 id="搜索二维矩阵II"><a href="#搜索二维矩阵II" class="headerlink" title="搜索二维矩阵II"></a><a href="https://leetcode-cn.com/problems/search-a-2d-matrix-ii/">搜索二维矩阵II</a></h1><h2 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h2><pre><code>编写一个高效的算法来搜索 m x n 矩阵 matrix 中的一个目标值 target。该矩阵具有以下特性：每行的元素从左到右升序排列。每列的元素从上到下升序排列。</code></pre><h2 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h2><pre><code>现有矩阵 matrix 如下：    [        [1,   4,  7, 11, 15],        [2,   5,  8, 12, 19],        [3,   6,  9, 16, 22],        [10, 13, 14, 17, 24],        [18, 21, 23, 26, 30]    ]给定 target = 5，返回 true。给定 target = 20，返回 false。</code></pre><h2 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h2><h3 id="思路1-暴力法"><a href="#思路1-暴力法" class="headerlink" title="思路1 暴力法"></a>思路1 暴力法</h3><p>直接二维数组遍历</p><h3 id="思路2-按照已有顺序遍历"><a href="#思路2-按照已有顺序遍历" class="headerlink" title="思路2: 按照已有顺序遍历"></a>思路2: 按照已有顺序遍历</h3><p>按照题目给的信息，则可根据原数组的排序方式，设置index从数组第一行最后一列元素开始遍历，这样以m+n的算法复杂度得出结果</p><h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><h3 id="思路2：代码"><a href="#思路2：代码" class="headerlink" title="思路2：代码"></a>思路2：代码</h3><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">searchMatrix</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span> matrix<span class="token punctuation">,</span> <span class="token keyword">int</span> target<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>matrix <span class="token operator">==</span> null <span class="token operator">||</span> matrix<span class="token punctuation">.</span>length <span class="token operator">==</span> <span class="token number">0</span> <span class="token operator">||</span> matrix<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>length <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> rows <span class="token operator">=</span> matrix<span class="token punctuation">.</span>length<span class="token punctuation">;</span>        <span class="token keyword">int</span> columns <span class="token operator">=</span> matrix<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>length<span class="token punctuation">;</span>        <span class="token keyword">int</span> rowIndex <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> colIndex <span class="token operator">=</span> columns <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span>        <span class="token keyword">boolean</span> result <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span>rowIndex <span class="token operator">&lt;</span> rows <span class="token operator">&amp;&amp;</span> colIndex <span class="token operator">>=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            <span class="token keyword">while</span> <span class="token punctuation">(</span>rowIndex <span class="token operator">&lt;</span> rows <span class="token operator">&amp;&amp;</span> colIndex <span class="token operator">>=</span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> matrix<span class="token punctuation">[</span>rowIndex<span class="token punctuation">]</span><span class="token punctuation">[</span>colIndex<span class="token punctuation">]</span> <span class="token operator">></span> target<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>                colIndex <span class="token operator">--</span><span class="token punctuation">;</span>            <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>            <span class="token keyword">while</span> <span class="token punctuation">(</span>rowIndex <span class="token operator">&lt;</span> rows <span class="token operator">&amp;&amp;</span> colIndex <span class="token operator">>=</span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> matrix<span class="token punctuation">[</span>rowIndex<span class="token punctuation">]</span><span class="token punctuation">[</span>colIndex<span class="token punctuation">]</span> <span class="token operator">&lt;</span> target<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>                rowIndex <span class="token operator">++</span><span class="token punctuation">;</span>            <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>rowIndex <span class="token operator">&lt;</span> rows <span class="token operator">&amp;&amp;</span> colIndex <span class="token operator">>=</span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> target <span class="token operator">==</span> matrix<span class="token punctuation">[</span>rowIndex<span class="token punctuation">]</span><span class="token punctuation">[</span>colIndex<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>                result <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>                <span class="token keyword">break</span><span class="token punctuation">;</span>            <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> result<span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><h2 id="总结体会"><a href="#总结体会" class="headerlink" title="总结体会"></a>总结体会</h2><p>在实现过程中需要注意下标溢出</p>]]></content>
      
      
      <categories>
          
          <category> Leetcode </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Leetcode </tag>
            
            <tag> Easy </tag>
            
            <tag> 遍历 </tag>
            
            <tag> 边界 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>LeetCode 32:最长有效括号</title>
      <link href="/2020/03/04/leetcode-32/"/>
      <url>/2020/03/04/leetcode-32/</url>
      
        <content type="html"><![CDATA[<h1 id="最长有效括号"><a href="#最长有效括号" class="headerlink" title="最长有效括号"></a><a href="https://leetcode-cn.com/problems/longest-valid-parentheses/">最长有效括号</a></h1><h2 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h2><p>给定一个只包含 ‘(‘ 和 ‘)’ 的字符串，找出最长的包含有效括号的子串的长度。</p><h3 id="示例1"><a href="#示例1" class="headerlink" title="示例1:"></a>示例1:</h3><pre><code>输入: &quot;(()&quot;输出: 2解释: 最长有效括号子串为 &quot;()&quot;</code></pre><h3 id="示例2"><a href="#示例2" class="headerlink" title="示例2:"></a>示例2:</h3><pre><code>输入: &quot;)()())&quot;输出: 4解释: 最长有效括号子串为 &quot;()()&quot;</code></pre><h2 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h2><h3 id="思路1-DP-Stack"><a href="#思路1-DP-Stack" class="headerlink" title="思路1 DP + Stack"></a>思路1 DP + Stack</h3><p>存在括号匹配可用栈进行存储，寻找满足括号对的存在，但是在本题中光有匹配的数目是不够的，需要从整体上计算匹配上的括号数目，且存在括号包含和括号不包含两种情况，如果非包含关系的话可以使用DP思想将匹配好的为止进行存储</p><h3 id="思路2-Stack"><a href="#思路2-Stack" class="headerlink" title="思路2 Stack"></a>思路2 Stack</h3><p>其实与思路1类似可以直接只是用栈作为容器完成程序，主要在于满足匹配的最长子串的”)”开始索引，然后使用最后匹配的”)”进行位置计算，“(”和中间”)”全部pop,注意的关键点在于初始化栈是将-1引入为第一个元素，充当于”)”</p><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><h4 id="源文件"><a href="#源文件" class="headerlink" title="源文件"></a>源文件</h4><h4 id="DP-Stack"><a href="#DP-Stack" class="headerlink" title="DP + Stack"></a>DP + Stack</h4><ul><li>Java</li></ul><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">longestValidParentheses</span><span class="token punctuation">(</span>String s<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>s <span class="token operator">==</span> null <span class="token operator">||</span> s<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> dps <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">int</span><span class="token punctuation">[</span>s<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> matchIndex <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> curLength <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> result <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        Stack<span class="token operator">&lt;</span>Integer<span class="token operator">></span> stack <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Stack</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> s<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            <span class="token keyword">char</span> newChar <span class="token operator">=</span> s<span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>newChar <span class="token operator">==</span> <span class="token string">'('</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>                stack<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>            <span class="token keyword">else</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>stack<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>                    matchIndex <span class="token operator">=</span> stack<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    curLength <span class="token operator">=</span> i <span class="token operator">-</span> matchIndex <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>                    <span class="token keyword">if</span> <span class="token punctuation">(</span>matchIndex <span class="token operator">-</span> <span class="token number">1</span> <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>                        curLength <span class="token operator">+=</span> dps<span class="token punctuation">[</span>matchIndex <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>                    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>                    dps<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> curLength<span class="token punctuation">;</span>                    <span class="token keyword">if</span> <span class="token punctuation">(</span>curLength <span class="token operator">></span> result<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>                        result <span class="token operator">=</span> curLength<span class="token punctuation">;</span>                    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>                <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>            <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> result<span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><ul><li>Python</li></ul><pre class=" language-Python"><code class="language-Python">class Solution:    def longestValidParentheses(self, s: str) -> int:        dp = [0, ] * len(s)        result = 0        cache = []        for i in range(0, len(s)):            cur_char = s[i]            if cur_char == '(':                cache.append(i)            else:                if len(cache) == 0:                    continue                else:                    match_index = cache.pop()                    cur_len = i - match_index + 1                    if match_index - 1 > 0:                        cur_len += dp[match_index - 1]                    dp[i] = cur_len                    if cur_len > result:                        result = cur_len        return result</code></pre><h4 id="Stack"><a href="#Stack" class="headerlink" title="Stack"></a>Stack</h4><ul><li>Java</li></ul><pre class=" language-Java"><code class="language-Java">public class Solution2 &#123;    public int longestValidParentheses(String s) &#123;        if (s == null || s.length() < 2) &#123;            return 0;        &#125;        Stack<Integer> stack = new Stack<>();        stack.push(-1);        int result = 0;        int tmp = 0;        for (int i = 0; i < s.length(); i ++) &#123;            if (s.charAt(i) == '(') &#123;                stack.push(i);            &#125; else &#123;                stack.pop();                if (stack.isEmpty()) &#123;                    stack.push(i);                &#125; else &#123;                    tmp = i - stack.peek();                    result = result > tmp ? result : tmp;                &#125;            &#125;        &#125;        return result;    &#125;&#125;</code></pre><h2 id="实验效果分析"><a href="#实验效果分析" class="headerlink" title="实验效果分析"></a>实验效果分析</h2><h3 id="时间复杂度"><a href="#时间复杂度" class="headerlink" title="时间复杂度"></a>时间复杂度</h3><h4 id="Stack-DP"><a href="#Stack-DP" class="headerlink" title="Stack + DP"></a>Stack + DP</h4><p>$n$</p><h4 id="Stack-1"><a href="#Stack-1" class="headerlink" title="Stack"></a>Stack</h4><p>$n$</p><h3 id="空间复杂度"><a href="#空间复杂度" class="headerlink" title="空间复杂度"></a>空间复杂度</h3><h4 id="Stack-DP-1"><a href="#Stack-DP-1" class="headerlink" title="Stack + DP"></a>Stack + DP</h4><p>$2n$</p><h4 id="Stack-2"><a href="#Stack-2" class="headerlink" title="Stack"></a>Stack</h4><p>$n$</p>]]></content>
      
      
      <categories>
          
          <category> Leetcode </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Leetcode </tag>
            
            <tag> Hard </tag>
            
            <tag> DP </tag>
            
            <tag> Stack </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SAE：Rank+(预训练+GNN联合训练)</title>
      <link href="/2020/03/04/sae-yue-du/"/>
      <url>/2020/03/04/sae-yue-du/</url>
      
        <content type="html"><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="Oh, this is an invalid password. Check and try again, please." data-whm="OOPS, these decrypted content may changed, but you can still have a look.">  <script id="hbeData" type="hbeData" data-hmacdigest="2b76aef1a815c82976c14d985ad509b9bc4dfa5beaa486db50c97d04dd5dd987"></script>  <div class="hbe hbe-content">    <div class="hbe hbe-input hbe-input-default">      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">        <span class="hbe hbe-input-label-content hbe-input-label-content-default">Hey, password is required here.</span>      </label>    </div>  </div></div><script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
      
      
      <categories>
          
          <category> NLP </category>
          
      </categories>
      
      
        <tags>
            
            <tag> NLP </tag>
            
            <tag> 论文阅读 </tag>
            
            <tag> 阅读理解 </tag>
            
            <tag> HotpotQA </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>HotpotQA分析</title>
      <link href="/2019/12/09/hotpotqa-fen-xi/"/>
      <url>/2019/12/09/hotpotqa-fen-xi/</url>
      
        <content type="html"><![CDATA[<h1 id="HotpotQA分析"><a href="#HotpotQA分析" class="headerlink" title="HotpotQA分析"></a>HotpotQA分析</h1><h2 id="数据说明"><a href="#数据说明" class="headerlink" title="数据说明"></a>数据说明</h2><p><a href="https://arxiv.org/pdf/1809.09600.pdf">HOTPOTQA: A Dataset for Diverse, Explainable<br>Multi-hop Question Answering</a></p><h2 id="简单数据分析"><a href="#简单数据分析" class="headerlink" title="简单数据分析"></a>简单数据分析</h2><h3 id="数据样例"><a href="#数据样例" class="headerlink" title="数据样例"></a>数据样例</h3><p><img src="https://i.loli.net/2019/12/09/Xru7oOWUNjbLk1M.png" alt="数据样例.png"></p><h3 id="答案长度分布"><a href="#答案长度分布" class="headerlink" title="答案长度分布"></a>答案长度分布</h3><p><img src="https://i.loli.net/2019/12/09/Xru7oOWUNjbLk1M.png" alt="答案长度分布.png"></p>]]></content>
      
      
      <categories>
          
          <category> NLP </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 阅读理解 </tag>
            
            <tag> 数据集 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Attention详细解析</title>
      <link href="/2019/12/08/attention-xiang-xi-jie-xi/"/>
      <url>/2019/12/08/attention-xiang-xi-jie-xi/</url>
      
        <content type="html"><![CDATA[<h1 id="Attention机制理解"><a href="#Attention机制理解" class="headerlink" title="Attention机制理解"></a>Attention机制理解</h1><h2 id="原文"><a href="#原文" class="headerlink" title="原文"></a>原文</h2><p><a href="https://zhuanlan.zhihu.com/p/47063917">Attention机制详解（一）——Seq2Seq中的Attention</a></p><h2 id="Attention提出理由"><a href="#Attention提出理由" class="headerlink" title="Attention提出理由"></a>Attention提出理由</h2><h3 id="解决痛点"><a href="#解决痛点" class="headerlink" title="解决痛点"></a>解决痛点</h3><p>在传统的机器翻译中采用encoder-decoder结构，encoder将输入的句子将其转换为定长的向量，然后decoder将向量转化为目标文字。且通常是encoder将最后一层hidden vector作为decoder的起始，然后通过decoder翻译为其他语言。这其中会由于RNN自身特性带来长程梯度消失和并行化差的问题。其中较长的句子也较难在最后的vector中保存需要的有效信息</p><h3 id="提出解决方案"><a href="#提出解决方案" class="headerlink" title="提出解决方案"></a>提出解决方案</h3><p>模拟人翻译的过程，当翻译部分词时将注意力或者更多的注意力放在需要关注的词上，通过类似于赋权的方式计算每个输入位置j与输出位置的关联性。例如可以计算每个输入位置j和当前输出位置的关联性$e_{tj} &#x3D; a(s_{t-1}, h_j)$,所以写成向量形式就可以得到$\stackrel{-&gt;}{e_t} &#x3D; (a(s_{t-1}, h_1), …, a(s_{t-1}, h_T))$ $a$是一种相关性的算符，常见的有点乘形式$\stackrel{-&gt;}{e_t}&#x3D;\stackrel{-&gt;}{s_{t-1}}^T\stackrel{-&gt;}{h}$,加权点乘$\stackrel{-&gt;}{s_{t-1}}^TW\stackrel{-&gt;}{h}$, 加和$\stackrel{-&gt;}{v}^Ttanh(W_1\stackrel{-&gt;}{h} + W_2\stackrel{-&gt;}{s_{t - 1}})$,然后$\stackrel{-&gt;}{s_{t - 1}}$进行softmax操作将normalize得到attention的分布</p><h3 id="self-attention提出原因"><a href="#self-attention提出原因" class="headerlink" title="self-attention提出原因"></a>self-attention提出原因</h3><p>尽可能的去除RNNs网络结构，解决RNN由于其顺序结构进行训练，训练速度会受到约束。在RNN中需要处理对句子中的词一步步地进行顺序处理，并且当它们相距较远时候效果较差。Self-Attention利用了Attention的机制，计算每个单词和其他所有单词之间的关联。可以更好地考虑上下文的信息</p><h3 id="Transformer整体结构解析"><a href="#Transformer整体结构解析" class="headerlink" title="Transformer整体结构解析"></a>Transformer整体结构解析</h3><p>使用Multi-head Attention将多个Self-Attention结构结合，每个head会学习到不同的表征，给模型更大的容量</p><h3 id="Self-Attention详细解析"><a href="#Self-Attention详细解析" class="headerlink" title="Self-Attention详细解析"></a>Self-Attention详细解析</h3><p>Self-Attention基本结构如下<img src="/./scaled_dot_product_attention.jpg" alt="avatar"></p><h4 id="对于Self-Attention的利用"><a href="#对于Self-Attention的利用" class="headerlink" title="对于Self-Attention的利用"></a>对于Self-Attention的利用</h4><p>对于Self-Attention来说使用来自一个输入的Q(Query)、K(Key)、V(value)进行计算。首先计算Q与K之间的点乘，然后防止其结果过大，除以一个尺度标度$\sqrt{d_k}$,其中$d_k$为一个query和key向量的维度。再利用Softmax将其结果归一化为概率分布，然后再乘以矩阵V就得到权重求和的表示。该操作表示为$Attention(Q, K, V)&#x3D;softmax(QK^T\div\sqrt{d_k})V$,其中Q,K,V都是通过输入向量进行矩阵运算得到。有一个可视化较好的<a href="https://zhuanlan.zhihu.com/p/47282410">解释</a>。需要注意的点是，在类似于encoder和decoder的第一层中q,k,v都是使用来自前一层的decoder的输出，但是在decoder的第二层使用的是来自q是来自encoder的输出，k,v是来自decoder的第一层结果。同时在decoder中使用的不是单纯的Multi-Head Attention而是使用了Masked Multi-Head Attention（因为在翻译过程中不知道后面的输入?)。</p><h4 id="其他结构"><a href="#其他结构" class="headerlink" title="其他结构"></a>其他结构</h4><p>使用了Positional Encoding，该方法主要是将模型没有recurrence和convolution的结构导致没够关于单词在源句子中的位置或绝对的信息，为了让模型更好地学习位置信息的产物，Transformer是使用了三角函数的方式进行encoding。同时在每一步的Multi-Head Attention之后使用了Add和Normanize操作，其中Add表示Residual Connection,该方法是为了解决多层网络训练困难的问题，通过将前一层的信息无差地传递到下一层，可以有效的关注差异部分，这一方法之前在ResNet等图像处理中经常被使用到。而Norm是代表Layer Normalization，该方法通过对层的激活值得归一化，加速模型的训练过程，使得模型可以更快地收敛<a href="https://arxiv.org/pdf/1607.06450.pdf">Layer Normalization</a></p><h2 id="Attention模型的应用"><a href="#Attention模型的应用" class="headerlink" title="Attention模型的应用"></a>Attention模型的应用</h2><h3 id="自然语言处理"><a href="#自然语言处理" class="headerlink" title="自然语言处理"></a>自然语言处理</h3><h4 id="创造新的结构Universal-Transformers"><a href="#创造新的结构Universal-Transformers" class="headerlink" title="创造新的结构Universal Transformers"></a>创造新的结构Universal Transformers</h4><p><a href="https://arxiv.org/pdf/1807.03819.pdf">Universal Transformers</a><br><br>该文章结合了Transformer结构和RNN循环归纳的优点，使得Transformer结构能够适用更多自然语言理解的问题。</p><h4 id="创造新的预训练模型Bert等"><a href="#创造新的预训练模型Bert等" class="headerlink" title="创造新的预训练模型Bert等"></a>创造新的预训练模型Bert等</h4><p><a href="https://arxiv.org/pdf/1810.04805.pdf">BERT: Pre-training of Deep Bidirectional Transformers for Language Understanding</a><br><br>使用双向的Transformer进行预处理，得到包含有上下文信息的表征，根据表征可以fine-tune很多自然语言处理任务，对于GLUE Benchmark(主要包含MNLI,RTE：比较两个句子的语义关系，QQP：判别Quora上两个问题相似度，QNLI：问答，SST-2：情感分析，CoLA:语句合理性判别，STS-B, MRPC：句子相似度判别)，SQuAD(问答)，NER（命名实体识别）等都有极大的提高.</p><h4 id="文本生成"><a href="#文本生成" class="headerlink" title="文本生成"></a>文本生成</h4><p><a href="https://arxiv.org/abs/1801.10198.pdf">Generating Wikipedia by Summarizing Long Sequences</a></p><h3 id="图像处理及合成"><a href="#图像处理及合成" class="headerlink" title="图像处理及合成"></a>图像处理及合成</h3><h4 id="Attention利用始祖"><a href="#Attention利用始祖" class="headerlink" title="Attention利用始祖"></a>Attention利用始祖</h4><p><a href="https://arxiv.org/abs/1502.03044">Show, Attend and Tell: Neural Image Caption Generation with Visual Attention</a><br><br>利用Attention机制进行Image Caption(将图像翻译为文字表述)</p><h4 id="文本合成和超分使用"><a href="#文本合成和超分使用" class="headerlink" title="文本合成和超分使用"></a>文本合成和超分使用</h4><p><a href="https://arxiv.org/abs/1802.05751">Image Transformer</a><br><br>可以使用Attention机制对图像进行合成，例如将局部图像进行补全，也可以将低分辨率的图像还原高分辨率的图像。同时由于Image Transformer模型训练的稳定性，可能和GAN有抗衡之势</p><h3 id="其他领域结合"><a href="#其他领域结合" class="headerlink" title="其他领域结合"></a>其他领域结合</h3><h4 id="推荐"><a href="#推荐" class="headerlink" title="推荐"></a>推荐</h4><p><a href="https://arxiv.org/pdf/1711.04725.pdf">Neural Attentive Session-based Recommendation</a><br><br>利用Attention模型处理用户sesstion中的序列信息进行相关推荐</p><h4 id="音乐生成"><a href="#音乐生成" class="headerlink" title="音乐生成"></a>音乐生成</h4><p><a href="">Generating Long-Term Structure in Songs and Stories</a><br><br>使用Attention RNN创作乐曲</p>]]></content>
      
      
      <categories>
          
          <category> NLP </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Attention </tag>
            
            <tag> BERT </tag>
            
            <tag> 网络结构 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>UNC多粒度支撑段落和支撑句</title>
      <link href="/2019/12/08/unc-duo-li-du-zhi-cheng-duan-luo-he-zhi-cheng-ju/"/>
      <url>/2019/12/08/unc-duo-li-du-zhi-cheng-duan-luo-he-zhi-cheng-ju/</url>
      
        <content type="html"><![CDATA[<h1 id="UNC多粒度支撑段落和支撑句"><a href="#UNC多粒度支撑段落和支撑句" class="headerlink" title="UNC多粒度支撑段落和支撑句"></a>UNC多粒度支撑段落和支撑句</h1><h2 id="论文地址"><a href="#论文地址" class="headerlink" title="论文地址"></a>论文地址</h2><p><a href="https://arxiv.org/pdf/1909.08041.pdf">Revealing the Importance of Semantic Retrieval<br>for Machine Reading at Scale</a></p><h2 id="一句话概括"><a href="#一句话概括" class="headerlink" title="一句话概括"></a>一句话概括</h2><p>通过term按照文本相关性搜索到可靠数量的段落，然后通过神经网络模型召回支撑段落，然后再在支撑段落里召回支撑句，并且文章做了大量的消融实验证明了支撑段落具有重大意义，支撑句需要有一些噪音效果才比较好。</p><h2 id="论文精读"><a href="#论文精读" class="headerlink" title="论文精读"></a>论文精读</h2><h3 id="摘要"><a href="#摘要" class="headerlink" title="摘要"></a>摘要</h3><h2 id="开源可复现"><a href="#开源可复现" class="headerlink" title="开源可复现"></a>开源可复现</h2><p>开源</p><h3 id="开源地址"><a href="#开源地址" class="headerlink" title="开源地址"></a>开源地址</h3><p><a href="easonnie/semanticRetrievalMRS">easonnie&#x2F;semanticRetrievalMRS</a></p><h3 id="复现效果"><a href="#复现效果" class="headerlink" title="复现效果"></a>复现效果</h3><p>无</p>]]></content>
      
      
      <categories>
          
          <category> NLP </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 论文阅读 </tag>
            
            <tag> IR </tag>
            
            <tag> 信息检索 </tag>
            
            <tag> hotpotqa </tag>
            
            <tag> emnlp </tag>
            
            <tag> 2019 </tag>
            
            <tag> multi-hot </tag>
            
            <tag> 消融实验 </tag>
            
            <tag> 需要精读 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>微软实验室HGN分层图网络</title>
      <link href="/2019/12/08/wei-ruan-shi-yan-shi-hgn-fen-ceng-tu-wang-luo/"/>
      <url>/2019/12/08/wei-ruan-shi-yan-shi-hgn-fen-ceng-tu-wang-luo/</url>
      
        <content type="html"><![CDATA[<h1 id="微软实验室HGN分层图网络"><a href="#微软实验室HGN分层图网络" class="headerlink" title="微软实验室HGN分层图网络"></a>微软实验室HGN分层图网络</h1><h2 id="论文地址"><a href="#论文地址" class="headerlink" title="论文地址"></a>论文地址</h2><p><a href="https://arxiv.org/pdf/1911.03631.pdf">Hierarchical Graph Network for Multi-hop Question Answering</a></p><h2 id="一句话概括"><a href="#一句话概括" class="headerlink" title="一句话概括"></a>一句话概括</h2><p>使用图神经网络实现段落、句子、实体关联加入到多步问答中，做了大量消融实验，包含各个层之间的消融以及不同预训练模型的消融</p><h2 id="论文精读"><a href="#论文精读" class="headerlink" title="论文精读"></a>论文精读</h2><h3 id="摘要"><a href="#摘要" class="headerlink" title="摘要"></a>摘要</h3><h2 id="开源可复现"><a href="#开源可复现" class="headerlink" title="开源可复现"></a>开源可复现</h2><p>非开源</p><h3 id="开源地址"><a href="#开源地址" class="headerlink" title="开源地址"></a>开源地址</h3><p>无</p><h3 id="复现效果"><a href="#复现效果" class="headerlink" title="复现效果"></a>复现效果</h3><p>无</p>]]></content>
      
      
      <categories>
          
          <category> NLP </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 论文阅读 </tag>
            
            <tag> 阅读理解 </tag>
            
            <tag> 图神经网络 </tag>
            
            <tag> 多层图神经网络 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>博客搭建</title>
      <link href="/2019/12/08/blog-builder/"/>
      <url>/2019/12/08/blog-builder/</url>
      
        <content type="html"><![CDATA[<h1 id="博客搭建"><a href="#博客搭建" class="headerlink" title="博客搭建"></a>博客搭建</h1><h2 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h2><p><a href="https://godweiyang.com/about/">韦阳的博客</a></p><h2 id="实际使用主题"><a href="#实际使用主题" class="headerlink" title="实际使用主题"></a>实际使用主题</h2><p><a href="https://github.com/blinkfox/hexo-theme-matery">hexo-theme-matery</a></p><h2 id="主题目前特色实现功能"><a href="#主题目前特色实现功能" class="headerlink" title="主题目前特色实现功能"></a>主题目前特色实现功能</h2><ul><li>标签和分类</li><li>文档搜索</li><li>gittalk集成</li></ul>]]></content>
      
      
      <categories>
          
          <category> 实用技巧 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 博客搭建 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>斯坦福NLP齐鹏多步问题生成实现hotpotqa开放域问答</title>
      <link href="/2019/12/08/si-tan-fu-nlp-qi-peng-duo-bu-wen-ti-sheng-cheng-shi-xian-hotpotqa-kai-fang-yu-wen-da/"/>
      <url>/2019/12/08/si-tan-fu-nlp-qi-peng-duo-bu-wen-ti-sheng-cheng-shi-xian-hotpotqa-kai-fang-yu-wen-da/</url>
      
        <content type="html"><![CDATA[<h1 id="斯坦福NLP齐鹏多步问题生成实现hotpotqa开放域问答"><a href="#斯坦福NLP齐鹏多步问题生成实现hotpotqa开放域问答" class="headerlink" title="斯坦福NLP齐鹏多步问题生成实现hotpotqa开放域问答"></a>斯坦福NLP齐鹏多步问题生成实现hotpotqa开放域问答</h1><h2 id="论文地址"><a href="#论文地址" class="headerlink" title="论文地址"></a>论文地址</h2><p><a href="https://arxiv.org/pdf/1910.07000.pdf">Answering Complex Open-domain Questions Through Iterative Query Generation</a></p><h2 id="一句话概括"><a href="#一句话概括" class="headerlink" title="一句话概括"></a>一句话概括</h2><p>使用启发式的方法进行多步问题的细粒度化，在召回量较少的情况下得到高准确率的支撑文档，进而提高开放域问答的效果，并完成一个完整的Pipeline的工作,其中包含很多小技巧，包含在Content和question编码的时候使用0、1而不是cls&#x2F;sep，提高实验基线。</p><h2 id="论文精读"><a href="#论文精读" class="headerlink" title="论文精读"></a>论文精读</h2><h3 id="摘要"><a href="#摘要" class="headerlink" title="摘要"></a>摘要</h3><h2 id="开源可复现"><a href="#开源可复现" class="headerlink" title="开源可复现"></a>开源可复现</h2><h3 id="开源地址"><a href="#开源地址" class="headerlink" title="开源地址"></a>开源地址</h3><p><a href="https://github.com/qipeng/golden-retriever">golden-retriever</a></p><h3 id="复现效果"><a href="#复现效果" class="headerlink" title="复现效果"></a>复现效果</h3><p>暂无</p><h2 id="tag"><a href="#tag" class="headerlink" title="tag"></a>tag</h2><p>hotpotqa 开放域 问答 问题生成 多步 EMNLP2019</p>]]></content>
      
      
      <categories>
          
          <category> NLP </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 阅读理解 </tag>
            
            <tag> 个人论文理解 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
